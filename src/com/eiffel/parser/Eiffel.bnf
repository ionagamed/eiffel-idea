{
  parserClass="com.eiffel.parser.EiffelParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Eiffel"
  psiImplClassSuffix="Impl"
  psiPackage="com.eiffel.psi"
  psiImplPackage="com.eiffel.psi.impl"

  elementTypeHolderClass="com.eiffel.psi.EiffelTypes"
  elementTypeClass="com.eiffel.psi.EiffelElementType"
  tokenTypeClass="com.eiffel.psi.EiffelTokenType"
  elementTypeFactory="com.eiffel.psi.EiffelElementTypeFactory.createElement"

  psiImplUtilClass="com.eiffel.psi.impl.EiffelPsiImplUtil"

  tokens=[
    OR_KEYWORD='or'
    XOR_KEYWORD='xor'
    AND_KEYWORD='and'
    NOT_KEYWORD='not'
    IMPLIES_KEYWORD='implies'
    THEN_KEYWORD='then'
    ELSE_KEYWORD='else'
    EQ='='
    COLON=':'
    COMMA=','
    SEMICOLON=';'
    ASSIGN=':='
    LEFT_CURLY_BRACKET='{'
    RIGHT_CURLY_BRACKET='}'
    LEFT_SQUARE_BRACKET='['
    RIGHT_SQUARE_BRACKET=']'
    LEFT_PAREN='('
    RIGHT_PAREN=')'
    END_KEYWORD='end'
    DEFERRED_KEYWORD='deferred'
    EXPANDED_KEYWORD='expanded'
    FROZEN_KEYWORD='frozen'
    NOTE_KEYWORD='note'
    OBSOLETE_KEYWORD='obsolete'
    FEATURE_KEYWORD='feature'
    ALIAS_KEYWORD='alias'
    CONVERT_KEYWORD='convert'
    INHERIT_KEYWORD='inherit'
    RENAME_KEYWORD='rename'
    AS_KEYWORD='as'
    NONE_KEYWORD='none'
    ALL_KEYWORD='all'
    ASSIGN_KEYWORD='assign'
    CLASS_KEYWORD='class'
    EXPORT_KEYWORD='export'
    DO_KEYWORD='do'
    ONCE_KEYWORD='once'
    LOCAL_KEYWORD='local'
    ENSURE_KEYWORD='ensure'
    ELSEIF_KEYWORD='elseif'
    ACROSS_KEYWORD='across'
    FROM_KEYWORD='from'
    REQUIRE_KEYWORD='require'
    INVARIANT_KEYWORD='invariant'
    OLD_KEYWORD='old'
    ONLY_KEYWORD='only'
    CHECK_KEYWORD='check'
    VARIANT_KEYWORD='variant'
    PRECURSOR_KEYWORD='precursor'
    REDEFINE_KEYWORD='redefine'
    UNDEFINE_KEYWORD='undefine'
    LIKE_KEYWORD='like'
    CURRENT_KEYWORD='current'
    CREATE_KEYWORD='create'
    TUPLE_KEYWORD='tuple'
    SELECT_KEYWORD='select'
    IF_KEYWORD='if'
    INSPECT_KEYWORD='inspect'
    WHEN_KEYWORD='when'
    UNTIL_KEYWORD='until'
    LOOP_KEYWORD='loop'
    SOME_KEYWORD='some'
    DEBUG_KEYWORD='debug'
    RESULT_KEYWORD='result'
    ATTACHED_KEYWORD='attached'
    QUESTION='?'
    EXCLAMATION='!'
    RESCUE_KEYWORD='rescue'
    RETRY_KEYWORD='retry'
    ATTRIBUTE_KEYWORD='attribute'
    DOT='.'
    DDOT='..'
    ARROW='->'
    AGENT_KEYWORD='agent'
    DOLLAR='$'
    LEFT_TRIANGLE_DBRACKET='<<'
    RIGHT_TRIANGLE_DBRACKET='>>'
    DETACHABLE_KEYWORD='detachable'
    SEPARATE_KEYWORD='separate'
    VOID_KEYWORD='void'
  ]
}

eiffelFile ::= class_declaration

class_name ::= IDENTIFIER | 'tuple' | 'none'
comment ::= COMMENT_ONELINE

class_declaration ::=
    [notes]
    class_header
    [formal_generics]
    [obsolete]
    [inheritance]
    [creators]
    [converters]
    [features]
    [notes]
    [invariant]
    [notes]
    'end'
    {
        methods=[
            getName
            setName
            getNameIdentifier
            getFeatureDeclarations
            getNewFeatures
            getFeatureNames
            getAllNewFeatures
            getAllNewFeaturesInContext
            getDirectParentNames
            getDirectParents
            getParentNames
            getParents
            getParentNamesWithDepth
            getParentsWithDepth
            getAllNewFeaturesInContextWithDepth
            getAllNewFeaturesSubset
            getCreationProcedures
            getNewFeature
        ]
        stubClass="com.eiffel.psi.stubs.EiffelClassDeclarationStub"
    }
class_header ::= [header_mark] 'class' class_name
private class_header_recovery ::= !keyword_recovery_
header_mark ::= ['frozen'] ['expanded'] ['deferred']

notes ::= 'note' note_list
private note_list ::= (note_entry ';'?)*
note_entry ::= note_name note_values
note_name ::= IDENTIFIER ':'
private note_values ::= note_item (',' note_item)*
note_item ::= IDENTIFIER | manifest_constant

obsolete ::= 'obsolete' message
message ::= manifest_string

features ::= feature_clause+
feature_clause ::= 'feature' [clients] [header_comment] feature_declaration_list {
    pin = 1
    recoverWhile = feature_clause_recovery
}
private feature_clause_recovery ::= !('feature' | 'invariant' | 'note' | 'end')
private feature_declaration_list ::= (feature_declaration ';'?)*
header_comment ::= comment

feature_declaration ::= new_feature_list [declaration_body]
    {
        methods=[
            getLocalEntityIdentifiers
            getLocalEntityIdentifier
            getFormalArgumentIdentifiers
            getFormalArgumentIdentifier
            getCommentDoc
        ]
    }
private declaration_body ::= [formal_arguments] [query_mark] [feature_value]
private query_mark ::= type_mark [assigner_mark]
private type_mark ::= ':' type
feature_value ::=
    (explicit_value [obsolete] [header_comment] [notes]) |
    ([obsolete] [header_comment] [notes] attribute_or_routine)
explicit_value ::= '=' constant_expression
constant_expression ::= (manifest_constant operator manifest_constant) | (operator manifest_constant) | manifest_constant
private explicit_value_recovery ::= !(keyword_recovery_ | IDENTIFIER)

private new_feature_list ::= new_feature (','? new_feature)*
new_feature ::= ['frozen'] extended_feature_name
{
    methods = [
        getName
        getTypeString
        getType
        getSerializedFormalArguments
        getFeatureDeclaration
        getFeatureClause
        getClientNames
        isAccessibleBy
        getCommentDoc
    ]
    implements="com.eiffel.psi.EiffelTypedElement"
    stubClass="com.eiffel.psi.stubs.EiffelNewFeatureStub"
}

private attribute_or_routine ::= [precondition] [local_declarations] feature_body [postcondition] [rescue] END_KEYWORD
private feature_body ::= deferred | effective_routine | attribute

private extended_feature_name ::= feature_name [alias]
feature_name ::= IDENTIFIER
private alias ::= 'alias' alias_name ['convert']
//alias_name ::= operator | bracket
alias_name ::= STRING_LITERAL // later checked for consistency by annotations
//bracket ::= ALIAS_BRACKETS

private operator ::= binary_operator | unary_operator | FREE_OPERATOR
private binary_operator ::= ('and' 'then') | ('or' 'else') | 'and' | 'or' | 'implies' | 'xor'
private unary_operator ::= 'not'

private assigner_mark ::= 'assign' feature_name

inheritance ::= inherit_clause+
private inherit_clause ::= 'inherit' [non_conformance] parent_list
non_conformance ::= '{' 'none' '}'
private parent_list ::= parent (';'? parent)*
parent ::= class_type [feature_adaption] {
    stubClass="com.eiffel.psi.stubs.EiffelParentStub"
}
feature_adaption ::=
    (rename [new_exports] [undefine] [redefine] [select] 'end') |
    ([rename] new_exports [undefine] [redefine] [select] 'end') |
    ([rename] [new_exports] undefine [redefine] [select] 'end') |
    ([rename] [new_exports] [undefine] redefine [select] 'end') |
    ([rename] [new_exports] [undefine] [redefine] select 'end') |


private rename ::= 'rename' rename_list
private rename_list ::= rename_pair (','? rename_pair)*
rename_pair ::= feature_name 'as' extended_feature_name

clients ::= '{' client_specifier '}'
client_specifier ::= class_list | 'none' | 'all'
private class_list ::= class_name (','? class_name)*

new_exports ::= 'export' new_export_list
private new_export_list ::= new_export_item (','? new_export_item)*
private new_export_item ::= clients [header_comment] feature_set
private feature_set ::= feature_list | 'all'
feature_list ::= feature_name (','? feature_name)*

formal_arguments ::= '(' entity_declaration_list ')'
private entity_declaration_list ::= entity_declaration_group (';'? entity_declaration_group)*
entity_declaration_group ::= entity_identifier_list type_mark
private entity_identifier_list ::= entity_identifier (',' entity_identifier)*
entity_identifier ::= IDENTIFIER
    {
        methods=[
            getTypeString
            getType
        ]
        implements="com.eiffel.psi.EiffelTypedElement"
    }

deferred ::= 'deferred'
private effective_routine ::= internal | ext
private internal ::= routine_mark compound
private internal_recovery ::= !keyword_recovery_
private routine_mark ::= 'do' | once
once ::= 'once' ['(' key_list ')']
private key_list ::= manifest_string (','? manifest_string)*

local_declarations ::= 'local' [entity_declaration_list]

compound ::= (instruction ';'?)*
instruction ::=
    conditional |
    creation_instruction |
    precursor |
    loop |
    multi_branch |
    assignment |
    assigner_call |
    call |
    debug |
    check |
    retry
    {
      recoverWhile=instruction_recovery
    }
private instruction_recovery ::= !(
    keyword_recovery_ |
    instruction
) // contains a lot of hax to make conditionals etc. possible

precondition ::= 'require' ['else'] assertion
postcondition ::= 'ensure' ['then'] assertion [only]
invariant ::= 'invariant' assertion
//{
//    pin = 1
//    recoverWhile = keyword_or_identifier_recovery
//}
private assertion ::= (assertion_clause ';'?)*

    // second one is optional for some unknown reason, but there are examples of this in elks library
    // see integer_8.e in gobo free_elks
assertion_clause ::= (tag_mark unlabeled_assertion_clause) | tag_mark | unlabeled_assertion_clause

private unlabeled_assertion_clause ::= boolean_loop | boolean_expression | comment
private tag_mark ::= tag ':'
tag ::= IDENTIFIER

old ::= 'old' expression

only ::= 'only' [feature_list]

check ::= 'check' assertion [notes] ['then' compound] 'end'

variant ::= 'variant' [tag_mark] expression

precursor ::= 'precursor' [parent_qualification] [actuals]
parent_qualification ::= '{' class_name '}'

redefine ::= 'redefine' feature_list
undefine ::= 'undefine' feature_list

type ::= 'none' | class_or_tuple_type | formal_generic_name | anchored {
    methods=[
        conformsTo
        getString
        getUngenerified
    ]
}
private class_or_tuple_type ::= tuple_type | class_type
private class_type ::= ['detachable' | 'attached'] ['separate'] [attachment_mark] class_name [actual_generics] { extends=type }
attachment_mark ::= '?' | '!'
private anchored ::= ['detachable' | 'attached'] ['separate'] [attachment_mark] 'like' anchor
private anchor ::= expression | 'current'

actual_generics ::= '[' type_list ']'
private type_list ::= type (',' type)*

formal_generics ::= '[' formal_generic_list ']'
private formal_generic_list ::= formal_generic (',' formal_generic)*
formal_generic ::= ['frozen'] formal_generic_name [constraint]
formal_generic_name ::= ('?' | IDENTIFIER)

private constraint ::= '->' constraining_types [constraint_creators]
constraining_types ::= single_constraint | multiple_constraint
private single_constraint ::= type [renaming]
private renaming ::= rename 'end'
multiple_constraint ::= '{' constraint_list '}'
private constraint_list ::= single_constraint (',' single_constraint)*
constraint_creators ::= 'create' feature_list 'end'

private tuple_type ::= ['detachable' | 'attached'] ['separate'] 'tuple' [tuple_parameter_list] { extends=type }
private tuple_parameter_list ::= '[' tuple_parameters ']'
private tuple_parameters ::= entity_declaration_list | type_list

manifest_tuple ::= '[' expression_list ']'
private expression_list ::= (expression (',' expression)*)?

converters ::= 'convert' converter_list
private converter_list ::= converter (',' converter)*
private converter ::= conversion_procedure | conversion_query
conversion_procedure ::= feature_name '(' '{' type_list '}' ')'
conversion_query ::= feature_name ':' '{' type_list '}'

select ::= 'select' feature_list

conditional ::= 'if' then_part_list [else_part] 'end'
private then_part_list ::= then_part ('elseif' then_part)*
private then_part ::= boolean_expression 'then' compound
private else_part ::= 'else' compound

multi_branch ::= 'inspect' expression [when_part_list] [else_part] END_KEYWORD
private when_part_list ::= when_part+
when_part ::= 'when' choices 'then' compound
private choices ::= choice (',' choice)*
choice ::= constant_interval | type_interval | expression
constant_interval ::= constant '..' constant
type_interval ::= manifest_type '..' manifest_type

loop ::=
    (initialization [invariant] exit_condition loop_body [variant] 'end') |
    (iteration [exit_condition] loop_body 'end')
//loop ::= 'from' compound 'until' boolean_expression 'do' compound 'end'
iteration ::= 'across' across_expression 'as' IDENTIFIER
private across_expression ::= expression
initialization ::= 'from' compound
exit_condition ::= 'until' boolean_expression
//{
//    pin = 1
//    recoverWhile = keyword_or_identifier_recovery
//}
loop_body ::= ('loop' compound) | ('all' boolean_expression) | ('some' boolean_expression)

boolean_loop ::=
    iteration
    (('all' boolean_expression) | ('some' boolean_expression))
    'end'

debug ::= 'debug' ['(' key_list ')'] compound 'end'

attribute ::= 'attribute' compound

entity ::= variable | read_only
variable ::= local | variable_attribute | 'current'
private variable_attribute ::= feature_name
local ::= IDENTIFIER | 'result'
read_only ::= formal | constant_attribute | 'current'
formal ::= IDENTIFIER
constant_attribute ::= feature_name

creators ::= creation_clause+
private creation_clause ::= 'create' [clients] [header_comment] [creation_procedure_list] // see free_elks/kernel/type.e
private creation_procedure_list ::= creation_procedure (',' creation_procedure)*
private creation_procedure ::= feature_name

creation_instruction ::= 'create' [explicit_creation_type] creation_call
private explicit_creation_type ::= '{' type '}'
private creation_call ::= variable [explicit_creation_call]
private explicit_creation_call ::= '.' unqualified_call
private explicit_creation_call_recovery ::= !(keyword_recovery_ | IDENTIFIER)

creation_expression ::= 'create' explicit_creation_type [explicit_creation_call]

assignment ::= variable ':=' expression
//assignment ::= variable ':=' call
//{
//    pin = 2
//    recoverWhile = assignment_recovery
//}
//private assignment_recovery ::= !(keyword_recovery_ | IDENTIFIER)

assigner_call ::= expression ':=' expression

private call ::= object_call | non_object_call | non_object_parenthesized_call | casting_call
object_call ::= (target_atomic '.' call) | (target_atomic bracketed_actuals '.' call) | (target_atomic bracketed_actuals) | unqualified_call
unqualified_call ::= (feature_name [actuals]) | ('current' bracketed_actuals)
private target_atomic ::= casting_call | unqualified_call | local | read_only | non_object_call | parenthesized
private target ::= target_atomic ['.' call]
non_object_call ::= '{' type '}' '.' unqualified_call
non_object_parenthesized_call ::= '(' '{' type '}' ')' DOT unqualified_call

casting_call ::= '{' type '}' actuals

actuals ::= parenthesized_actuals | bracketed_actuals
private parenthesized_actuals ::= '(' actual_list ')'
private bracketed_actuals ::= '[' actual_list ']'
actual_list ::= expression (',' expression)*

object_test ::= attached_object_test | deprecated_object_test
private deprecated_object_test ::= '{' IDENTIFIER ':' type '}' expression // not really sure if it's deprecated
private attached_object_test ::= 'attached' attached_object_test_type? expression attached_object_test_redefinition?
private attached_object_test_type ::= '{' type '}'
private attached_object_test_redefinition ::= 'as' IDENTIFIER

rescue ::= 'rescue' compound
retry ::= 'retry'

agent ::= call_agent | inline_agent
call_agent ::= 'agent' call_agent_body
inline_agent ::= 'agent' [formal_arguments] [type_mark] [attribute_or_routine] [agent_actuals]

call_agent_body ::= agent_qualified | agent_unqualified
agent_qualified ::= agent_target '.' agent_unqualified
agent_unqualified ::= feature_name [agent_actuals]
agent_target ::= entity | parenthesized | manifest_type
agent_actuals ::= '(' agent_actual_list ')'
agent_actual_list ::= agent_actual (',' agent_actual)*
agent_actual ::= expression | placeholder
placeholder ::= [manifest_type] '?'

expression ::= basic_expression | special_expression
//expression ::= manifest_value
private basic_expression_term ::=
    array_literal |
    object_test |
    creation_expression |
    call |
    manifest_constant |
    parenthesized |
    local |
    read_only |
    boolean_loop |
    precursor |
    manifest_tuple |
    //equality |
    old |
    //operator_expression |
    bracket_expression
basic_expression ::= (basic_expression_term operator expression) | (basic_expression_term '=' expression) | (operator expression) | basic_expression_term { extends = expression }
special_expression ::=
    manifest_constant |
    manifest_tuple |
    agent |
    object_test |
    once_string |
    address
    { extends = expression }
parenthesized ::= '(' expression ')'
address ::= '$' variable
once_string ::= 'once' manifest_string
private boolean_expression ::= basic_expression | boolean_constant

bracket_expression ::= bracket_target '[' actuals ']'
bracket_target ::= target | once_string | manifest_constant | manifest_tuple

private constant ::= manifest_constant | constant_attribute

manifest_constant ::= (manifest_type manifest_value) | manifest_type | manifest_value
private manifest_type ::= '{' type '}'
private manifest_value ::=
    boolean_constant |
    character_constant |
    integer_constant |
    real_constant |
    manifest_string |
    'void'
private integer_constant ::= INTEGER_LITERAL
private character_constant ::= CHARACTER_LITERAL
private boolean_constant ::= TRUE_KEYWORD | FALSE_KEYWORD
private real_constant ::= REAL_LITERAL

manifest_string ::= STRING_LITERAL
array_literal ::= '<<' expression_list '>>'

ext ::= EXTERNAL_KEYWORD external_language [external_name]
external_language ::= unregistered_language | registered_language
unregistered_language ::= manifest_string
external_name ::= ALIAS_KEYWORD manifest_string

registered_language ::= C_EXTERNAL_KEYWORD | CPP_EXTERNAL_KEYWORD | DLL_EXTERNAL_KEYWORD

external_signature ::= SIGNATURE_KEYWORD [external_argument_types] [COLON external_type]
external_argument_types ::= LEFT_PAREN external_type_list RIGHT_PAREN
external_type_list ::= (external_type COMMA?)*
external_type ::= STRING_ONELINE

external_file_use ::= USE_KEYWORD external_file_list
external_file_list ::= external_file (COMMA external_file)*
external_file ::= external_user_file | external_system_file
external_user_file ::= DQUOTE STRING_ONELINE DQUOTE
external_system_file ::= LT STRING_ONELINE GT

/* TODO: externals */

private keyword_recovery_ ::=
    'if' |
    'then' |
    'else' |
    'create' |
    'from' |
    'until' |
    'end' |
    'ensure' |
    'elseif' |
    'across' |
    'when' |
    'do' |
    'require' |
    'inherit' |
    'feature' |
    'rescue' |
    'local' |
    'assign' |
    '(' | ')' | ';' | '=' | '{' | '}' | '[' | ']' | '.' |
    'result' |
    'precursor' |
    'variant' |
    'invariant' |
    'obsolete' |
    EXTERNAL_KEYWORD |
    'once' |
    'deferred' |
    'note' |
    'attached' |
    'check' |
    'and' |
    'or'

private keyword_recovery ::= !keyword_recovery_
private keyword_or_identifier_recovery ::= !(keyword_recovery_ | IDENTIFIER)
