/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.eiffel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import com.eiffel.psi.EiffelTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Eiffel.flex</tt>
 */
public class EiffelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\124\3\1\6\45\3\1\7\1\10\2\3\1\11\73\3\1\6\277\3");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\57\1\22\1\0\1\72\1\21\1\24\1\15\1\66\1\67"+
    "\1\24\1\4\1\63\1\23\1\17\1\24\1\5\1\7\6\11\2\14\1\61\1\62\1\24\1\25\1\60\1"+
    "\56\1\0\1\27\1\6\1\10\1\32\1\20\1\13\1\47\1\45\1\43\1\16\1\53\1\26\1\46\1"+
    "\35\1\36\1\34\1\50\1\33\1\31\1\40\1\41\1\44\1\54\1\12\1\51\1\37\1\70\1\24"+
    "\1\71\1\24\1\55\1\0\1\27\1\6\1\10\1\32\1\20\1\13\1\47\1\45\1\43\1\16\1\53"+
    "\1\26\1\46\1\35\1\36\1\34\1\50\1\33\1\31\1\40\1\41\1\44\1\54\1\12\1\51\1\37"+
    "\1\64\1\24\1\65\1\24\6\0\1\1\32\0\1\3\217\0\2\42\115\0\1\30\1\3\77\0\13\3"+
    "\35\0\2\1\5\0\1\3\57\0\1\3\112\0\1\52\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\3\5"+
    "\1\1\1\6\1\5\1\3\1\7\1\3\1\10\2\5"+
    "\1\1\10\5\1\1\3\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\3\3\0\1\25\1\0\12\5\1\0\2\25\3\5"+
    "\1\26\1\0\1\26\1\27\1\30\1\5\1\0\3\5"+
    "\2\31\3\5\3\0\5\5\1\32\5\5\1\33\4\5"+
    "\1\0\2\5\1\34\2\0\1\34\4\5\1\35\3\4"+
    "\2\0\6\5\1\36\3\5\1\37\3\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\40\1\0\1\26\2\5\1\0"+
    "\2\5\1\41\1\0\1\5\1\0\1\5\1\42\2\5"+
    "\3\0\6\5\1\0\7\5\1\43\1\0\1\5\1\44"+
    "\5\5\2\45\2\5\4\0\6\5\1\0\2\25\2\0"+
    "\7\5\1\0\2\5\1\46\3\25\3\5\2\47\1\0"+
    "\1\5\1\26\1\5\1\50\2\51\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\1\52\1\0\1\5\1\52\4\5"+
    "\2\0\7\5\1\53\1\54\1\0\1\5\1\55\1\56"+
    "\1\57\1\5\1\60\1\5\1\0\1\5\4\0\4\5"+
    "\1\0\1\5\1\61\4\0\2\62\3\5\2\63\2\5"+
    "\2\64\1\5\1\25\3\5\1\0\1\5\1\0\1\5"+
    "\1\26\1\65\1\0\1\5\2\66\1\0\2\5\1\0"+
    "\1\5\1\67\2\0\2\5\1\70\2\5\2\0\4\5"+
    "\1\71\1\0\2\5\1\0\1\5\1\72\1\5\2\73"+
    "\4\0\4\5\1\0\1\5\3\25\1\0\1\74\4\5"+
    "\1\75\1\25\1\5\1\76\1\5\2\77\2\100\2\101"+
    "\2\102\1\5\1\0\1\5\1\103\1\0\1\103\3\5"+
    "\1\104\1\105\1\104\1\105\1\0\1\5\1\106\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\4\0\4\5\1\0"+
    "\1\5\1\0\1\107\1\110\1\5\1\111\3\5\1\0"+
    "\1\5\1\0\3\5\1\0\1\5\2\112\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\113\1\0\1\114\1\115"+
    "\1\113\1\5\1\114\1\115\2\116\1\0\1\5\1\117"+
    "\1\120\1\121\1\0\1\5\1\0\1\5\1\122\1\5"+
    "\2\123\1\0\1\5\2\124\2\125\1\0\1\5\1\0"+
    "\1\5\2\126\2\127\1\5\2\130\2\131\1\0\1\132"+
    "\1\5\1\0\1\5\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u02ff\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u02ff\0\u02ff\0\u0725\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u0289\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u033a\0\u0c37\0\73\0\u0c72\0\u02ff\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u1098\0\u0127\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u0127"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\73"+
    "\0\u1397\0\u13d2\0\u0127\0\u140d\0\u1448\0\u1483\0\u14be\0\73"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u0127\0\u1782\0\u17bd\0\u17f8\0\73"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u0127\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u0127\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u0127\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u0127\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\73\0\u0127\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906"+
    "\0\u0127\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u0127\0\73\0\u0127"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\73\0\u2e18\0\u2e53\0\u0127\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u0127\0\u0127\0\u318d\0\u31c8\0\u0127\0\u0127"+
    "\0\u0127\0\u3203\0\u0127\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502"+
    "\0\u0127\0\u353d\0\u3578\0\u35b3\0\u35ee\0\73\0\u0127\0\u3629"+
    "\0\u3664\0\u369f\0\73\0\u0127\0\u36da\0\u3715\0\73\0\u0127"+
    "\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed"+
    "\0\u3928\0\u3963\0\u0127\0\u399e\0\u39d9\0\73\0\u0127\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u0127\0\u3b3b\0\u3b76\0\u3bb1"+
    "\0\u3bec\0\u0127\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u0127\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb"+
    "\0\u0127\0\u3f26\0\73\0\u0127\0\u3f61\0\u3f9c\0\u3fd7\0\u4012"+
    "\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u353d\0\u3578"+
    "\0\u35b3\0\u41af\0\u0127\0\u41ea\0\u4225\0\u4260\0\u429b\0\u0127"+
    "\0\u42d6\0\u4311\0\u0127\0\u434c\0\73\0\u0127\0\73\0\u0127"+
    "\0\73\0\u0127\0\73\0\u0127\0\u4387\0\u43c2\0\u43fd\0\73"+
    "\0\u4438\0\u0127\0\u4473\0\u44ae\0\u44e9\0\73\0\73\0\u0127"+
    "\0\u0127\0\u4524\0\u455f\0\u0127\0\u459a\0\u45d5\0\u4610\0\u464b"+
    "\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823"+
    "\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u0127\0\u0127"+
    "\0\u49c0\0\u0127\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22"+
    "\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\73\0\u0127\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\73\0\u4de6\0\73"+
    "\0\73\0\u0127\0\u4e21\0\u0127\0\u0127\0\73\0\u0127\0\u4e5c"+
    "\0\u4e97\0\u0127\0\u0127\0\u0127\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83"+
    "\0\u0127\0\u4fbe\0\73\0\u0127\0\u4ff9\0\u5034\0\73\0\u0127"+
    "\0\73\0\u0127\0\u506f\0\u50aa\0\u50e5\0\u5120\0\73\0\u0127"+
    "\0\73\0\u0127\0\u515b\0\73\0\u0127\0\73\0\u0127\0\u5196"+
    "\0\u0127\0\u51d1\0\u520c\0\u5247\0\73\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\7\1\13\1\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\16\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\6\1\33\1\34"+
    "\1\35\1\36\1\37\5\6\1\2\1\6\1\40\1\7"+
    "\1\41\1\42\1\16\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\74\0\3\3\73\0"+
    "\1\16\1\5\1\0\1\7\1\0\1\7\2\0\1\7"+
    "\2\0\1\55\1\0\1\16\1\0\3\16\27\0\1\7"+
    "\3\16\17\0\1\7\1\56\1\7\1\57\1\7\1\60"+
    "\1\0\1\7\2\0\1\61\35\0\1\7\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\1\7\2\0\1\61\35\0\1\7"+
    "\21\0\1\62\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\63\1\6\1\0\2\6\1\64\2\6\1\65\2\6"+
    "\1\66\1\0\2\6\1\67\4\6\1\0\2\6\1\70"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\5\6\1\71\3\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\72\5\0\1\6"+
    "\1\73\1\0\2\6\1\74\6\6\1\0\7\6\1\0"+
    "\3\6\15\0\1\75\2\0\70\75\4\0\1\16\1\76"+
    "\1\0\1\77\1\0\1\77\2\0\1\77\2\0\1\16"+
    "\1\0\1\16\1\0\3\16\27\0\1\77\3\16\17\0"+
    "\5\6\1\100\2\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\101\1\6\1\0\4\6\1\102\4\6\1\0\7\6"+
    "\1\0\3\6\21\0\1\16\12\0\1\16\1\0\1\16"+
    "\1\0\3\16\30\0\3\16\12\0\21\103\1\104\1\105"+
    "\50\103\4\0\1\16\1\5\1\0\1\7\1\0\1\7"+
    "\2\0\1\7\2\0\1\55\1\0\1\16\1\0\1\106"+
    "\2\16\27\0\1\7\2\16\1\107\17\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\5\6\1\110"+
    "\3\6\1\111\1\112\6\6\1\0\3\6\22\0\3\6"+
    "\1\113\4\6\1\0\1\6\1\0\1\6\5\0\1\114"+
    "\1\6\1\115\1\116\3\6\1\117\2\6\1\120\1\6"+
    "\1\0\4\6\1\121\2\6\1\0\3\6\35\0\1\122"+
    "\15\0\1\123\3\0\2\124\34\0\10\6\1\0\1\6"+
    "\1\0\1\125\5\0\2\6\1\0\5\6\1\126\3\6"+
    "\1\124\1\127\6\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\130\5\0\1\131\1\6\1\0\5\6"+
    "\1\132\3\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\133\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\134\6\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\5\6\1\135\3\6"+
    "\1\0\7\6\1\0\3\6\22\0\1\6\1\136\6\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\137\1\6\1\0"+
    "\2\6\1\140\1\6\1\141\4\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\2\6\1\142\5\6\1\143\1\0\2\6"+
    "\1\144\4\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\145\1\146\3\6\1\147"+
    "\4\6\1\0\7\6\1\0\3\6\30\0\1\150\21\0"+
    "\1\151\10\0\1\152\31\0\6\6\1\153\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\4\6\1\154"+
    "\4\6\1\0\3\6\1\155\3\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\6\1\156"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\2\6\1\157\4\6\1\0\3\6\42\0\1\160"+
    "\52\0\1\161\1\0\1\161\45\0\1\161\22\0\1\162"+
    "\1\0\1\162\1\0\1\162\43\0\1\162\22\0\5\163"+
    "\1\0\2\163\3\0\1\163\6\0\1\163\2\0\1\163"+
    "\22\0\1\163\22\0\1\76\1\0\1\77\1\0\1\77"+
    "\2\0\1\77\3\0\1\164\34\0\1\77\21\0\1\165"+
    "\73\0\10\6\1\0\1\6\1\0\1\6\5\0\1\6"+
    "\1\166\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\167\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\4\6\1\170"+
    "\4\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\2\6\1\171"+
    "\6\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\172\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\173\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\2\6\1\174\6\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\175\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\1\176"+
    "\1\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\5\6\1\177\3\6\1\0\7\6\1\0\3\6\32\0"+
    "\1\200\62\0\1\77\1\201\1\77\1\202\1\77\1\203"+
    "\1\0\1\77\3\0\1\164\34\0\1\77\22\0\1\77"+
    "\1\0\1\77\1\0\1\77\2\0\1\77\3\0\1\164"+
    "\34\0\1\77\22\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\3\6\1\204\3\6\1\205\1\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\206\1\207\10\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\210\1\211\1\212\7\6\1\0"+
    "\7\6\1\0\3\6\15\0\1\103\2\213\1\214\67\103"+
    "\2\106\1\0\70\106\5\0\3\6\1\215\4\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\5\6\1\216"+
    "\3\6\1\0\7\6\1\0\3\6\67\0\2\217\24\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\217\1\220\2\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\221\6\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\222\1\6\1\0"+
    "\11\6\1\223\1\224\6\6\1\0\3\6\45\0\2\225"+
    "\46\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\225\1\226\10\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\1\6\1\227\7\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\7\6\1\230\1\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\231\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\43\0\1\232\112\0"+
    "\1\233\73\0\1\234\30\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\1\235\1\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\22\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\11\6\1\0\3\6\1\236\3\6"+
    "\1\0\3\6\22\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\11\6\1\0\4\6\1\237\2\6"+
    "\1\0\3\6\22\0\1\6\1\240\4\6\1\241\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\242\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\243\1\244\1\245\2\6\1\246"+
    "\2\6\1\247\1\6\1\0\5\6\1\250\1\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\251\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\4\6\1\252\2\6\1\253\1\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\254\1\255\10\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\1\6\1\256\7\6\1\0\7\6\1\0\3\6"+
    "\22\0\3\6\1\257\4\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\260\1\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\10\6\1\261\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\3\6\1\262\5\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\263\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\35\0\1\264"+
    "\57\0\10\6\1\0\1\6\1\0\1\265\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\1\6"+
    "\1\266\5\6\1\267\1\6\1\0\7\6\1\0\3\6"+
    "\45\0\2\270\12\0\1\271\1\272\61\0\1\273\43\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\270"+
    "\1\274\10\6\1\0\1\6\1\275\1\276\4\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\3\6\1\277\5\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\2\6\1\300\6\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\301\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\1\161\1\0\1\161\7\0\1\61\35\0\1\161\22\0"+
    "\1\162\1\0\1\162\1\0\1\162\5\0\1\61\35\0"+
    "\1\162\22\0\5\163\1\0\2\163\2\0\1\61\1\163"+
    "\6\0\1\163\2\0\1\163\22\0\1\163\21\0\1\302"+
    "\1\303\1\0\1\304\1\0\1\304\2\0\1\304\6\0"+
    "\1\302\31\0\1\304\72\0\1\305\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\306\1\307\10\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\6\1\310\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\1\6\1\311"+
    "\5\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\312\6\6\1\0"+
    "\7\6\1\0\3\6\22\0\3\6\1\313\4\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\5\6\1\314\2\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\7\6\1\315\1\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\316\1\317\10\6\1\0\7\6"+
    "\1\0\3\6\22\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\6\6\1\320\2\6\1\0\3\6"+
    "\1\321\3\6\1\0\3\6\22\0\1\322\1\0\1\322"+
    "\45\0\1\322\22\0\1\323\1\0\1\323\1\0\1\323"+
    "\43\0\1\323\22\0\5\324\1\0\2\324\3\0\1\324"+
    "\6\0\1\324\2\0\1\324\22\0\1\324\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\6\1\325\1\0"+
    "\5\6\1\326\3\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\327\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\35\0\1\330\57\0"+
    "\10\6\1\0\1\6\1\0\1\331\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\56\0\1\332\36\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\10\6\1\333\1\0\7\6\1\0\3\6\16\0\3\213"+
    "\15\0\1\103\51\0\1\103\2\334\1\214\15\103\1\104"+
    "\1\105\50\103\5\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\6\1\335\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\3\6\1\336\5\6\1\0\7\6\1\0"+
    "\3\6\35\0\1\337\57\0\10\6\1\0\1\6\1\0"+
    "\1\340\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\5\6\1\341\3\6\1\0\7\6\1\0"+
    "\3\6\44\0\1\342\50\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\1\6\1\343\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\57\0\2\344\34\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\344\1\345"+
    "\6\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\1\6\1\346\1\0\2\6\1\347\6\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\350\4\6"+
    "\1\0\7\6\1\0\3\6\35\0\1\351\72\0\1\352"+
    "\107\0\1\353\42\0\10\6\1\0\1\6\1\0\1\354"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\355\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\4\6"+
    "\1\356\4\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\10\6"+
    "\1\357\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\360\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\2\6\1\361\25\0\1\362\30\0\1\363\36\0\3\6"+
    "\1\364\4\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\10\6\1\365\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\366\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\6\1\367\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\370\6\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\10\6\1\371\1\0"+
    "\7\6\1\0\3\6\22\0\3\6\1\372\4\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\373\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\374\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\53\0"+
    "\1\375\41\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\5\6\1\376\3\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\377\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\6\6\1\u0100\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\u0101\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\u0102\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\4\6\1\u0103\4\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\u0104\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\11\6\1\u0105\1\u0106\6\6\1\0\3\6"+
    "\51\0\1\u0107\65\0\1\u0108\63\0\1\u0109\100\0\1\u010a"+
    "\51\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\3\6\1\u010b\5\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\1\6"+
    "\1\u010c\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\u010d\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\u010e\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\u010f\1\u0110"+
    "\6\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\4\6\1\u0111\4\6\1\0"+
    "\7\6\1\0\3\6\22\0\1\303\1\0\1\304\1\0"+
    "\1\304\2\0\1\304\40\0\1\304\22\0\1\304\1\u0112"+
    "\1\304\1\u0113\1\304\1\u0114\1\0\1\304\40\0\1\304"+
    "\22\0\1\304\1\0\1\304\1\0\1\304\2\0\1\304"+
    "\40\0\1\304\35\0\1\u0115\102\0\2\u0116\46\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\u0116\1\u0117"+
    "\10\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u0118"+
    "\1\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\u0119\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\u011a\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\u011b\1\u011c\2\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\7\6\1\u011d\1\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\10\6\1\u011e\1\0\7\6\1\0\3\6\35\0"+
    "\1\u011f\57\0\10\6\1\0\1\6\1\0\1\u0120\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\u0121\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\1\322\1\0"+
    "\1\322\10\0\1\164\34\0\1\322\22\0\1\323\1\0"+
    "\1\323\1\0\1\323\6\0\1\164\34\0\1\323\22\0"+
    "\5\324\1\0\2\324\3\0\1\u0122\6\0\1\324\2\0"+
    "\1\324\22\0\1\324\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\4\6\1\u0123\4\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\u0124\6\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\u0125\6\6\1\0"+
    "\7\6\1\0\3\6\57\0\2\u0126\34\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\u0126"+
    "\1\u0127\6\6\1\0\3\6\50\0\1\u0128\44\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\u0129\6\6\1\0\7\6\1\0\3\6\15\0\1\103"+
    "\3\334\15\103\1\u012a\1\105\50\103\5\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\u012b\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\u012c\1\u012d\10\6\1\0"+
    "\7\6\1\0\3\6\45\0\2\u012e\46\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\u012e\1\u012f\10\6"+
    "\1\0\7\6\1\0\3\6\64\0\1\u0130\30\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\4\6\1\u0131\2\6\1\0\3\6\22\0\3\6"+
    "\1\u0132\4\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\u0133\1\u0134\6\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u0135"+
    "\1\6\1\0\7\6\1\0\3\6\25\0\1\u0136\111\0"+
    "\1\u0137\50\0\3\6\1\u0138\4\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\u0139\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\4\6\1\u013a\2\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\2\6\1\u013b\6\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\u013c\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\56\0\1\u013d"+
    "\57\0\1\u013e\51\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\10\6\1\u013f\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\u0140\1\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\22\0\6\6\1\u0141\1\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\3\6\1\u0142\3\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\6\6\1\u0143\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\u0144\1\u0145\6\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\10\6"+
    "\1\u0146\1\0\7\6\1\0\3\6\43\0\1\u0147\51\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\u0148\1\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\u0149\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\6\6\1\u014a\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\43\0\1\u014b\51\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\u014c\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\35\0\1\u014d\105\0"+
    "\1\u014e\72\0\1\u014f\101\0\2\u0150\34\0\10\6\1\0"+
    "\1\6\1\0\1\u0151\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\u0152\6\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\u0153\6\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\u0150\1\u0154\6\6"+
    "\1\0\3\6\44\0\1\u0155\50\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\6\1\u0156\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\1\u0157\1\0\1\u0157\45\0"+
    "\1\u0157\22\0\1\u0158\1\0\1\u0158\1\0\1\u0158\43\0"+
    "\1\u0158\22\0\5\u0159\1\0\2\u0159\3\0\1\u0159\6\0"+
    "\1\u0159\2\0\1\u0159\22\0\1\u0159\27\0\1\u015a\65\0"+
    "\10\6\1\0\1\6\1\0\1\u015b\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\2\6\1\u015c"+
    "\6\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\4\6\1\u015d"+
    "\4\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\u015e\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\u015f\6\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\4\6\1\u0160\4\6\1\0"+
    "\7\6\1\0\3\6\21\0\1\302\1\u0161\4\324\1\0"+
    "\2\324\3\0\1\u0122\2\0\1\302\3\0\1\324\2\0"+
    "\1\324\22\0\1\324\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\1\6\1\u0162\7\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\7\6\1\u0163\1\6\1\0"+
    "\7\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\4\6\1\u0164\4\6\1\0"+
    "\7\6\1\0\3\6\30\0\1\u0165\64\0\6\6\1\u0166"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\35\0\1\u0167\57\0"+
    "\10\6\1\0\1\6\1\0\1\u0168\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\15\0\1\103\2\334"+
    "\1\214\15\103\1\u012a\51\103\30\0\2\u0169\46\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\u0169\1\u016a"+
    "\10\6\1\0\7\6\1\0\3\6\52\0\1\u016b\42\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\4\6\1\u016c\4\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\2\6\1\u016d\4\6\1\0\3\6\23\0"+
    "\1\u016e\71\0\1\6\1\u016f\6\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\55\0\1\u0170\72\0\1\u0171\37\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u0172"+
    "\1\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u0173"+
    "\1\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\2\6\1\u0174"+
    "\6\6\1\0\7\6\1\0\3\6\22\0\5\6\1\u0175"+
    "\2\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\35\0\1\u0176\112\0"+
    "\1\u0177\37\0\10\6\1\0\1\6\1\0\1\u0178\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\7\6\1\u0179\1\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\u017a\1\u017b\6\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\u017c\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\50\0\1\u017d\44\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\u017e\6\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\u017f\6\6\1\0\7\6\1\0\3\6\35\0\1\u0180"+
    "\57\0\10\6\1\0\1\6\1\0\1\u0181\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\u0182\1\u0183\6\6\1\0\3\6\25\0\1\u0184\124\0"+
    "\2\u0185\71\0\2\u0186\47\0\1\u0187\57\0\3\6\1\u0188"+
    "\4\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\u0185"+
    "\1\u0189\6\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\u0186\1\u018a"+
    "\6\6\1\0\3\6\22\0\10\6\1\0\1\6\1\0"+
    "\1\u018b\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\52\0\1\u018c\42\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\4\6\1\u018d\4\6\1\0"+
    "\7\6\1\0\3\6\55\0\1\u018e\37\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u018f"+
    "\1\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u0190"+
    "\1\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\2\6\1\u0191"+
    "\6\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\u0192\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\22\0\5\324\1\u0114\2\324\3\0"+
    "\1\u0122\6\0\1\324\2\0\1\324\22\0\1\324\22\0"+
    "\10\6\1\0\1\6\1\0\1\u0193\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\22\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\6\1\u0194\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\u0195\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\56\0\1\u0196\36\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\10\6\1\u0197\1\0"+
    "\7\6\1\0\3\6\56\0\1\u0198\36\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\10\6\1\u0199"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\u019a\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\22\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\7\6\1\u019b\1\6\1\0\7\6"+
    "\1\0\3\6\52\0\1\u019c\42\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u019d\4\6"+
    "\1\0\7\6\1\0\3\6\35\0\1\u019e\57\0\10\6"+
    "\1\0\1\6\1\0\1\u019f\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\u01a0\1\u01a1\10\6\1\0"+
    "\7\6\1\0\3\6\55\0\1\u01a2\37\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\7\6\1\u01a3"+
    "\1\6\1\0\7\6\1\0\3\6\52\0\1\u01a4\42\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\4\6\1\u01a5\4\6\1\0\7\6\1\0\3\6\55\0"+
    "\1\u01a6\61\0\1\u01a7\103\0\1\u01a8\62\0\2\u01a9\46\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\7\6\1\u01aa\1\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\6\1\u01ab"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u01ac\1\6\1\0\7\6\1\0\3\6\22\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\u01a9\1\u01ad"+
    "\10\6\1\0\7\6\1\0\3\6\55\0\1\u01ae\37\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\7\6\1\u01af\1\6\1\0\7\6\1\0\3\6\35\0"+
    "\1\u01b0\57\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\4\6\1\u01b1\4\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\1\6\1\u01b2\7\6\1\0\7\6\1\0"+
    "\3\6\22\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\u01b3\1\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\22\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\1\6\1\u01b4\7\6\1\0\7\6\1\0\3\6"+
    "\55\0\1\u01b5\37\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\7\6\1\u01b6\1\6\1\0\7\6"+
    "\1\0\3\6\50\0\1\u01b7\44\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\u01b8\6\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\1\6\1\u01b9\7\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\u01ba\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\35\0\1\u01bb\57\0\10\6\1\0\1\6"+
    "\1\0\1\u01bc\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\53\0\1\u01bd\41\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\5\6\1\u01be\3\6"+
    "\1\0\7\6\1\0\3\6\35\0\1\u01bf\57\0\10\6"+
    "\1\0\1\6\1\0\1\u01c0\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\35\0\1\u01c1\57\0\10\6"+
    "\1\0\1\6\1\0\1\u01c2\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\52\0\1\u01c3\42\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\4\6"+
    "\1\u01c4\4\6\1\0\7\6\1\0\3\6\50\0\1\u01c5"+
    "\44\0\10\6\1\0\1\6\1\0\1\6\5\0\1\6"+
    "\1\u01c6\1\0\11\6\1\0\7\6\1\0\3\6\35\0"+
    "\1\u01c7\57\0\10\6\1\0\1\6\1\0\1\u01c8\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\35\0"+
    "\1\u01c9\57\0\10\6\1\0\1\6\1\0\1\u01ca\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\22\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\2\6\1\u01cb\6\6\1\0\7\6\1\0\3\6\50\0"+
    "\1\u01cc\44\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\2\6\1\u01cd\6\6\1\0\7\6\1\0"+
    "\3\6\55\0\1\u01ce\37\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\7\6\1\u01cf\1\6\1\0"+
    "\7\6\1\0\3\6\52\0\1\u01d0\42\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\u01d1\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\22\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u01d2\4\6"+
    "\1\0\7\6\1\0\3\6\44\0\1\u01d3\50\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\6\1\u01d4\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\43\0\1\u01d5\51\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\u01d6\1\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21122];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\41\1\11\11\1\1\3\0\1\1\1\0"+
    "\12\1\1\0\6\1\1\0\1\11\3\1\1\0\10\1"+
    "\3\0\20\1\1\0\2\1\1\11\2\0\5\1\1\11"+
    "\3\1\2\0\12\1\1\11\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\4\1\3\0\6\1\1\0\10\1\1\0\7\1"+
    "\1\11\3\1\4\0\6\1\1\0\2\1\2\0\7\1"+
    "\1\0\13\1\1\0\4\1\1\11\2\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\11\1\0\6\1\2\0\11\1"+
    "\1\0\7\1\1\0\1\1\4\0\4\1\1\0\2\1"+
    "\4\0\1\11\4\1\1\11\3\1\1\11\6\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\2\0\5\1\2\0\5\1\1\0"+
    "\2\1\1\0\3\1\1\11\1\1\4\0\4\1\1\0"+
    "\4\1\1\0\12\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\1\0\4\1"+
    "\2\11\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\4\0\4\1\1\0\1\1\1\0\7\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\4\1\1\11\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EiffelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EiffelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 93: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 94: break;
          case 3: 
            { return EiffelTypes.FREE_OPERATOR;
            }
          case 95: break;
          case 4: 
            { return EiffelTypes.INTEGER_LITERAL;
            }
          case 96: break;
          case 5: 
            { return EiffelTypes.IDENTIFIER;
            }
          case 97: break;
          case 6: 
            { return EiffelTypes.DOT;
            }
          case 98: break;
          case 7: 
            { return EiffelTypes.DQUOTE;
            }
          case 99: break;
          case 8: 
            { return EiffelTypes.EQ;
            }
          case 100: break;
          case 9: 
            { return EiffelTypes.QUESTION;
            }
          case 101: break;
          case 10: 
            { return EiffelTypes.EXCLAMATION;
            }
          case 102: break;
          case 11: 
            { return EiffelTypes.COLON;
            }
          case 103: break;
          case 12: 
            { return EiffelTypes.SEMICOLON;
            }
          case 104: break;
          case 13: 
            { return EiffelTypes.COMMA;
            }
          case 105: break;
          case 14: 
            { return EiffelTypes.LEFT_CURLY_BRACKET;
            }
          case 106: break;
          case 15: 
            { return EiffelTypes.RIGHT_CURLY_BRACKET;
            }
          case 107: break;
          case 16: 
            { return EiffelTypes.LEFT_PAREN;
            }
          case 108: break;
          case 17: 
            { return EiffelTypes.RIGHT_PAREN;
            }
          case 109: break;
          case 18: 
            { return EiffelTypes.LEFT_SQUARE_BRACKET;
            }
          case 110: break;
          case 19: 
            { return EiffelTypes.RIGHT_SQUARE_BRACKET;
            }
          case 111: break;
          case 20: 
            { return EiffelTypes.DOLLAR;
            }
          case 112: break;
          case 21: 
            { return EiffelTypes.REAL_LITERAL;
            }
          case 113: break;
          case 22: 
            { return EiffelTypes.STRING_LITERAL;
            }
          case 114: break;
          case 23: 
            { return EiffelTypes.COMMENT;
            }
          case 115: break;
          case 24: 
            { return EiffelTypes.ARROW;
            }
          case 116: break;
          case 25: 
            { return EiffelTypes.AS_KEYWORD;
            }
          case 117: break;
          case 26: 
            { return EiffelTypes.DO_KEYWORD;
            }
          case 118: break;
          case 27: 
            { return EiffelTypes.OR_KEYWORD;
            }
          case 119: break;
          case 28: 
            { return EiffelTypes.IF_KEYWORD;
            }
          case 120: break;
          case 29: 
            { return EiffelTypes.ASSIGN;
            }
          case 121: break;
          case 30: 
            { return EiffelTypes.XOR_KEYWORD;
            }
          case 122: break;
          case 31: 
            { return EiffelTypes.CHARACTER_LITERAL;
            }
          case 123: break;
          case 32: 
            { return EiffelTypes.END_KEYWORD;
            }
          case 124: break;
          case 33: 
            { return EiffelTypes.ALL_KEYWORD;
            }
          case 125: break;
          case 34: 
            { return EiffelTypes.AND_KEYWORD;
            }
          case 126: break;
          case 35: 
            { return EiffelTypes.NOT_KEYWORD;
            }
          case 127: break;
          case 36: 
            { return EiffelTypes.OLD_KEYWORD;
            }
          case 128: break;
          case 37: 
            { return EiffelTypes.USE_KEYWORD;
            }
          case 129: break;
          case 38: 
            { return EiffelTypes.FROM_KEYWORD;
            }
          case 130: break;
          case 39: 
            { return EiffelTypes.ELSE_KEYWORD;
            }
          case 131: break;
          case 40: 
            { return EiffelTypes.LOOP_KEYWORD;
            }
          case 132: break;
          case 41: 
            { return EiffelTypes.LIKE_KEYWORD;
            }
          case 133: break;
          case 42: 
            { return EiffelTypes.SOME_KEYWORD;
            }
          case 134: break;
          case 43: 
            { return EiffelTypes.NONE_KEYWORD;
            }
          case 135: break;
          case 44: 
            { return EiffelTypes.NOTE_KEYWORD;
            }
          case 136: break;
          case 45: 
            { return EiffelTypes.ONCE_KEYWORD;
            }
          case 137: break;
          case 46: 
            { return EiffelTypes.ONLY_KEYWORD;
            }
          case 138: break;
          case 47: 
            { return EiffelTypes.TRUE_KEYWORD;
            }
          case 139: break;
          case 48: 
            { return EiffelTypes.THEN_KEYWORD;
            }
          case 140: break;
          case 49: 
            { return EiffelTypes.WHEN_KEYWORD;
            }
          case 141: break;
          case 50: 
            { return EiffelTypes.CLASS_KEYWORD;
            }
          case 142: break;
          case 51: 
            { return EiffelTypes.CHECK_KEYWORD;
            }
          case 143: break;
          case 52: 
            { return EiffelTypes.FALSE_KEYWORD;
            }
          case 144: break;
          case 53: 
            { return EiffelTypes.LOCAL_KEYWORD;
            }
          case 145: break;
          case 54: 
            { return EiffelTypes.ALIAS_KEYWORD;
            }
          case 146: break;
          case 55: 
            { return EiffelTypes.AGENT_KEYWORD;
            }
          case 147: break;
          case 56: 
            { return EiffelTypes.DEBUG_KEYWORD;
            }
          case 148: break;
          case 57: 
            { return EiffelTypes.RETRY_KEYWORD;
            }
          case 149: break;
          case 58: 
            { return EiffelTypes.TUPLE_KEYWORD;
            }
          case 150: break;
          case 59: 
            { return EiffelTypes.UNTIL_KEYWORD;
            }
          case 151: break;
          case 60: 
            { return EiffelTypes.CREATE_KEYWORD;
            }
          case 152: break;
          case 61: 
            { return EiffelTypes.FROZEN_KEYWORD;
            }
          case 153: break;
          case 62: 
            { return EiffelTypes.EXPORT_KEYWORD;
            }
          case 154: break;
          case 63: 
            { return EiffelTypes.ELSEIF_KEYWORD;
            }
          case 155: break;
          case 64: 
            { return EiffelTypes.ENSURE_KEYWORD;
            }
          case 156: break;
          case 65: 
            { return EiffelTypes.ACROSS_KEYWORD;
            }
          case 157: break;
          case 66: 
            { return EiffelTypes.ASSIGN_KEYWORD;
            }
          case 158: break;
          case 67: 
            { return EiffelTypes.SELECT_KEYWORD;
            }
          case 159: break;
          case 68: 
            { return EiffelTypes.RESCUE_KEYWORD;
            }
          case 160: break;
          case 69: 
            { return EiffelTypes.RESULT_KEYWORD;
            }
          case 161: break;
          case 70: 
            { return EiffelTypes.RENAME_KEYWORD;
            }
          case 162: break;
          case 71: 
            { return EiffelTypes.CONVERT_KEYWORD;
            }
          case 163: break;
          case 72: 
            { return EiffelTypes.CURRENT_KEYWORD;
            }
          case 164: break;
          case 73: 
            { return EiffelTypes.FEATURE_KEYWORD;
            }
          case 165: break;
          case 74: 
            { return EiffelTypes.REQUIRE_KEYWORD;
            }
          case 166: break;
          case 75: 
            { return EiffelTypes.INSPECT_KEYWORD;
            }
          case 167: break;
          case 76: 
            { return EiffelTypes.INHERIT_KEYWORD;
            }
          case 168: break;
          case 77: 
            { return EiffelTypes.IMPLIES_KEYWORD;
            }
          case 169: break;
          case 78: 
            { return EiffelTypes.VARIANT_KEYWORD;
            }
          case 170: break;
          case 79: 
            { return EiffelTypes.EXPANDED_KEYWORD;
            }
          case 171: break;
          case 80: 
            { return EiffelTypes.EXTERNAL_KEYWORD;
            }
          case 172: break;
          case 81: 
            { return EiffelTypes.ATTACHED_KEYWORD;
            }
          case 173: break;
          case 82: 
            { return EiffelTypes.DEFERRED_KEYWORD;
            }
          case 174: break;
          case 83: 
            { return EiffelTypes.REDEFINE_KEYWORD;
            }
          case 175: break;
          case 84: 
            { return EiffelTypes.OBSOLETE_KEYWORD;
            }
          case 176: break;
          case 85: 
            { return EiffelTypes.UNDEFINE_KEYWORD;
            }
          case 177: break;
          case 86: 
            { return EiffelTypes.ATTRIBUTE_KEYWORD;
            }
          case 178: break;
          case 87: 
            { return EiffelTypes.SIGNATURE_KEYWORD;
            }
          case 179: break;
          case 88: 
            { return EiffelTypes.PRECURSOR_KEYWORD;
            }
          case 180: break;
          case 89: 
            { return EiffelTypes.INVARIANT_KEYWORD;
            }
          case 181: break;
          case 90: 
            { return EiffelTypes.C_EXTERNAL_KEYWORD;
            }
          case 182: break;
          case 91: 
            { return EiffelTypes.CPP_EXTERNAL_KEYWORD;
            }
          case 183: break;
          case 92: 
            { return EiffelTypes.DLL_EXTERNAL_KEYWORD;
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
