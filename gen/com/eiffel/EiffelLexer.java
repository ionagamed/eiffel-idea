/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.eiffel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import com.eiffel.psi.EiffelTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Eiffel.flex</tt>
 */
public class EiffelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_STRING = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\124\3\1\6\45\3\1\7\1\10\2\3\1\11\73\3\1\6\277\3");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\15\1\2\22\0\1\3\1\63\1\24\1\0\1\75\1\16\1\30\1\20\1\73\1\74"+
    "\1\30\1\4\1\70\1\27\1\22\1\17\1\5\1\7\6\11\2\14\1\66\1\67\1\65\1\31\1\64\1"+
    "\62\1\0\1\33\1\6\1\10\1\36\1\23\1\13\1\53\1\51\1\47\1\21\1\57\1\32\1\52\1"+
    "\41\1\42\1\40\1\54\1\37\1\35\1\44\1\45\1\50\1\60\1\12\1\55\1\43\1\25\1\30"+
    "\1\26\1\30\1\61\1\0\1\33\1\6\1\10\1\36\1\23\1\13\1\53\1\51\1\47\1\21\1\57"+
    "\1\32\1\52\1\41\1\42\1\40\1\54\1\37\1\35\1\44\1\45\1\50\1\60\1\12\1\55\1\43"+
    "\1\71\1\30\1\72\1\30\6\0\1\15\32\0\1\3\217\0\2\46\115\0\1\34\1\3\77\0\13\3"+
    "\35\0\2\15\5\0\1\3\57\0\1\3\112\0\1\56\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\4\3\5"+
    "\1\3\1\1\1\6\1\5\1\7\1\10\1\11\1\3"+
    "\1\12\2\5\1\1\10\5\1\1\3\5\1\13\1\14"+
    "\2\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\3\3\0\1\25\1\0\12\5\2\0\2\25"+
    "\1\26\3\5\1\27\1\0\2\27\1\30\1\31\1\5"+
    "\1\0\3\5\2\32\3\5\3\0\5\5\1\33\5\5"+
    "\1\34\4\5\1\0\2\5\1\35\2\0\1\35\5\5"+
    "\1\36\1\37\1\40\3\4\2\0\6\5\1\41\3\5"+
    "\1\42\1\0\1\42\3\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\43\1\0\1\27\1\0\1\27\2\5\1\0"+
    "\2\5\1\44\1\0\1\5\1\0\1\5\1\45\2\5"+
    "\4\0\10\5\1\0\7\5\1\46\1\0\1\5\1\47"+
    "\5\5\2\50\2\5\4\0\5\5\1\0\2\5\1\0"+
    "\2\25\2\0\7\5\1\0\2\5\1\51\2\0\3\25"+
    "\3\5\2\52\1\0\1\5\2\27\1\0\2\27\1\5"+
    "\1\53\2\54\1\5\1\0\1\5\1\0\4\5\2\0"+
    "\1\55\1\0\2\5\1\55\5\5\2\0\7\5\1\56"+
    "\1\57\1\0\1\5\1\60\1\61\1\62\1\5\1\63"+
    "\1\5\1\0\1\5\4\0\4\5\1\0\1\5\2\64"+
    "\1\65\4\0\2\66\3\5\2\67\2\5\2\70\1\5"+
    "\3\0\1\25\3\5\1\0\1\5\1\0\1\5\2\27"+
    "\2\0\1\27\4\0\1\71\1\0\1\5\2\72\1\0"+
    "\2\5\1\0\1\5\1\73\3\0\3\5\1\74\3\5"+
    "\2\0\4\5\1\75\1\0\2\5\1\0\1\5\1\76"+
    "\1\5\2\77\4\0\4\5\1\0\1\5\3\25\1\0"+
    "\1\100\4\5\1\101\3\0\1\25\1\5\1\102\1\5"+
    "\2\103\2\104\1\27\2\0\2\27\2\105\2\106\1\5"+
    "\1\0\1\5\1\107\2\0\1\107\5\5\1\110\1\111"+
    "\1\110\1\111\1\0\1\5\1\112\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\4\0\4\5\1\0\1\5\1\0"+
    "\1\113\1\114\1\5\1\115\2\5\1\27\1\5\1\0"+
    "\1\5\2\0\5\5\1\0\1\5\2\116\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\117\1\0\1\120\1\121"+
    "\1\117\1\5\1\120\1\121\2\122\1\0\1\5\1\123"+
    "\1\124\1\125\1\0\1\5\1\126\1\0\1\126\1\5"+
    "\1\127\2\5\2\130\1\0\1\5\2\131\2\132\1\0"+
    "\1\5\1\0\1\5\2\133\2\134\2\5\2\135\2\136"+
    "\1\0\1\137\1\140\1\5\1\0\1\5\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[533];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\174\0\174\0\u03e0\0\u02aa\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u02aa\0\u02aa\0\u07c0\0\u07fe\0\u083c"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\174\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u02aa\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\174\0\u0e88\0\u0ec6\0\u02aa\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u0174"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u0174\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\174\0\u1648\0\u1686"+
    "\0\u0174\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u02aa\0\u02aa"+
    "\0\174\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u0174\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\174\0\u1b5e\0\u0c5a\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u0174\0\u1dca\0\u1e08\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u0174\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u0174\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u0174\0\u26fe\0\u273c"+
    "\0\u277a\0\u27b8\0\u27f6\0\174\0\u0174\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\u0174\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222"+
    "\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u0174\0\174\0\u0174"+
    "\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\174\0\u3602\0\u3640\0\u367e\0\u0174\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u0174\0\u0174\0\u3a20"+
    "\0\u3a5e\0\u0174\0\u0174\0\u0174\0\u3a9c\0\u0174\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\174\0\u0174\0\u0174\0\u3e00\0\u3e3e"+
    "\0\u3e7c\0\u3eba\0\174\0\u0174\0\u3ef8\0\u3f36\0\u3f74\0\174"+
    "\0\u0174\0\u3fb2\0\u3ff0\0\174\0\u0174\0\u402e\0\u406c\0\u40aa"+
    "\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u32dc"+
    "\0\u448a\0\u44c8\0\u0174\0\u4506\0\u4544\0\174\0\u0174\0\u4582"+
    "\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u0174\0\u46b8\0\u46f6\0\u4734"+
    "\0\u4772\0\u47b0\0\u47ee\0\u0174\0\u482c\0\u486a\0\u48a8\0\u48e6"+
    "\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u0174\0\u4a5a\0\u4a98"+
    "\0\u4ad6\0\u4b14\0\u4b52\0\u0174\0\u4b90\0\174\0\u0174\0\u4bce"+
    "\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe"+
    "\0\u4dfc\0\u3e00\0\u3e3e\0\u3e7c\0\u4e3a\0\u0174\0\u4e78\0\u4eb6"+
    "\0\u4ef4\0\u4f32\0\u0174\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068"+
    "\0\u0174\0\u50a6\0\174\0\u0174\0\174\0\u0174\0\u50e4\0\u5122"+
    "\0\u5160\0\u519e\0\u51dc\0\174\0\u0174\0\174\0\u0174\0\u521a"+
    "\0\u5258\0\u5296\0\174\0\u52d4\0\u5312\0\u0174\0\u5350\0\u538e"+
    "\0\u53cc\0\u540a\0\u5448\0\174\0\174\0\u0174\0\u0174\0\u5486"+
    "\0\u54c4\0\u0174\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa\0\u5638"+
    "\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea\0\u5828"+
    "\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u0174\0\u0174\0\u595e\0\u0174"+
    "\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e"+
    "\0\u5b8c\0\u5bca\0\u5c08\0\u5c46\0\u5c84\0\u5cc2\0\u5d00\0\174"+
    "\0\u0174\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\u5e36\0\u5e74\0\174"+
    "\0\u5eb2\0\174\0\174\0\u0174\0\u5ef0\0\u0174\0\u0174\0\174"+
    "\0\u0174\0\u5f2e\0\u5f6c\0\u0174\0\u0174\0\u0174\0\u5faa\0\u5fe8"+
    "\0\174\0\u6026\0\u0174\0\u6064\0\u0174\0\u60a2\0\u60e0\0\174"+
    "\0\u0174\0\u611e\0\u615c\0\174\0\u0174\0\174\0\u0174\0\u619a"+
    "\0\u61d8\0\u6216\0\u6254\0\174\0\u0174\0\174\0\u0174\0\u6292"+
    "\0\u62d0\0\174\0\u0174\0\174\0\u0174\0\u630e\0\u0174\0\u0174"+
    "\0\u634c\0\u638a\0\u63c8\0\174\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[533];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\10"+
    "\1\12\1\13\1\10\1\4\2\14\1\15\1\7\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\14\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\7\1\36\1\37\1\40\1\41\1\42\5\7\1\3"+
    "\1\7\1\43\1\10\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\76\3"+
    "\77\0\3\4\11\0\1\4\64\0\1\14\1\6\1\0"+
    "\1\10\1\0\1\10\2\0\1\10\1\0\2\14\2\0"+
    "\1\60\4\0\3\14\27\0\1\10\4\14\15\0\1\10"+
    "\1\61\1\10\1\62\1\10\1\63\1\0\1\10\5\0"+
    "\1\64\36\0\1\10\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\1\10\1\0\1\10\1\0\1\10\2\0"+
    "\1\10\5\0\1\64\36\0\1\10\20\0\1\65\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\1\66\1\7\1\0"+
    "\2\7\1\67\2\7\1\70\2\7\1\71\1\0\2\7"+
    "\1\72\4\7\1\0\2\7\1\73\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\5\7\1\74"+
    "\3\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\75\6\0\1\7\1\76\1\0\2\7"+
    "\1\77\6\7\1\0\7\7\1\0\3\7\20\0\1\14"+
    "\11\0\2\14\2\0\1\14\4\0\3\14\30\0\4\14"+
    "\10\0\1\100\2\0\12\100\1\0\1\101\57\100\4\0"+
    "\1\14\1\102\1\0\1\103\1\0\1\103\2\0\1\103"+
    "\1\0\2\14\2\0\1\104\4\0\3\14\27\0\1\103"+
    "\4\14\15\0\5\7\1\105\2\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\106\1\7\1\0\4\7\1\107\4\7"+
    "\1\0\7\7\1\0\3\7\14\0\16\110\1\111\5\110"+
    "\1\112\1\113\50\110\4\0\1\14\1\6\1\0\1\10"+
    "\1\0\1\10\2\0\1\10\1\0\2\14\2\0\1\60"+
    "\4\0\1\114\2\14\27\0\1\10\2\14\1\115\1\14"+
    "\15\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\5\7\1\116\3\7\1\117\1\120\6\7\1\0"+
    "\3\7\21\0\3\7\1\121\4\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\122\1\7\1\123\1\124\3\7\1\125"+
    "\2\7\1\126\1\7\1\0\4\7\1\127\2\7\1\0"+
    "\3\7\37\0\1\130\16\0\1\131\3\0\2\132\33\0"+
    "\10\7\4\0\1\7\1\0\1\133\6\0\2\7\1\0"+
    "\5\7\1\134\3\7\1\132\1\135\6\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\136\6\0\1\137"+
    "\1\7\1\0\5\7\1\140\3\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\141\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\2\7\1\142\6\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\5\7\1\143\3\7\1\0\7\7\1\0\3\7\21\0"+
    "\1\7\1\144\6\7\4\0\1\7\1\0\1\7\6\0"+
    "\1\145\1\7\1\0\2\7\1\146\1\7\1\147\4\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\150\5\7"+
    "\1\151\1\0\2\7\1\152\4\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\153"+
    "\1\154\3\7\1\155\4\7\1\0\7\7\1\0\3\7"+
    "\27\0\1\156\25\0\1\157\10\0\1\160\30\0\6\7"+
    "\1\161\1\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\4\7\1\162\4\7\1\0\3\7\1\163\3\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\164\1\0\5\7\1\165\3\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\2\7\1\166"+
    "\4\7\1\0\3\7\20\0\1\14\11\0\2\14\2\0"+
    "\1\14\4\0\3\14\30\0\2\14\1\167\1\14\14\0"+
    "\1\14\11\0\2\14\2\0\1\14\4\0\3\14\30\0"+
    "\3\14\1\170\41\0\1\171\50\0\1\14\1\102\1\0"+
    "\1\103\1\0\1\103\2\0\1\103\1\0\2\14\2\0"+
    "\1\14\4\0\3\14\27\0\1\103\4\14\15\0\1\172"+
    "\1\0\1\172\51\0\1\172\21\0\1\173\1\0\1\173"+
    "\1\0\1\173\47\0\1\173\21\0\5\174\1\0\2\174"+
    "\6\0\1\174\7\0\1\174\2\0\1\174\22\0\1\174"+
    "\21\0\1\102\1\0\1\103\1\0\1\103\2\0\1\103"+
    "\6\0\1\175\35\0\1\103\20\0\1\176\76\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\1\7\1\177\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\200\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\4\7\1\201\4\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\202\6\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\203\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\204\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\2\7\1\205\6\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\1\7\1\206"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\1\207\1\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\5\7\1\210"+
    "\3\7\1\0\7\7\1\0\3\7\34\0\1\211\55\0"+
    "\1\100\2\0\12\100\1\0\1\100\1\212\1\213\55\100"+
    "\5\0\1\103\1\214\1\103\1\215\1\103\1\216\1\0"+
    "\1\103\6\0\1\175\35\0\1\103\21\0\1\103\1\0"+
    "\1\103\1\0\1\103\2\0\1\103\6\0\1\175\35\0"+
    "\1\103\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\3\7\1\217\3\7\1\220\1\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\221\1\222\10\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\223\1\224\1\225\7\7\1\0\7\7"+
    "\1\0\3\7\14\0\16\110\1\111\5\110\1\112\52\110"+
    "\2\226\1\227\11\110\1\230\61\110\2\231\1\113\11\110"+
    "\1\113\1\111\5\110\1\112\51\110\1\114\2\0\73\114"+
    "\5\0\3\7\1\232\4\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\5\7\1\233\3\7\1\0\7\7"+
    "\1\0\3\7\72\0\2\234\23\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\234\1\235\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\236\6\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\237\1\7\1\0\11\7\1\240\1\241"+
    "\6\7\1\0\3\7\50\0\2\242\45\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\242\1\243\10\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\1\7\1\244\7\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\7\7\1\245\1\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\246\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\46\0\1\247\5\0\1\250\107\0\1\251"+
    "\76\0\1\252\27\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\1\253\1\7\1\0\3\7\1\254\5\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\3\7\1\255"+
    "\3\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\4\7\1\256"+
    "\2\7\1\0\3\7\21\0\1\7\1\257\4\7\1\260"+
    "\1\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\261\1\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\1\262\1\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\263\1\264"+
    "\1\265\2\7\1\266\2\7\1\267\1\7\1\0\5\7"+
    "\1\270\1\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\271\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\4\7\1\272\2\7\1\273\1\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\274\1\275\10\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\1\7\1\276\7\7\1\0"+
    "\7\7\1\0\3\7\21\0\3\7\1\277\4\7\4\0"+
    "\1\7\1\0\1\7\6\0\1\300\1\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\10\7\1\301\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\3\7\1\302\5\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\303\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\37\0\1\304\57\0\10\7\4\0\1\7\1\0"+
    "\1\305\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\1\7\1\306\5\7\1\307\1\7\1\0"+
    "\7\7\1\0\3\7\50\0\2\310\12\0\1\311\1\312"+
    "\64\0\1\313\42\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\310\1\314\10\7\1\0\1\7\1\315"+
    "\1\316\4\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\3\7\1\317\5\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\320\6\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\321\1\322"+
    "\6\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\323\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\1\172\1\0\1\172\12\0\1\64\36\0"+
    "\1\172\21\0\1\173\1\0\1\173\1\0\1\173\10\0"+
    "\1\64\36\0\1\173\21\0\5\174\1\0\2\174\5\0"+
    "\1\64\1\174\7\0\1\174\2\0\1\174\22\0\1\174"+
    "\20\0\1\324\1\325\1\0\1\326\1\0\1\326\2\0"+
    "\1\326\12\0\1\324\31\0\1\326\75\0\1\327\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\330"+
    "\1\331\10\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\1\7\1\332\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\0"+
    "\1\7\1\333\5\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\334"+
    "\6\7\1\0\7\7\1\0\3\7\21\0\3\7\1\335"+
    "\4\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\5\7\1\336"+
    "\2\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\7\7\1\337"+
    "\1\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\340\1\341\10\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\6\7\1\342\2\7"+
    "\1\0\3\7\1\343\3\7\1\0\3\7\21\0\1\344"+
    "\1\0\1\345\1\0\1\345\2\0\1\345\3\0\1\211"+
    "\40\0\1\345\21\0\1\346\1\0\1\346\51\0\1\346"+
    "\21\0\1\347\1\0\1\347\1\0\1\347\47\0\1\347"+
    "\21\0\5\350\1\0\2\350\6\0\1\350\7\0\1\350"+
    "\2\0\1\350\22\0\1\350\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\351\1\0\5\7\1\352"+
    "\3\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\353\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\37\0\1\354\57\0\10\7\4\0"+
    "\1\7\1\0\1\355\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\61\0\1\356\35\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\10\7\1\357"+
    "\1\0\7\7\1\0\3\7\15\0\3\226\11\0\1\226"+
    "\1\110\57\0\1\110\2\360\1\227\11\110\1\227\1\111"+
    "\5\110\1\112\51\110\1\0\2\226\1\230\11\0\1\230"+
    "\60\0\1\361\3\231\11\361\1\231\1\362\5\361\1\363"+
    "\1\361\1\364\47\361\5\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\365\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\3\7\1\366\5\7\1\0\7\7"+
    "\1\0\3\7\37\0\1\367\57\0\10\7\4\0\1\7"+
    "\1\0\1\370\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\5\7\1\371\3\7\1\0\7\7"+
    "\1\0\3\7\47\0\1\372\47\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\373\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\62\0\2\374\33\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\374"+
    "\1\375\6\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\376\1\0\2\7\1\377"+
    "\6\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\4\7\1\u0100"+
    "\4\7\1\0\7\7\1\0\3\7\37\0\1\u0101\105\0"+
    "\1\u0102\65\0\1\u0103\113\0\1\u0104\41\0\10\7\4\0"+
    "\1\7\1\0\1\u0105\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u0106\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\u0107"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\4\7\1\u0108\4\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\10\7\1\u0109\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\u010a\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\u010b\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\1\u010c\24\0\1\u010d\34\0\1\u010e\35\0"+
    "\3\7\1\u010f\4\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\10\7\1\u0110\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\u0111\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\1\7\1\u0112\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\u0113"+
    "\6\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\10\7\1\u0114"+
    "\1\0\7\7\1\0\3\7\21\0\3\7\1\u0115\4\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\u0116\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\u0117"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\56\0\1\u0118\40\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\5\7\1\u0119\3\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\u011a"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\11\7\1\0\6\7\1\u011b\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\u011c\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\1\u011d\1\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\4\7\1\u011e\4\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\u011f\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\u0120\1\u0121\6\7\1\0"+
    "\3\7\54\0\1\u0122\70\0\1\u0123\65\0\1\u0124\104\0"+
    "\1\u0125\50\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\3\7\1\u0126\5\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\u0127\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\u0128\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\1\u0129\1\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\u012a"+
    "\1\u012b\6\7\1\0\3\7\52\0\1\u012c\44\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\1\7"+
    "\1\u012d\7\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u012e\4\7\1\0\7\7\1\0\3\7\21\0\1\325"+
    "\1\0\1\326\1\0\1\326\2\0\1\326\44\0\1\326"+
    "\21\0\1\326\1\u012f\1\326\1\u0130\1\326\1\u0131\1\0"+
    "\1\326\44\0\1\326\21\0\1\326\1\0\1\326\1\0"+
    "\1\326\2\0\1\326\44\0\1\326\37\0\1\u0132\106\0"+
    "\2\u0133\45\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\u0133\1\u0134\10\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\7\7\1\u0135\1\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\u0136\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\u0137\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\u0138\1\u0139\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u013a\1\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\10\7\1\u013b\1\0\7\7"+
    "\1\0\3\7\37\0\1\u013c\57\0\10\7\4\0\1\7"+
    "\1\0\1\u013d\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\u013e"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\21\0\1\345\1\u013f\1\345\1\u0140\1\345\1\u0141\1\0"+
    "\1\345\2\0\1\100\41\0\1\345\21\0\1\345\1\0"+
    "\1\345\1\0\1\345\2\0\1\345\2\0\1\100\41\0"+
    "\1\345\21\0\1\346\1\0\1\346\13\0\1\175\35\0"+
    "\1\346\21\0\1\347\1\0\1\347\1\0\1\347\11\0"+
    "\1\175\35\0\1\347\21\0\5\350\1\0\2\350\6\0"+
    "\1\u0142\7\0\1\350\2\0\1\350\22\0\1\350\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\4\7\1\u0143\4\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\2\7\1\u0144\6\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\2\7\1\u0145\6\7\1\0\7\7\1\0\3\7\62\0"+
    "\2\u0146\33\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\u0146\1\u0147\6\7\1\0\3\7"+
    "\53\0\1\u0148\43\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\2\7\1\u0149\6\7\1\0\7\7"+
    "\1\0\3\7\14\0\1\110\3\360\11\110\1\360\1\u014a"+
    "\5\110\1\112\51\110\1\361\1\231\1\u014b\13\361\1\362"+
    "\5\361\1\363\52\361\1\u014c\1\u014d\1\u014e\11\361\1\u014f"+
    "\60\361\1\u0150\1\u0151\1\u0152\73\u0150\1\361\2\u014b\13\361"+
    "\1\362\5\361\1\112\51\361\5\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\1\u0153\1\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\u0154\1\u0155\10\7\1\0\7\7"+
    "\1\0\3\7\50\0\2\u0156\45\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\u0156\1\u0157\10\7\1\0"+
    "\7\7\1\0\3\7\67\0\1\u0158\27\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\0"+
    "\4\7\1\u0159\2\7\1\0\3\7\21\0\3\7\1\u015a"+
    "\4\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\u015b"+
    "\1\u015c\6\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\7\7\1\u015d\1\7"+
    "\1\0\7\7\1\0\3\7\24\0\1\u015e\124\0\1\u015f"+
    "\71\0\1\u0160\47\0\3\7\1\u0161\4\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\2\7\1\u0162\6\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\u0163\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\4\7\1\u0164\2\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\2\7\1\u0165\6\7\1\0\7\7\1\0"+
    "\3\7\21\0\3\7\1\u0166\4\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\u0167\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\61\0"+
    "\1\u0168\62\0\1\u0169\50\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\10\7\1\u016a\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\1\u016b\1\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\6\7\1\u016c\1\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\3\7\1\u016d\3\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\6\7\1\u016e\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\11\7\1\u016f\1\u0170\6\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\10\7\1\u0171\1\0\7\7\1\0\3\7\46\0\1\u0172"+
    "\50\0\10\7\4\0\1\7\1\0\1\7\6\0\1\u0173"+
    "\1\7\1\0\11\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\u0174\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\6\7\1\u0175"+
    "\1\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\46\0\1\u0176\50\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\1\u0177\1\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\37\0\1\u0178"+
    "\111\0\1\u0179\75\0\1\u017a\104\0\2\u017b\33\0\10\7"+
    "\4\0\1\7\1\0\1\u017c\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u017d\6\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u017e\6\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\u017b\1\u017f"+
    "\6\7\1\0\3\7\47\0\1\u0180\47\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\u0181\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\1\u0182\1\0\1\u0182"+
    "\51\0\1\u0182\21\0\1\u0183\1\0\1\u0183\1\0\1\u0183"+
    "\47\0\1\u0183\21\0\5\u0184\1\0\2\u0184\6\0\1\u0184"+
    "\7\0\1\u0184\2\0\1\u0184\22\0\1\u0184\26\0\1\u0185"+
    "\70\0\10\7\4\0\1\7\1\0\1\u0186\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\2\7"+
    "\1\u0187\6\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u0188\4\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\u0189\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u018a\6\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\4\7\1\u018b\4\7"+
    "\1\0\7\7\1\0\3\7\21\0\1\u018c\1\0\1\u018c"+
    "\51\0\1\u018c\21\0\1\u018d\1\0\1\u018d\1\0\1\u018d"+
    "\47\0\1\u018d\21\0\5\u018e\1\0\2\u018e\6\0\1\u018e"+
    "\7\0\1\u018e\2\0\1\u018e\22\0\1\u018e\20\0\1\324"+
    "\1\u018f\4\350\1\0\2\350\6\0\1\u0142\3\0\1\324"+
    "\3\0\1\350\2\0\1\350\22\0\1\350\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\1\7"+
    "\1\u0190\7\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\7\7"+
    "\1\u0191\1\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u0192\4\7\1\0\7\7\1\0\3\7\27\0\1\u0193"+
    "\67\0\6\7\1\u0194\1\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\37\0\1\u0195\57\0\10\7\4\0\1\7\1\0\1\u0196"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\14\0\1\110\2\360\1\227\11\110\1\227\1\u014a\57\110"+
    "\1\361\1\231\2\u014b\11\361\1\u014b\1\362\5\361\1\363"+
    "\1\361\1\u0197\47\361\1\u0150\3\u014c\11\u0150\1\u014c\1\361"+
    "\7\u0150\1\u0198\50\u0150\1\u014c\2\u014d\11\u0150\1\u014d\1\361"+
    "\7\u0150\1\u0199\47\u0150\1\361\1\u019a\1\u019b\1\u014e\11\361"+
    "\1\u014e\1\362\5\361\1\363\51\361\1\u0150\1\u014c\1\u014d"+
    "\1\u014f\11\u0150\1\u014f\61\u0150\3\u0151\11\u0150\1\u0151\10\u0150"+
    "\1\u0198\50\u0150\1\u0151\2\u0152\11\u0150\1\u0152\10\u0150\1\u0199"+
    "\47\u0150\34\0\2\u019c\45\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\u019c\1\u019d\10\7\1\0\7\7"+
    "\1\0\3\7\55\0\1\u019e\41\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\4\7\1\u019f\4\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\0\2\7"+
    "\1\u01a0\4\7\1\0\3\7\22\0\1\u01a1\74\0\1\7"+
    "\1\u01a2\6\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\60\0\1\u01a3"+
    "\64\0\1\u01a4\106\0\1\u01a5\36\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\7\7\1\u01a6\1\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\u01a7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01a8\1\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\u01a9\6\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\2\7\1\u01aa"+
    "\4\7\1\0\3\7\21\0\5\7\1\u01ab\2\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\37\0\1\u01ac\116\0\1\u01ad\36\0"+
    "\10\7\4\0\1\7\1\0\1\u01ae\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\7\7\1\u01af"+
    "\1\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\u01b0"+
    "\1\u01b1\6\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\u01b2\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\53\0\1\u01b3\43\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u01b4\6\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u01b5\6\7"+
    "\1\0\7\7\1\0\3\7\37\0\1\u01b6\57\0\10\7"+
    "\4\0\1\7\1\0\1\u01b7\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\u01b8\1\u01b9"+
    "\6\7\1\0\3\7\24\0\1\u01ba\133\0\2\u01bb\74\0"+
    "\2\u01bc\51\0\1\u01bd\57\0\3\7\1\u01be\4\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\u01bb\1\u01bf\6\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\u01bc\1\u01c0\6\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\u01c1\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\55\0"+
    "\1\u01c2\41\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\4\7\1\u01c3\4\7\1\0\7\7\1\0"+
    "\3\7\60\0\1\u01c4\36\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01c5\1\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01c6\1\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\u01c7\6\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\u01c8\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\1\u018c\1\0\1\u018c\7\0\1\100\41\0"+
    "\1\u018c\21\0\1\u018d\1\0\1\u018d\1\0\1\u018d\5\0"+
    "\1\100\41\0\1\u018d\21\0\5\u018e\1\0\2\u018e\2\0"+
    "\1\100\3\0\1\u018e\7\0\1\u018e\2\0\1\u018e\22\0"+
    "\1\u018e\21\0\5\350\1\u0131\2\350\6\0\1\u0142\7\0"+
    "\1\350\2\0\1\350\22\0\1\350\21\0\10\7\4\0"+
    "\1\7\1\0\1\u01c9\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u01ca\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\14\0\1\361\2\u014b\13\361\1\362\5\361"+
    "\1\363\51\361\1\u0150\2\u0152\21\u0150\1\112\52\u0150\2\u0152"+
    "\21\u0150\1\363\51\u0150\1\361\3\u019a\11\361\1\u019a\1\u01cb"+
    "\5\361\1\363\1\361\1\364\50\361\1\u019a\2\u019b\11\361"+
    "\1\u019b\1\u01cb\5\361\1\363\1\361\1\u0197\47\361\5\0"+
    "\10\7\4\0\1\7\1\0\1\u01cc\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\3\7\61\0\1\u01cd\35\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\10\7\1\u01ce\1\0\7\7\1\0\3\7\60\0\1\u01cf"+
    "\76\0\1\u01d0\35\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\7\7\1\u01d1\1\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\10\7\1\u01d2\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\u01d3\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\1\7\1\u01d4"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\7\7"+
    "\1\u01d5\1\7\1\0\7\7\1\0\3\7\55\0\1\u01d6"+
    "\41\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\4\7\1\u01d7\4\7\1\0\7\7\1\0\3\7"+
    "\37\0\1\u01d8\57\0\10\7\4\0\1\7\1\0\1\u01d9"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\u01da\1\u01db\10\7\1\0\7\7\1\0\3\7\60\0"+
    "\1\u01dc\36\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\7\7\1\u01dd\1\7\1\0\7\7\1\0"+
    "\3\7\55\0\1\u01de\41\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\4\7\1\u01df\4\7\1\0"+
    "\7\7\1\0\3\7\60\0\1\u01e0\64\0\1\u01e1\106\0"+
    "\1\u01e2\65\0\2\u01e3\45\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01e4\1\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u01e5\1\0\11\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\7\7\1\u01e6\1\7\1\0\7\7"+
    "\1\0\3\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\u01e3\1\u01e7\10\7\1\0\7\7\1\0"+
    "\3\7\60\0\1\u01e8\36\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01e9\1\7\1\0"+
    "\7\7\1\0\3\7\37\0\1\u01ea\57\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\4\7\1\u01eb"+
    "\4\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\1\7\1\u01ec"+
    "\7\7\1\0\7\7\1\0\3\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\1\u01ed\1\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\14\0\1\361\1\u019a\1\u019b"+
    "\1\u014e\11\361\1\u014e\1\u01cb\57\361\5\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\1\7\1\u01ee"+
    "\7\7\1\0\7\7\1\0\3\7\60\0\1\u01ef\36\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\u01f0\1\7\1\0\7\7\1\0\3\7\37\0"+
    "\1\u01f1\111\0\1\u01f2\43\0\10\7\4\0\1\7\1\0"+
    "\1\u01f3\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\2\7\1\u01f4\6\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\1\7\1\u01f5\7\7\1\0\7\7\1\0"+
    "\3\7\21\0\1\7\1\u01f6\6\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\21\0\10\7\4\0\1\7\1\0\1\u01f7\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\37\0"+
    "\1\u01f8\57\0\10\7\4\0\1\7\1\0\1\u01f9\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\3\7\56\0"+
    "\1\u01fa\40\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\5\7\1\u01fb\3\7\1\0\7\7\1\0"+
    "\3\7\37\0\1\u01fc\57\0\10\7\4\0\1\7\1\0"+
    "\1\u01fd\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\37\0\1\u01fe\57\0\10\7\4\0\1\7\1\0"+
    "\1\u01ff\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\3\7\55\0\1\u0200\41\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\4\7\1\u0201\4\7\1\0"+
    "\7\7\1\0\3\7\53\0\1\u0202\43\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\u0203\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\37\0\1\u0204\57\0\10\7"+
    "\4\0\1\7\1\0\1\u0205\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\37\0\1\u0206\57\0\10\7"+
    "\4\0\1\7\1\0\1\u0207\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\3\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\6\0\1\u0208\1\7\1\0\11\7\1\0"+
    "\7\7\1\0\3\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\u0209\6\7\1\0"+
    "\7\7\1\0\3\7\53\0\1\u020a\43\0\10\7\4\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\u020b"+
    "\6\7\1\0\7\7\1\0\3\7\60\0\1\u020c\36\0"+
    "\10\7\4\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\u020d\1\7\1\0\7\7\1\0\3\7\55\0"+
    "\1\u020e\41\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\1\u020f\1\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\u0210\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\3\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u0211\4\7\1\0\7\7\1\0\3\7\47\0\1\u0212"+
    "\47\0\10\7\4\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\u0213\1\0\11\7\1\0\7\7\1\0\3\7\46\0"+
    "\1\u0214\50\0\10\7\4\0\1\7\1\0\1\7\6\0"+
    "\1\u0215\1\7\1\0\11\7\1\0\7\7\1\0\3\7"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25606];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\15\1\2\11\26\1\7\11\1\1\3\0"+
    "\1\1\1\0\12\1\2\0\7\1\1\0\1\11\4\1"+
    "\1\0\10\1\3\0\20\1\1\0\2\1\1\11\2\0"+
    "\10\1\1\11\3\1\2\0\12\1\1\11\1\0\1\1"+
    "\3\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\0\4\1"+
    "\4\0\10\1\1\0\10\1\1\0\7\1\1\11\3\1"+
    "\4\0\5\1\1\0\2\1\1\0\2\1\2\0\7\1"+
    "\1\0\3\1\2\0\10\1\1\0\3\1\1\0\4\1"+
    "\1\11\2\1\1\0\1\1\1\0\4\1\2\0\1\11"+
    "\1\0\10\1\2\0\11\1\1\0\7\1\1\0\1\1"+
    "\4\0\4\1\1\0\1\1\1\11\2\1\4\0\1\11"+
    "\4\1\1\11\3\1\1\11\2\1\3\0\4\1\1\0"+
    "\1\1\1\0\3\1\2\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\2\1\3\0"+
    "\7\1\2\0\5\1\1\0\2\1\1\0\3\1\1\11"+
    "\1\1\4\0\4\1\1\0\4\1\1\0\6\1\3\0"+
    "\4\1\1\11\1\1\1\11\2\1\2\0\2\1\1\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\2\0\6\1"+
    "\2\11\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\4\0\4\1\1\0\1\1\1\0\10\1"+
    "\1\0\1\1\2\0\5\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\4\1\1\11\1\1\1\0\4\1\1\0\1\1"+
    "\1\11\1\0\5\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[533];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EiffelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EiffelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 99: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 100: break;
          case 3: 
            { return EiffelTypes.FREE_OPERATOR;
            }
          case 101: break;
          case 4: 
            { return EiffelTypes.INTEGER_LITERAL;
            }
          case 102: break;
          case 5: 
            { return EiffelTypes.IDENTIFIER;
            }
          case 103: break;
          case 6: 
            { return EiffelTypes.DOT;
            }
          case 104: break;
          case 7: 
            { return EiffelTypes.DQUOTE;
            }
          case 105: break;
          case 8: 
            { return EiffelTypes.LEFT_SQUARE_BRACKET;
            }
          case 106: break;
          case 9: 
            { return EiffelTypes.RIGHT_SQUARE_BRACKET;
            }
          case 107: break;
          case 10: 
            { return EiffelTypes.EQ;
            }
          case 108: break;
          case 11: 
            { return EiffelTypes.QUESTION;
            }
          case 109: break;
          case 12: 
            { return EiffelTypes.EXCLAMATION;
            }
          case 110: break;
          case 13: 
            { return EiffelTypes.COLON;
            }
          case 111: break;
          case 14: 
            { return EiffelTypes.SEMICOLON;
            }
          case 112: break;
          case 15: 
            { return EiffelTypes.COMMA;
            }
          case 113: break;
          case 16: 
            { return EiffelTypes.LEFT_CURLY_BRACKET;
            }
          case 114: break;
          case 17: 
            { return EiffelTypes.RIGHT_CURLY_BRACKET;
            }
          case 115: break;
          case 18: 
            { return EiffelTypes.LEFT_PAREN;
            }
          case 116: break;
          case 19: 
            { return EiffelTypes.RIGHT_PAREN;
            }
          case 117: break;
          case 20: 
            { return EiffelTypes.DOLLAR;
            }
          case 118: break;
          case 21: 
            { return EiffelTypes.REAL_LITERAL;
            }
          case 119: break;
          case 22: 
            { return EiffelTypes.DDOT;
            }
          case 120: break;
          case 23: 
            { return EiffelTypes.STRING_LITERAL;
            }
          case 121: break;
          case 24: 
            { return EiffelTypes.COMMENT;
            }
          case 122: break;
          case 25: 
            { return EiffelTypes.ARROW;
            }
          case 123: break;
          case 26: 
            { return EiffelTypes.AS_KEYWORD;
            }
          case 124: break;
          case 27: 
            { return EiffelTypes.DO_KEYWORD;
            }
          case 125: break;
          case 28: 
            { return EiffelTypes.OR_KEYWORD;
            }
          case 126: break;
          case 29: 
            { return EiffelTypes.IF_KEYWORD;
            }
          case 127: break;
          case 30: 
            { return EiffelTypes.RIGHT_TRIANGLE_DBRACKET;
            }
          case 128: break;
          case 31: 
            { return EiffelTypes.LEFT_TRIANGLE_DBRACKET;
            }
          case 129: break;
          case 32: 
            { return EiffelTypes.ASSIGN;
            }
          case 130: break;
          case 33: 
            { return EiffelTypes.XOR_KEYWORD;
            }
          case 131: break;
          case 34: 
            { return EiffelTypes.CHARACTER_LITERAL;
            }
          case 132: break;
          case 35: 
            { return EiffelTypes.END_KEYWORD;
            }
          case 133: break;
          case 36: 
            { return EiffelTypes.ALL_KEYWORD;
            }
          case 134: break;
          case 37: 
            { return EiffelTypes.AND_KEYWORD;
            }
          case 135: break;
          case 38: 
            { return EiffelTypes.NOT_KEYWORD;
            }
          case 136: break;
          case 39: 
            { return EiffelTypes.OLD_KEYWORD;
            }
          case 137: break;
          case 40: 
            { return EiffelTypes.USE_KEYWORD;
            }
          case 138: break;
          case 41: 
            { return EiffelTypes.FROM_KEYWORD;
            }
          case 139: break;
          case 42: 
            { return EiffelTypes.ELSE_KEYWORD;
            }
          case 140: break;
          case 43: 
            { return EiffelTypes.LOOP_KEYWORD;
            }
          case 141: break;
          case 44: 
            { return EiffelTypes.LIKE_KEYWORD;
            }
          case 142: break;
          case 45: 
            { return EiffelTypes.SOME_KEYWORD;
            }
          case 143: break;
          case 46: 
            { return EiffelTypes.NONE_KEYWORD;
            }
          case 144: break;
          case 47: 
            { return EiffelTypes.NOTE_KEYWORD;
            }
          case 145: break;
          case 48: 
            { return EiffelTypes.ONCE_KEYWORD;
            }
          case 146: break;
          case 49: 
            { return EiffelTypes.ONLY_KEYWORD;
            }
          case 147: break;
          case 50: 
            { return EiffelTypes.TRUE_KEYWORD;
            }
          case 148: break;
          case 51: 
            { return EiffelTypes.THEN_KEYWORD;
            }
          case 149: break;
          case 52: 
            { return EiffelTypes.VOID_KEYWORD;
            }
          case 150: break;
          case 53: 
            { return EiffelTypes.WHEN_KEYWORD;
            }
          case 151: break;
          case 54: 
            { return EiffelTypes.CLASS_KEYWORD;
            }
          case 152: break;
          case 55: 
            { return EiffelTypes.CHECK_KEYWORD;
            }
          case 153: break;
          case 56: 
            { return EiffelTypes.FALSE_KEYWORD;
            }
          case 154: break;
          case 57: 
            { return EiffelTypes.LOCAL_KEYWORD;
            }
          case 155: break;
          case 58: 
            { return EiffelTypes.ALIAS_KEYWORD;
            }
          case 156: break;
          case 59: 
            { return EiffelTypes.AGENT_KEYWORD;
            }
          case 157: break;
          case 60: 
            { return EiffelTypes.DEBUG_KEYWORD;
            }
          case 158: break;
          case 61: 
            { return EiffelTypes.RETRY_KEYWORD;
            }
          case 159: break;
          case 62: 
            { return EiffelTypes.TUPLE_KEYWORD;
            }
          case 160: break;
          case 63: 
            { return EiffelTypes.UNTIL_KEYWORD;
            }
          case 161: break;
          case 64: 
            { return EiffelTypes.CREATE_KEYWORD;
            }
          case 162: break;
          case 65: 
            { return EiffelTypes.FROZEN_KEYWORD;
            }
          case 163: break;
          case 66: 
            { return EiffelTypes.EXPORT_KEYWORD;
            }
          case 164: break;
          case 67: 
            { return EiffelTypes.ELSEIF_KEYWORD;
            }
          case 165: break;
          case 68: 
            { return EiffelTypes.ENSURE_KEYWORD;
            }
          case 166: break;
          case 69: 
            { return EiffelTypes.ACROSS_KEYWORD;
            }
          case 167: break;
          case 70: 
            { return EiffelTypes.ASSIGN_KEYWORD;
            }
          case 168: break;
          case 71: 
            { return EiffelTypes.SELECT_KEYWORD;
            }
          case 169: break;
          case 72: 
            { return EiffelTypes.RESCUE_KEYWORD;
            }
          case 170: break;
          case 73: 
            { return EiffelTypes.RESULT_KEYWORD;
            }
          case 171: break;
          case 74: 
            { return EiffelTypes.RENAME_KEYWORD;
            }
          case 172: break;
          case 75: 
            { return EiffelTypes.CONVERT_KEYWORD;
            }
          case 173: break;
          case 76: 
            { return EiffelTypes.CURRENT_KEYWORD;
            }
          case 174: break;
          case 77: 
            { return EiffelTypes.FEATURE_KEYWORD;
            }
          case 175: break;
          case 78: 
            { return EiffelTypes.REQUIRE_KEYWORD;
            }
          case 176: break;
          case 79: 
            { return EiffelTypes.INSPECT_KEYWORD;
            }
          case 177: break;
          case 80: 
            { return EiffelTypes.INHERIT_KEYWORD;
            }
          case 178: break;
          case 81: 
            { return EiffelTypes.IMPLIES_KEYWORD;
            }
          case 179: break;
          case 82: 
            { return EiffelTypes.VARIANT_KEYWORD;
            }
          case 180: break;
          case 83: 
            { return EiffelTypes.EXPANDED_KEYWORD;
            }
          case 181: break;
          case 84: 
            { return EiffelTypes.EXTERNAL_KEYWORD;
            }
          case 182: break;
          case 85: 
            { return EiffelTypes.ATTACHED_KEYWORD;
            }
          case 183: break;
          case 86: 
            { return EiffelTypes.SEPARATE_KEYWORD;
            }
          case 184: break;
          case 87: 
            { return EiffelTypes.DEFERRED_KEYWORD;
            }
          case 185: break;
          case 88: 
            { return EiffelTypes.REDEFINE_KEYWORD;
            }
          case 186: break;
          case 89: 
            { return EiffelTypes.OBSOLETE_KEYWORD;
            }
          case 187: break;
          case 90: 
            { return EiffelTypes.UNDEFINE_KEYWORD;
            }
          case 188: break;
          case 91: 
            { return EiffelTypes.ATTRIBUTE_KEYWORD;
            }
          case 189: break;
          case 92: 
            { return EiffelTypes.SIGNATURE_KEYWORD;
            }
          case 190: break;
          case 93: 
            { return EiffelTypes.PRECURSOR_KEYWORD;
            }
          case 191: break;
          case 94: 
            { return EiffelTypes.INVARIANT_KEYWORD;
            }
          case 192: break;
          case 95: 
            { return EiffelTypes.C_EXTERNAL_KEYWORD;
            }
          case 193: break;
          case 96: 
            { return EiffelTypes.DETACHABLE_KEYWORD;
            }
          case 194: break;
          case 97: 
            { return EiffelTypes.CPP_EXTERNAL_KEYWORD;
            }
          case 195: break;
          case 98: 
            { return EiffelTypes.DLL_EXTERNAL_KEYWORD;
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
