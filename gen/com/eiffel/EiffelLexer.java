/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.eiffel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import com.eiffel.psi.EiffelTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Eiffel.flex</tt>
 */
public class EiffelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\124\3\1\6\45\3\1\7\1\10\2\3\1\11\73\3\1\6\277\3");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\63\1\77\1\22\1\0\1\100\1\21\1\0\1\15\1\74\1\75"+
    "\1\65\1\4\1\61\1\23\1\17\1\57\1\5\1\7\6\11\2\14\1\54\1\55\1\70\1\56\1\71\1"+
    "\76\1\0\1\25\1\6\1\10\1\30\1\20\1\13\1\45\1\43\1\41\1\16\1\51\1\24\1\44\1"+
    "\33\1\34\1\32\1\46\1\31\1\27\1\36\1\37\1\42\1\52\1\12\1\47\1\35\1\62\1\66"+
    "\1\64\1\67\1\53\1\0\1\25\1\6\1\10\1\30\1\20\1\13\1\45\1\43\1\41\1\16\1\51"+
    "\1\24\1\44\1\33\1\34\1\32\1\46\1\31\1\27\1\36\1\37\1\42\1\52\1\12\1\47\1\35"+
    "\1\72\1\0\1\73\1\60\6\0\1\1\32\0\1\3\217\0\2\40\115\0\1\26\1\3\77\0\13\3\35"+
    "\0\2\1\5\0\1\3\57\0\1\3\112\0\1\50\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\3\5"+
    "\1\1\1\6\1\5\1\7\1\10\2\5\1\1\10\5"+
    "\1\1\3\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\4\0\1\35"+
    "\1\0\12\5\1\0\2\35\1\36\3\5\1\37\1\0"+
    "\1\37\1\40\1\41\1\5\1\0\3\5\2\42\3\5"+
    "\3\0\5\5\1\43\5\5\1\44\4\5\1\0\2\5"+
    "\1\45\2\0\1\45\4\5\1\46\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\3\4\2\0\6\5\1\54\3\5"+
    "\1\55\3\0\2\5\1\0\1\5\1\0\1\5\1\56"+
    "\1\0\1\37\2\5\1\0\2\5\1\57\1\0\1\5"+
    "\1\0\1\5\1\60\2\5\3\0\6\5\1\0\7\5"+
    "\1\61\1\0\1\5\1\62\5\5\2\63\2\5\4\0"+
    "\6\5\1\64\1\0\2\35\2\0\7\5\1\0\2\5"+
    "\1\65\3\35\3\5\2\66\1\0\1\5\1\37\1\5"+
    "\1\67\2\70\1\5\1\0\1\5\1\0\3\5\1\0"+
    "\1\71\1\0\1\5\1\71\4\5\2\0\7\5\1\72"+
    "\1\73\1\0\1\5\1\74\1\75\1\76\1\5\1\77"+
    "\1\5\1\0\1\5\4\0\4\5\1\0\1\5\1\100"+
    "\4\0\2\101\3\5\2\102\2\5\2\103\1\5\1\35"+
    "\3\5\1\0\1\5\1\0\1\5\1\37\1\104\1\0"+
    "\1\5\2\105\1\0\1\5\1\0\1\5\1\106\2\0"+
    "\2\5\1\107\2\5\2\0\4\5\1\110\1\0\2\5"+
    "\1\0\1\5\1\111\1\5\2\112\4\0\4\5\1\0"+
    "\1\5\3\35\1\0\1\113\4\5\1\114\1\35\1\5"+
    "\1\115\1\5\2\116\2\117\2\120\2\121\1\0\1\5"+
    "\1\122\1\0\1\122\3\5\1\123\1\124\1\123\1\124"+
    "\1\0\1\5\1\125\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\4\5\1\0\1\5\1\0\1\126\1\127"+
    "\1\5\1\130\2\5\1\0\1\5\1\0\3\5\1\0"+
    "\1\5\2\131\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\132\1\0\1\133\1\134\1\132\1\5\1\133\1\134"+
    "\2\135\1\0\1\5\1\136\1\137\1\0\1\5\1\0"+
    "\1\5\1\140\1\5\2\141\1\0\1\5\2\142\2\143"+
    "\1\0\1\5\1\0\1\5\2\144\2\145\1\5\2\146"+
    "\2\147\1\0\1\150\1\5\1\0\1\5\1\151\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\101"+
    "\0\101\0\u07df\0\101\0\101\0\u0820\0\101\0\101\0\101"+
    "\0\101\0\u0861\0\u08a2\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\101\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u034d\0\u0e79\0\101\0\u0eba\0\101\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u0145\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u0145\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\101\0\u1699"+
    "\0\u16da\0\u0145\0\u171b\0\u175c\0\u179d\0\u17de\0\101\0\101"+
    "\0\101\0\101\0\u181f\0\101\0\101\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u0145\0\u1b2b\0\u1b6c\0\u1bad\0\101\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u0145\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u0145\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u0145\0\u2102\0\u2143\0\u2184\0\u21c5"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5"+
    "\0\u2616\0\u2657\0\u0145\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c"+
    "\0\101\0\u0145\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922"+
    "\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\101\0\u2ae9"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1"+
    "\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u0145\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u3183\0\u0145\0\101\0\u0145\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\101\0\u33cc"+
    "\0\u340d\0\u0145\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u0145"+
    "\0\u0145\0\u379b\0\u37dc\0\u0145\0\u0145\0\u0145\0\u381d\0\u0145"+
    "\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25"+
    "\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u0145\0\u3bab\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\101\0\u0145\0\u3caf\0\u3cf0\0\u3d31\0\101"+
    "\0\u0145\0\u3d72\0\u3db3\0\101\0\u0145\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u0145"+
    "\0\u407e\0\u40bf\0\101\0\u0145\0\u4100\0\u4141\0\u4182\0\u41c3"+
    "\0\u0145\0\u4204\0\u4245\0\u4286\0\u42c7\0\u0145\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u0145\0\u4510"+
    "\0\u4551\0\u4592\0\u45d3\0\u4614\0\u0145\0\u4655\0\101\0\u0145"+
    "\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d"+
    "\0\u489e\0\u48df\0\u3bab\0\u3bec\0\u3c2d\0\u4920\0\u0145\0\u4961"+
    "\0\u49a2\0\u49e3\0\u4a24\0\u0145\0\u4a65\0\u4aa6\0\u0145\0\u4ae7"+
    "\0\101\0\u0145\0\101\0\u0145\0\101\0\u0145\0\101\0\u0145"+
    "\0\u4b28\0\u4b69\0\101\0\u4baa\0\u0145\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\101\0\101\0\u0145\0\u0145\0\u4cae\0\u4cef\0\u0145\0\u4d30"+
    "\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38"+
    "\0\u4f79\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140"+
    "\0\u5181\0\u0145\0\u0145\0\u51c2\0\u0145\0\u5203\0\u5244\0\u5285"+
    "\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c\0\101"+
    "\0\u0145\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\101"+
    "\0\u5613\0\101\0\101\0\u0145\0\u5654\0\u0145\0\u0145\0\101"+
    "\0\u0145\0\u5695\0\u56d6\0\u0145\0\u0145\0\u5717\0\u5758\0\u5799"+
    "\0\u57da\0\u0145\0\u581b\0\101\0\u0145\0\u585c\0\u589d\0\101"+
    "\0\u0145\0\101\0\u0145\0\u58de\0\u591f\0\u5960\0\u59a1\0\101"+
    "\0\u0145\0\101\0\u0145\0\u59e2\0\101\0\u0145\0\101\0\u0145"+
    "\0\u5a23\0\u0145\0\u5a64\0\u5aa5\0\u5ae6\0\101\0\u0145";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\7\1\13\1\6\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\6\1\31\1\32\1\33\1\34"+
    "\1\35\5\6\1\2\1\6\1\36\1\7\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\3\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\102\0\3\3\57\0\1\3\22\0"+
    "\1\5\1\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\63\33\0\1\7\32\0\1\7\1\64\1\7\1\65"+
    "\1\7\1\66\1\0\1\7\2\0\1\67\33\0\1\7"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\1\7\2\0\1\67"+
    "\33\0\1\7\31\0\1\70\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\1\71\1\6\1\0\2\6\1\72\2\6"+
    "\1\73\2\6\1\74\1\0\2\6\1\75\4\6\1\0"+
    "\2\6\1\76\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\5\6\1\77\3\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\100"+
    "\3\0\1\6\1\101\1\0\2\6\1\102\6\6\1\0"+
    "\7\6\1\0\3\6\25\0\1\103\2\0\76\103\5\0"+
    "\1\104\1\0\1\105\1\0\1\105\2\0\1\105\2\0"+
    "\1\106\33\0\1\105\32\0\5\6\1\107\2\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\110\1\6\1\0\4\6"+
    "\1\111\4\6\1\0\7\6\1\0\3\6\25\0\21\112"+
    "\1\113\1\114\56\112\5\0\1\5\1\0\1\7\1\0"+
    "\1\7\2\0\1\7\2\0\1\63\3\0\1\115\27\0"+
    "\1\7\15\0\1\116\14\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\5\6\1\117\3\6\1\120"+
    "\1\121\6\6\1\0\3\6\32\0\3\6\1\122\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\123\1\6\1\124"+
    "\1\125\3\6\1\126\2\6\1\127\1\6\1\0\4\6"+
    "\1\130\2\6\1\0\3\6\45\0\1\131\13\0\1\132"+
    "\3\0\2\133\44\0\10\6\1\0\1\6\1\0\1\134"+
    "\3\0\2\6\1\0\5\6\1\135\3\6\1\133\1\136"+
    "\6\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\137\3\0\1\140\1\6\1\0\5\6\1\141\3\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\142\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\143\6\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\5\6\1\144\3\6\1\0\7\6"+
    "\1\0\3\6\32\0\1\6\1\145\6\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\146\1\6\1\0\2\6\1\147"+
    "\1\6\1\150\4\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\151\5\6\1\152\1\0\2\6\1\153\4\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\154\1\155\3\6\1\156\4\6\1\0"+
    "\7\6\1\0\3\6\40\0\1\157\17\0\1\160\10\0"+
    "\1\161\41\0\6\6\1\162\1\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\4\6\1\163\4\6\1\0"+
    "\3\6\1\164\3\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\6\1\165\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\11\6\1\0\2\6"+
    "\1\166\4\6\1\0\3\6\103\0\1\167\100\0\1\170"+
    "\1\171\1\172\103\0\1\173\73\0\1\174\100\0\1\175"+
    "\27\0\1\104\1\0\1\105\1\0\1\105\2\0\1\105"+
    "\36\0\1\105\32\0\1\176\1\0\1\176\43\0\1\176"+
    "\32\0\1\177\1\0\1\177\1\0\1\177\41\0\1\177"+
    "\32\0\5\200\1\0\2\200\3\0\1\200\4\0\1\200"+
    "\2\0\1\200\22\0\1\200\32\0\1\104\1\0\1\105"+
    "\1\0\1\105\2\0\1\105\3\0\1\201\32\0\1\105"+
    "\31\0\1\202\101\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\6\1\203\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\204\3\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\0"+
    "\4\6\1\205\4\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\206\6\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\207\3\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\210\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\211\6\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\1\6\1\212\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\213\1\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\5\6\1\214\3\6\1\0\7\6\1\0"+
    "\3\6\42\0\1\215\70\0\1\105\1\216\1\105\1\217"+
    "\1\105\1\220\1\0\1\105\3\0\1\201\32\0\1\105"+
    "\32\0\1\105\1\0\1\105\1\0\1\105\2\0\1\105"+
    "\3\0\1\201\32\0\1\105\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\3\6\1\221\3\6"+
    "\1\222\1\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\223\1\224"+
    "\10\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\225\1\226\1\227"+
    "\7\6\1\0\7\6\1\0\3\6\25\0\1\112\2\230"+
    "\1\231\57\112\1\231\15\112\2\115\1\0\76\115\5\0"+
    "\3\6\1\232\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\5\6\1\233\3\6\1\0\7\6\1\0"+
    "\3\6\75\0\2\234\34\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\0\7\6\1\234"+
    "\1\235\2\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\236\6\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\237\1\6\1\0\11\6\1\240\1\241\6\6"+
    "\1\0\3\6\53\0\2\242\56\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\242\1\243\10\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\1\6\1\244\7\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\7\6\1\245\1\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\246\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\51\0\1\247\120\0\1\250\101\0\1\251\40\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\1\252\1\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\0\3\6\1\253\3\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\0\4\6\1\254\2\6\1\0\3\6\32\0\1\6"+
    "\1\255\4\6\1\256\1\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\1\257"+
    "\1\6\1\0\11\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\260"+
    "\1\261\1\262\2\6\1\263\2\6\1\264\1\6\1\0"+
    "\5\6\1\265\1\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\266\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\4\6\1\267\2\6\1\270"+
    "\1\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\271\1\272\10\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\1\6\1\273\7\6"+
    "\1\0\7\6\1\0\3\6\32\0\3\6\1\274\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\275\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\10\6\1\276"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\3\6\1\277\5\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\300\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\45\0\1\301\65\0\10\6\1\0\1\6"+
    "\1\0\1\302\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\1\6\1\303\5\6\1\304\1\6"+
    "\1\0\7\6\1\0\3\6\53\0\2\305\12\0\1\306"+
    "\1\307\67\0\1\310\53\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\305\1\311\10\6\1\0\1\6"+
    "\1\312\1\313\4\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\3\6\1\314"+
    "\5\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\2\6\1\315"+
    "\6\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\316\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\111\0\1\317\21\0\1\176\1\0"+
    "\1\176\7\0\1\67\33\0\1\176\32\0\1\177\1\0"+
    "\1\177\1\0\1\177\5\0\1\67\33\0\1\177\32\0"+
    "\5\200\1\0\2\200\2\0\1\67\1\200\4\0\1\200"+
    "\2\0\1\200\22\0\1\200\31\0\1\320\1\321\1\0"+
    "\1\322\1\0\1\322\2\0\1\322\6\0\1\320\27\0"+
    "\1\322\100\0\1\323\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\324\1\325\10\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\6\1\326\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\11\6\1\0\1\6\1\327\5\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\330\6\6\1\0\7\6\1\0"+
    "\3\6\32\0\3\6\1\331\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\5\6\1\332\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\7\6\1\333\1\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\334\1\335\10\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\6\6\1\336\2\6\1\0\3\6\1\337\3\6"+
    "\1\0\3\6\32\0\1\340\1\0\1\340\43\0\1\340"+
    "\32\0\1\341\1\0\1\341\1\0\1\341\41\0\1\341"+
    "\32\0\5\342\1\0\2\342\3\0\1\342\4\0\1\342"+
    "\2\0\1\342\22\0\1\342\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\1\343\1\0\5\6\1\344"+
    "\3\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\345\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\45\0\1\346\65\0\10\6\1\0"+
    "\1\6\1\0\1\347\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\64\0\1\350\46\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\10\6\1\351"+
    "\1\0\7\6\1\0\3\6\26\0\3\230\15\0\1\112"+
    "\41\0\1\230\15\0\1\112\2\352\1\231\15\112\1\113"+
    "\1\114\40\112\1\231\15\112\5\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\1\353\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\3\6\1\354\5\6\1\0"+
    "\7\6\1\0\3\6\45\0\1\355\65\0\10\6\1\0"+
    "\1\6\1\0\1\356\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\5\6\1\357\3\6\1\0"+
    "\7\6\1\0\3\6\52\0\1\360\60\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\6\1\361\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\65\0\2\362\44\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\362\1\363\6\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\2\6\1\364"+
    "\6\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\4\6\1\365"+
    "\4\6\1\0\7\6\1\0\3\6\45\0\1\366\100\0"+
    "\1\367\113\0\1\370\52\0\10\6\1\0\1\6\1\0"+
    "\1\371\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\372\3\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\0"+
    "\4\6\1\373\4\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\0"+
    "\10\6\1\374\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\375\3\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\2\6\1\376\35\0\1\377\26\0\1\u0100\46\0"+
    "\3\6\1\u0101\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\10\6\1\u0102\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\u0103\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\6\1\u0104\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\2\6\1\u0105"+
    "\6\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\10\6\1\u0106"+
    "\1\0\7\6\1\0\3\6\32\0\3\6\1\u0107\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\u0108\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\u0109"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\61\0\1\u010a\51\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\5\6\1\u010b\3\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\u010c"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\11\6\1\0\6\6\1\u010d\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\u010e\3\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\u010f\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\4\6\1\u0110\4\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\u0111\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\11\6\1\u0112\1\u0113\6\6\1\0"+
    "\3\6\57\0\1\u0114\73\0\1\u0115\73\0\1\u0116\104\0"+
    "\1\u0117\61\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\3\6\1\u0118\5\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\1\6\1\u0119\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\u011a\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\u011b\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\11\6\1\u011c"+
    "\1\u011d\6\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\4\6\1\u011e\4\6"+
    "\1\0\7\6\1\0\3\6\32\0\1\321\1\0\1\322"+
    "\1\0\1\322\2\0\1\322\36\0\1\322\32\0\1\322"+
    "\1\u011f\1\322\1\u0120\1\322\1\u0121\1\0\1\322\36\0"+
    "\1\322\32\0\1\322\1\0\1\322\1\0\1\322\2\0"+
    "\1\322\36\0\1\322\45\0\1\u0122\106\0\2\u0123\56\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\u0123"+
    "\1\u0124\10\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\7\6"+
    "\1\u0125\1\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\u0126\3\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\u0127\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\u0128\1\u0129"+
    "\2\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\7\6\1\u012a\1\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\10\6\1\u012b\1\0\7\6\1\0\3\6"+
    "\45\0\1\u012c\65\0\10\6\1\0\1\6\1\0\1\u012d"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\u012e\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\1\340"+
    "\1\0\1\340\10\0\1\201\32\0\1\340\32\0\1\341"+
    "\1\0\1\341\1\0\1\341\6\0\1\201\32\0\1\341"+
    "\32\0\5\342\1\0\2\342\3\0\1\u012f\4\0\1\342"+
    "\2\0\1\342\22\0\1\342\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\4\6\1\u0130\4\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\2\6\1\u0131\6\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\2\6\1\u0132\6\6"+
    "\1\0\7\6\1\0\3\6\65\0\2\u0133\44\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\u0133\1\u0134\6\6\1\0\3\6\56\0\1\u0135\54\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\u0136\6\6\1\0\7\6\1\0\3\6\25\0"+
    "\1\112\3\352\15\112\1\u0137\1\114\40\112\1\352\15\112"+
    "\5\0\10\6\1\0\1\6\1\0\1\6\3\0\1\u0138"+
    "\1\6\1\0\11\6\1\0\7\6\1\0\3\6\32\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\2\6\1\u0139"+
    "\1\u013a\10\6\1\0\7\6\1\0\3\6\53\0\2\u013b"+
    "\56\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\u013b\1\u013c\10\6\1\0\7\6\1\0\3\6\72\0"+
    "\1\u013d\40\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\11\6\1\0\4\6\1\u013e\2\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\11\6\1\u013f\1\u0140\6\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\7\6\1\u0141\1\6\1\0\7\6\1\0\3\6"+
    "\35\0\1\u0142\115\0\1\u0143\60\0\3\6\1\u0144\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\1\u0145\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\0\4\6\1\u0146"+
    "\2\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\u0147\6\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\u0148\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\64\0\1\u0149\65\0\1\u014a\61\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\10\6\1\u014b"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\u014c\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\6\6\1\u014d\1\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\0\3\6\1\u014e"+
    "\3\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\0\6\6\1\u014f"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\11\6\1\u0150\1\u0151\6\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\10\6\1\u0152\1\0\7\6\1\0\3\6"+
    "\51\0\1\u0153\61\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\u0154\1\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\u0155\3\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\32\0"+
    "\6\6\1\u0156\1\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\51\0"+
    "\1\u0157\61\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\1\u0158\1\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\45\0\1\u0159\111\0\1\u015a\100\0\1\u015b\107\0\2\u015c"+
    "\44\0\10\6\1\0\1\6\1\0\1\u015d\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\u015e\6\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\u015f\6\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\11\6"+
    "\1\u015c\1\u0160\6\6\1\0\3\6\52\0\1\u0161\60\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\1\6\1\u0162"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\1\u0163"+
    "\1\0\1\u0163\43\0\1\u0163\32\0\1\u0164\1\0\1\u0164"+
    "\1\0\1\u0164\41\0\1\u0164\32\0\5\u0165\1\0\2\u0165"+
    "\3\0\1\u0165\4\0\1\u0165\2\0\1\u0165\22\0\1\u0165"+
    "\37\0\1\u0166\73\0\10\6\1\0\1\6\1\0\1\u0167"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\u0168\6\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\4\6\1\u0169\4\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\u016a\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\u016b\6\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\4\6"+
    "\1\u016c\4\6\1\0\7\6\1\0\3\6\31\0\1\320"+
    "\1\u016d\4\342\1\0\2\342\3\0\1\u012f\2\0\1\320"+
    "\1\0\1\342\2\0\1\342\22\0\1\342\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\1\6"+
    "\1\u016e\7\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\7\6"+
    "\1\u016f\1\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\4\6"+
    "\1\u0170\4\6\1\0\7\6\1\0\3\6\40\0\1\u0171"+
    "\72\0\6\6\1\u0172\1\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\45\0\1\u0173\65\0\10\6\1\0\1\6\1\0\1\u0174"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\25\0\1\112\2\352\1\231\15\112\1\u0137\41\112\1\231"+
    "\15\112\26\0\2\u0175\56\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\u0175\1\u0176\10\6\1\0\7\6"+
    "\1\0\3\6\60\0\1\u0177\52\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\4\6\1\u0178\4\6"+
    "\1\0\7\6\1\0\3\6\33\0\1\u0179\77\0\1\6"+
    "\1\u017a\6\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\63\0\1\u017b"+
    "\100\0\1\u017c\47\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\7\6\1\u017d\1\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\7\6\1\u017e\1\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\u017f\6\6\1\0\7\6"+
    "\1\0\3\6\32\0\5\6\1\u0180\2\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\45\0\1\u0181\116\0\1\u0182\47\0\10\6"+
    "\1\0\1\6\1\0\1\u0183\3\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\7\6\1\u0184\1\6"+
    "\1\0\7\6\1\0\3\6\32\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\11\6\1\u0185\1\u0186"+
    "\6\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\u0187\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\56\0\1\u0188\54\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\u0189\6\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\u018a\6\6\1\0"+
    "\7\6\1\0\3\6\45\0\1\u018b\65\0\10\6\1\0"+
    "\1\6\1\0\1\u018c\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\11\6\1\u018d\1\u018e\6\6"+
    "\1\0\3\6\35\0\1\u018f\130\0\2\u0190\77\0\2\u0191"+
    "\57\0\1\u0192\65\0\3\6\1\u0193\4\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\11\6\1\u0190\1\u0194\6\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\11\6\1\u0191\1\u0195\6\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\u0196\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\60\0\1\u0197"+
    "\52\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\4\6\1\u0198\4\6\1\0\7\6\1\0\3\6"+
    "\63\0\1\u0199\47\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\7\6\1\u019a\1\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\7\6\1\u019b\1\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\u019c\6\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\u019d"+
    "\3\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\32\0\5\342\1\u0121\2\342\3\0\1\u012f\4\0\1\342"+
    "\2\0\1\342\22\0\1\342\32\0\10\6\1\0\1\6"+
    "\1\0\1\u019e\3\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\32\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\6\1\u019f\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\64\0\1\u01a0\46\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\10\6\1\u01a1\1\0\7\6"+
    "\1\0\3\6\64\0\1\u01a2\46\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\10\6\1\u01a3\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\u01a4\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\32\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\7\6\1\u01a5\1\6\1\0\7\6\1\0"+
    "\3\6\60\0\1\u01a6\52\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\4\6\1\u01a7\4\6\1\0"+
    "\7\6\1\0\3\6\45\0\1\u01a8\65\0\10\6\1\0"+
    "\1\6\1\0\1\u01a9\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\u01aa\1\u01ab\10\6\1\0\7\6"+
    "\1\0\3\6\63\0\1\u01ac\47\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\2\6\1\0\7\6\1\u01ad\1\6"+
    "\1\0\7\6\1\0\3\6\60\0\1\u01ae\52\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\4\6"+
    "\1\u01af\4\6\1\0\7\6\1\0\3\6\63\0\1\u01b0"+
    "\67\0\1\u01b1\111\0\1\u01b2\70\0\2\u01b3\56\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\7\6"+
    "\1\u01b4\1\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\6\1\u01b5\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\7\6\1\u01b6"+
    "\1\6\1\0\7\6\1\0\3\6\32\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\u01b3\1\u01b7\10\6"+
    "\1\0\7\6\1\0\3\6\63\0\1\u01b8\47\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\7\6"+
    "\1\u01b9\1\6\1\0\7\6\1\0\3\6\45\0\1\u01ba"+
    "\65\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\4\6\1\u01bb\4\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\1\6\1\u01bc\7\6\1\0\7\6\1\0\3\6"+
    "\32\0\10\6\1\0\1\6\1\0\1\6\3\0\1\u01bd"+
    "\1\6\1\0\11\6\1\0\7\6\1\0\3\6\63\0"+
    "\1\u01be\47\0\10\6\1\0\1\6\1\0\1\6\3\0"+
    "\2\6\1\0\7\6\1\u01bf\1\6\1\0\7\6\1\0"+
    "\3\6\56\0\1\u01c0\54\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\u01c1\6\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\1\6\1\u01c2\7\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\u01c3\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\45\0\1\u01c4\65\0\10\6\1\0\1\6\1\0"+
    "\1\u01c5\3\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\61\0\1\u01c6\51\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\5\6\1\u01c7\3\6\1\0"+
    "\7\6\1\0\3\6\45\0\1\u01c8\65\0\10\6\1\0"+
    "\1\6\1\0\1\u01c9\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\45\0\1\u01ca\65\0\10\6\1\0"+
    "\1\6\1\0\1\u01cb\3\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\60\0\1\u01cc\52\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\0\4\6\1\u01cd"+
    "\4\6\1\0\7\6\1\0\3\6\56\0\1\u01ce\54\0"+
    "\10\6\1\0\1\6\1\0\1\6\3\0\1\6\1\u01cf"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\45\0\1\u01d0"+
    "\65\0\10\6\1\0\1\6\1\0\1\u01d1\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\45\0\1\u01d2"+
    "\65\0\10\6\1\0\1\6\1\0\1\u01d3\3\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\32\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\u01d4\6\6\1\0\7\6\1\0\3\6\56\0\1\u01d5"+
    "\54\0\10\6\1\0\1\6\1\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\u01d6\6\6\1\0\7\6\1\0\3\6"+
    "\63\0\1\u01d7\47\0\10\6\1\0\1\6\1\0\1\6"+
    "\3\0\2\6\1\0\7\6\1\u01d8\1\6\1\0\7\6"+
    "\1\0\3\6\60\0\1\u01d9\52\0\10\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\u01da\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\32\0\10\6\1\0\1\6\1\0"+
    "\1\6\3\0\2\6\1\0\4\6\1\u01db\4\6\1\0"+
    "\7\6\1\0\3\6\52\0\1\u01dc\60\0\10\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\6\1\u01dd\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\51\0\1\u01de\61\0\10\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\u01df\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23335];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\2\11\1\1\2\11\1\1\4\11"+
    "\2\1\7\11\4\0\1\1\1\0\12\1\1\0\2\1"+
    "\1\11\4\1\1\0\1\11\1\1\1\11\1\1\1\0"+
    "\10\1\3\0\20\1\1\0\2\1\1\11\2\0\5\1"+
    "\4\11\1\0\2\11\3\1\2\0\12\1\1\11\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\4\1\3\0\6\1\1\0"+
    "\10\1\1\0\7\1\1\11\3\1\4\0\6\1\1\11"+
    "\1\0\2\1\2\0\7\1\1\0\13\1\1\0\4\1"+
    "\1\11\2\1\1\0\1\1\1\0\3\1\1\0\1\11"+
    "\1\0\6\1\2\0\11\1\1\0\7\1\1\0\1\1"+
    "\4\0\4\1\1\0\2\1\4\0\1\11\4\1\1\11"+
    "\3\1\1\11\6\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\2\1\2\0"+
    "\5\1\2\0\5\1\1\0\2\1\1\0\3\1\1\11"+
    "\1\1\4\0\4\1\1\0\4\1\1\0\12\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\0\4\1\2\11\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\4\0\4\1"+
    "\1\0\1\1\1\0\6\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\2\11\4\1\1\11\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\3\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EiffelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EiffelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 107: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 108: break;
          case 3: 
            { return EiffelTypes.PLUS;
            }
          case 109: break;
          case 4: 
            { return EiffelTypes.INTEGER_LITERAL;
            }
          case 110: break;
          case 5: 
            { return EiffelTypes.IDENTIFIER;
            }
          case 111: break;
          case 6: 
            { return EiffelTypes.DOT;
            }
          case 112: break;
          case 7: 
            { return EiffelTypes.DQUOTE;
            }
          case 113: break;
          case 8: 
            { return EiffelTypes.MINUS;
            }
          case 114: break;
          case 9: 
            { return EiffelTypes.COLON;
            }
          case 115: break;
          case 10: 
            { return EiffelTypes.SEMICOLON;
            }
          case 116: break;
          case 11: 
            { return EiffelTypes.EQ;
            }
          case 117: break;
          case 12: 
            { return EiffelTypes.SLASH;
            }
          case 118: break;
          case 13: 
            { return EiffelTypes.TILDE;
            }
          case 119: break;
          case 14: 
            { return EiffelTypes.COMMA;
            }
          case 120: break;
          case 15: 
            { return EiffelTypes.LEFT_SQUARE_BRACKET;
            }
          case 121: break;
          case 16: 
            { return EiffelTypes.RIGHT_SQUARE_BRACKET;
            }
          case 122: break;
          case 17: 
            { return EiffelTypes.ASTERISK;
            }
          case 123: break;
          case 18: 
            { return EiffelTypes.DBACKSLASH;
            }
          case 124: break;
          case 19: 
            { return EiffelTypes.CARET;
            }
          case 125: break;
          case 20: 
            { return EiffelTypes.LT;
            }
          case 126: break;
          case 21: 
            { return EiffelTypes.GT;
            }
          case 127: break;
          case 22: 
            { return EiffelTypes.LEFT_CURLY_BRACKET;
            }
          case 128: break;
          case 23: 
            { return EiffelTypes.RIGHT_CURLY_BRACKET;
            }
          case 129: break;
          case 24: 
            { return EiffelTypes.LEFT_PAREN;
            }
          case 130: break;
          case 25: 
            { return EiffelTypes.RIGHT_PAREN;
            }
          case 131: break;
          case 26: 
            { return EiffelTypes.QUESTION;
            }
          case 132: break;
          case 27: 
            { return EiffelTypes.EXCLAMATION;
            }
          case 133: break;
          case 28: 
            { return EiffelTypes.DOLLAR;
            }
          case 134: break;
          case 29: 
            { return EiffelTypes.REAL_LITERAL;
            }
          case 135: break;
          case 30: 
            { return EiffelTypes.DDOT;
            }
          case 136: break;
          case 31: 
            { return EiffelTypes.STRING_LITERAL;
            }
          case 137: break;
          case 32: 
            { return EiffelTypes.COMMENT;
            }
          case 138: break;
          case 33: 
            { return EiffelTypes.ARROW;
            }
          case 139: break;
          case 34: 
            { return EiffelTypes.AS_KEYWORD;
            }
          case 140: break;
          case 35: 
            { return EiffelTypes.DO_KEYWORD;
            }
          case 141: break;
          case 36: 
            { return EiffelTypes.OR_KEYWORD;
            }
          case 142: break;
          case 37: 
            { return EiffelTypes.IF_KEYWORD;
            }
          case 143: break;
          case 38: 
            { return EiffelTypes.ASSIGN;
            }
          case 144: break;
          case 39: 
            { return EiffelTypes.NOT_EQ;
            }
          case 145: break;
          case 40: 
            { return EiffelTypes.DSLASH;
            }
          case 146: break;
          case 41: 
            { return EiffelTypes.NOT_TILDE;
            }
          case 147: break;
          case 42: 
            { return EiffelTypes.LTE;
            }
          case 148: break;
          case 43: 
            { return EiffelTypes.GTE;
            }
          case 149: break;
          case 44: 
            { return EiffelTypes.XOR_KEYWORD;
            }
          case 150: break;
          case 45: 
            { return EiffelTypes.CHARACTER_LITERAL;
            }
          case 151: break;
          case 46: 
            { return EiffelTypes.END_KEYWORD;
            }
          case 152: break;
          case 47: 
            { return EiffelTypes.ALL_KEYWORD;
            }
          case 153: break;
          case 48: 
            { return EiffelTypes.AND_KEYWORD;
            }
          case 154: break;
          case 49: 
            { return EiffelTypes.NOT_KEYWORD;
            }
          case 155: break;
          case 50: 
            { return EiffelTypes.OLD_KEYWORD;
            }
          case 156: break;
          case 51: 
            { return EiffelTypes.USE_KEYWORD;
            }
          case 157: break;
          case 52: 
            { return EiffelTypes.ALIAS_BRACKETS;
            }
          case 158: break;
          case 53: 
            { return EiffelTypes.FROM_KEYWORD;
            }
          case 159: break;
          case 54: 
            { return EiffelTypes.ELSE_KEYWORD;
            }
          case 160: break;
          case 55: 
            { return EiffelTypes.LOOP_KEYWORD;
            }
          case 161: break;
          case 56: 
            { return EiffelTypes.LIKE_KEYWORD;
            }
          case 162: break;
          case 57: 
            { return EiffelTypes.SOME_KEYWORD;
            }
          case 163: break;
          case 58: 
            { return EiffelTypes.NONE_KEYWORD;
            }
          case 164: break;
          case 59: 
            { return EiffelTypes.NOTE_KEYWORD;
            }
          case 165: break;
          case 60: 
            { return EiffelTypes.ONCE_KEYWORD;
            }
          case 166: break;
          case 61: 
            { return EiffelTypes.ONLY_KEYWORD;
            }
          case 167: break;
          case 62: 
            { return EiffelTypes.TRUE_KEYWORD;
            }
          case 168: break;
          case 63: 
            { return EiffelTypes.THEN_KEYWORD;
            }
          case 169: break;
          case 64: 
            { return EiffelTypes.WHEN_KEYWORD;
            }
          case 170: break;
          case 65: 
            { return EiffelTypes.CLASS_KEYWORD;
            }
          case 171: break;
          case 66: 
            { return EiffelTypes.CHECK_KEYWORD;
            }
          case 172: break;
          case 67: 
            { return EiffelTypes.FALSE_KEYWORD;
            }
          case 173: break;
          case 68: 
            { return EiffelTypes.LOCAL_KEYWORD;
            }
          case 174: break;
          case 69: 
            { return EiffelTypes.ALIAS_KEYWORD;
            }
          case 175: break;
          case 70: 
            { return EiffelTypes.AGENT_KEYWORD;
            }
          case 176: break;
          case 71: 
            { return EiffelTypes.DEBUG_KEYWORD;
            }
          case 177: break;
          case 72: 
            { return EiffelTypes.RETRY_KEYWORD;
            }
          case 178: break;
          case 73: 
            { return EiffelTypes.TUPLE_KEYWORD;
            }
          case 179: break;
          case 74: 
            { return EiffelTypes.UNTIL_KEYWORD;
            }
          case 180: break;
          case 75: 
            { return EiffelTypes.CREATE_KEYWORD;
            }
          case 181: break;
          case 76: 
            { return EiffelTypes.FROZEN_KEYWORD;
            }
          case 182: break;
          case 77: 
            { return EiffelTypes.EXPORT_KEYWORD;
            }
          case 183: break;
          case 78: 
            { return EiffelTypes.ELSEIF_KEYWORD;
            }
          case 184: break;
          case 79: 
            { return EiffelTypes.ENSURE_KEYWORD;
            }
          case 185: break;
          case 80: 
            { return EiffelTypes.ACROSS_KEYWORD;
            }
          case 186: break;
          case 81: 
            { return EiffelTypes.ASSIGN_KEYWORD;
            }
          case 187: break;
          case 82: 
            { return EiffelTypes.SELECT_KEYWORD;
            }
          case 188: break;
          case 83: 
            { return EiffelTypes.RESCUE_KEYWORD;
            }
          case 189: break;
          case 84: 
            { return EiffelTypes.RESULT_KEYWORD;
            }
          case 190: break;
          case 85: 
            { return EiffelTypes.RENAME_KEYWORD;
            }
          case 191: break;
          case 86: 
            { return EiffelTypes.CONVERT_KEYWORD;
            }
          case 192: break;
          case 87: 
            { return EiffelTypes.CURRENT_KEYWORD;
            }
          case 193: break;
          case 88: 
            { return EiffelTypes.FEATURE_KEYWORD;
            }
          case 194: break;
          case 89: 
            { return EiffelTypes.REQUIRE_KEYWORD;
            }
          case 195: break;
          case 90: 
            { return EiffelTypes.INSPECT_KEYWORD;
            }
          case 196: break;
          case 91: 
            { return EiffelTypes.INHERIT_KEYWORD;
            }
          case 197: break;
          case 92: 
            { return EiffelTypes.IMPLIES_KEYWORD;
            }
          case 198: break;
          case 93: 
            { return EiffelTypes.VARIANT_KEYWORD;
            }
          case 199: break;
          case 94: 
            { return EiffelTypes.EXPANDED_KEYWORD;
            }
          case 200: break;
          case 95: 
            { return EiffelTypes.EXTERNAL_KEYWORD;
            }
          case 201: break;
          case 96: 
            { return EiffelTypes.DEFERRED_KEYWORD;
            }
          case 202: break;
          case 97: 
            { return EiffelTypes.REDEFINE_KEYWORD;
            }
          case 203: break;
          case 98: 
            { return EiffelTypes.OBSOLETE_KEYWORD;
            }
          case 204: break;
          case 99: 
            { return EiffelTypes.UNDEFINE_KEYWORD;
            }
          case 205: break;
          case 100: 
            { return EiffelTypes.ATTRIBUTE_KEYWORD;
            }
          case 206: break;
          case 101: 
            { return EiffelTypes.SIGNATURE_KEYWORD;
            }
          case 207: break;
          case 102: 
            { return EiffelTypes.PRECURSOR_KEYWORD;
            }
          case 208: break;
          case 103: 
            { return EiffelTypes.INVARIANT_KEYWORD;
            }
          case 209: break;
          case 104: 
            { return EiffelTypes.C_EXTERNAL_KEYWORD;
            }
          case 210: break;
          case 105: 
            { return EiffelTypes.CPP_EXTERNAL_KEYWORD;
            }
          case 211: break;
          case 106: 
            { return EiffelTypes.DLL_EXTERNAL_KEYWORD;
            }
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
