/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.eiffel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import com.eiffel.psi.EiffelTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Eiffel.flex</tt>
 */
public class EiffelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\124\3\1\6\45\3\1\7\1\10\2\3\1\11\73\3\1\6\277\3");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\57\1\22\1\0\1\73\1\21\1\24\1\15\1\67\1\70"+
    "\1\24\1\4\1\64\1\23\1\17\1\24\1\5\1\7\6\11\2\14\1\62\1\63\1\61\1\25\1\60\1"+
    "\56\1\0\1\27\1\6\1\10\1\32\1\20\1\13\1\47\1\45\1\43\1\16\1\53\1\26\1\46\1"+
    "\35\1\36\1\34\1\50\1\33\1\31\1\40\1\41\1\44\1\54\1\12\1\51\1\37\1\71\1\24"+
    "\1\72\1\24\1\55\1\0\1\27\1\6\1\10\1\32\1\20\1\13\1\47\1\45\1\43\1\16\1\53"+
    "\1\26\1\46\1\35\1\36\1\34\1\50\1\33\1\31\1\40\1\41\1\44\1\54\1\12\1\51\1\37"+
    "\1\65\1\24\1\66\1\24\6\0\1\1\32\0\1\3\217\0\2\42\115\0\1\30\1\3\77\0\13\3"+
    "\35\0\2\1\5\0\1\3\57\0\1\3\112\0\1\52\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\3\5"+
    "\1\1\1\6\1\5\1\3\1\7\1\3\1\10\2\5"+
    "\1\1\10\5\1\1\3\5\1\11\1\12\2\3\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\3\3\0\1\25\1\0\12\5\1\0\2\25"+
    "\3\5\1\26\1\0\1\26\1\27\1\30\1\5\1\0"+
    "\3\5\2\31\3\5\3\0\5\5\1\32\5\5\1\33"+
    "\4\5\1\0\2\5\1\34\2\0\1\34\4\5\1\35"+
    "\1\36\1\37\3\4\2\0\6\5\1\40\3\5\1\41"+
    "\3\0\2\5\1\0\1\5\1\0\1\5\1\42\1\0"+
    "\1\26\2\5\1\0\2\5\1\43\1\0\1\5\1\0"+
    "\1\5\1\44\2\5\3\0\6\5\1\0\7\5\1\45"+
    "\1\0\1\5\1\46\5\5\2\47\2\5\4\0\6\5"+
    "\1\0\2\25\2\0\7\5\1\0\2\5\1\50\3\25"+
    "\3\5\2\51\1\0\1\5\1\26\1\5\1\52\2\53"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\1\54\1\0"+
    "\1\5\1\54\4\5\2\0\7\5\1\55\1\56\1\0"+
    "\1\5\1\57\1\60\1\61\1\5\1\62\1\5\1\0"+
    "\1\5\4\0\4\5\1\0\1\5\1\63\4\0\2\64"+
    "\3\5\2\65\2\5\2\66\1\5\1\25\3\5\1\0"+
    "\1\5\1\0\1\5\1\26\1\67\1\0\1\5\2\70"+
    "\1\0\2\5\1\0\1\5\1\71\2\0\2\5\1\72"+
    "\2\5\2\0\4\5\1\73\1\0\2\5\1\0\1\5"+
    "\1\74\1\5\2\75\4\0\4\5\1\0\1\5\3\25"+
    "\1\0\1\76\4\5\1\77\1\25\1\5\1\100\1\5"+
    "\2\101\2\102\2\103\2\104\1\5\1\0\1\5\1\105"+
    "\1\0\1\105\3\5\1\106\1\107\1\106\1\107\1\0"+
    "\1\5\1\110\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\4\0\4\5\1\0\1\5\1\0\1\111\1\112\1\5"+
    "\1\113\3\5\1\0\1\5\1\0\3\5\1\0\1\5"+
    "\2\114\1\0\1\5\1\0\1\5\1\0\1\5\1\115"+
    "\1\0\1\116\1\117\1\115\1\5\1\116\1\117\2\120"+
    "\1\0\1\5\1\121\1\122\1\123\1\0\1\5\1\0"+
    "\1\5\1\124\1\5\2\125\1\0\1\5\2\126\2\127"+
    "\1\0\1\5\1\0\1\5\2\130\2\131\1\5\2\132"+
    "\2\133\1\0\1\134\1\5\1\0\1\5\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u030c\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u030c\0\u030c\0\u0744\0\u0780\0\u07bc\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u0294\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0348\0\u0ce4\0\74\0\u0d20"+
    "\0\u030c\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u012c\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u012c\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\74\0\u1464\0\u14a0\0\u012c\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u030c\0\u030c\0\74\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u012c"+
    "\0\u1860\0\u189c\0\u18d8\0\74\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u012c\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u012c\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u012c\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\u22b0\0\u012c\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\74"+
    "\0\u012c\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940"+
    "\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u012c\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4"+
    "\0\u2d00\0\u012c\0\74\0\u012c\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\74\0\u2f58\0\u2f94"+
    "\0\u012c\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u012c\0\u012c"+
    "\0\u32dc\0\u3318\0\u012c\0\u012c\0\u012c\0\u3354\0\u012c\0\u3390"+
    "\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570"+
    "\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u012c\0\u369c\0\u36d8\0\u3714"+
    "\0\u3750\0\74\0\u012c\0\u378c\0\u37c8\0\u3804\0\74\0\u012c"+
    "\0\u3840\0\u387c\0\74\0\u012c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u012c\0\u3b10"+
    "\0\u3b4c\0\74\0\u012c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78"+
    "\0\u012c\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u012c\0\u3da4\0\u3de0"+
    "\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u012c\0\u3f84"+
    "\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u012c\0\u40b0\0\74\0\u012c"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u369c\0\u36d8\0\u3714\0\u4344\0\u012c\0\u4380"+
    "\0\u43bc\0\u43f8\0\u4434\0\u012c\0\u4470\0\u44ac\0\u012c\0\u44e8"+
    "\0\74\0\u012c\0\74\0\u012c\0\74\0\u012c\0\74\0\u012c"+
    "\0\u4524\0\u4560\0\u459c\0\74\0\u45d8\0\u012c\0\u4614\0\u4650"+
    "\0\u468c\0\74\0\74\0\u012c\0\u012c\0\u46c8\0\u4704\0\u012c"+
    "\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4"+
    "\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4"+
    "\0\u4b00\0\u4b3c\0\u012c\0\u012c\0\u4b78\0\u012c\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\74\0\u012c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74\0\74\0\u4fb0\0\74\0\74\0\u012c\0\u4fec\0\u012c"+
    "\0\u012c\0\74\0\u012c\0\u5028\0\u5064\0\u012c\0\u012c\0\u012c"+
    "\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u012c\0\u5190\0\74\0\u012c"+
    "\0\u51cc\0\u5208\0\74\0\u012c\0\74\0\u012c\0\u5244\0\u5280"+
    "\0\u52bc\0\u52f8\0\74\0\u012c\0\74\0\u012c\0\u5334\0\74"+
    "\0\u012c\0\74\0\u012c\0\u5370\0\u012c\0\u53ac\0\u53e8\0\u5424"+
    "\0\74\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\7\1\13\1\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\16\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\6\1\33\1\34"+
    "\1\35\1\36\1\37\5\6\1\2\1\6\1\40\1\7"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\75\0\3\3"+
    "\74\0\1\16\1\5\1\0\1\7\1\0\1\7\2\0"+
    "\1\7\2\0\1\57\1\0\1\16\1\0\3\16\27\0"+
    "\1\7\4\16\17\0\1\7\1\60\1\7\1\61\1\7"+
    "\1\62\1\0\1\7\2\0\1\63\35\0\1\7\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\1\7\2\0\1\63\35\0"+
    "\1\7\22\0\1\64\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\65\1\6\1\0\2\6\1\66\2\6\1\67"+
    "\2\6\1\70\1\0\2\6\1\71\4\6\1\0\2\6"+
    "\1\72\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\5\6\1\73\3\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\74\5\0"+
    "\1\6\1\75\1\0\2\6\1\76\6\6\1\0\7\6"+
    "\1\0\3\6\16\0\1\77\2\0\71\77\4\0\1\16"+
    "\1\100\1\0\1\101\1\0\1\101\2\0\1\101\2\0"+
    "\1\16\1\0\1\16\1\0\3\16\27\0\1\101\4\16"+
    "\17\0\5\6\1\102\2\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\103\1\6\1\0\4\6\1\104\4\6\1\0"+
    "\7\6\1\0\3\6\22\0\1\16\12\0\1\16\1\0"+
    "\1\16\1\0\3\16\30\0\4\16\12\0\21\105\1\106"+
    "\1\107\51\105\4\0\1\16\1\5\1\0\1\7\1\0"+
    "\1\7\2\0\1\7\2\0\1\57\1\0\1\16\1\0"+
    "\1\110\2\16\27\0\1\7\2\16\1\111\1\16\17\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\5\6\1\112\3\6\1\113\1\114\6\6\1\0\3\6"+
    "\23\0\3\6\1\115\4\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\116\1\6\1\117\1\120\3\6\1\121\2\6"+
    "\1\122\1\6\1\0\4\6\1\123\2\6\1\0\3\6"+
    "\36\0\1\124\15\0\1\125\3\0\2\126\35\0\10\6"+
    "\1\0\1\6\1\0\1\127\5\0\2\6\1\0\5\6"+
    "\1\130\3\6\1\126\1\131\6\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\132\5\0\1\133\1\6"+
    "\1\0\5\6\1\134\3\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\135\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\136\6\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\5\6"+
    "\1\137\3\6\1\0\7\6\1\0\3\6\23\0\1\6"+
    "\1\140\6\6\1\0\1\6\1\0\1\6\5\0\1\141"+
    "\1\6\1\0\2\6\1\142\1\6\1\143\4\6\1\0"+
    "\7\6\1\0\3\6\23\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\2\6\1\144\5\6\1\145"+
    "\1\0\2\6\1\146\4\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\147\1\150"+
    "\3\6\1\151\4\6\1\0\7\6\1\0\3\6\31\0"+
    "\1\152\21\0\1\153\10\0\1\154\32\0\6\6\1\155"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\4\6\1\156\4\6\1\0\3\6\1\157\3\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\160\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\2\6\1\161\4\6\1\0\3\6"+
    "\22\0\1\16\12\0\1\16\1\0\1\16\1\0\3\16"+
    "\30\0\2\16\1\162\1\16\16\0\1\16\12\0\1\16"+
    "\1\0\1\16\1\0\3\16\30\0\3\16\1\163\37\0"+
    "\1\164\53\0\1\165\1\0\1\165\45\0\1\165\23\0"+
    "\1\166\1\0\1\166\1\0\1\166\43\0\1\166\23\0"+
    "\5\167\1\0\2\167\3\0\1\167\6\0\1\167\2\0"+
    "\1\167\22\0\1\167\23\0\1\100\1\0\1\101\1\0"+
    "\1\101\2\0\1\101\3\0\1\170\34\0\1\101\22\0"+
    "\1\171\74\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\172\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\173\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\4\6"+
    "\1\174\4\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\175\6\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\176\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\177\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\2\6\1\200\6\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\6\1\201\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\202\1\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\5\6\1\203\3\6\1\0\7\6\1\0\3\6"+
    "\33\0\1\204\63\0\1\101\1\205\1\101\1\206\1\101"+
    "\1\207\1\0\1\101\3\0\1\170\34\0\1\101\23\0"+
    "\1\101\1\0\1\101\1\0\1\101\2\0\1\101\3\0"+
    "\1\170\34\0\1\101\23\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\3\6\1\210\3\6\1\211"+
    "\1\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\212\1\213\10\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\214\1\215\1\216\7\6"+
    "\1\0\7\6\1\0\3\6\16\0\1\105\2\217\1\220"+
    "\70\105\2\110\1\0\71\110\5\0\3\6\1\221\4\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\5\6"+
    "\1\222\3\6\1\0\7\6\1\0\3\6\70\0\2\223"+
    "\25\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\223\1\224\2\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\2\6\1\225\6\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\226\1\6"+
    "\1\0\11\6\1\227\1\230\6\6\1\0\3\6\46\0"+
    "\2\231\47\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\231\1\232\10\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\1\6\1\233\7\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\7\6\1\234\1\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\235\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\44\0\1\236"+
    "\113\0\1\237\74\0\1\240\31\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\241\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\23\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\3\6\1\242"+
    "\3\6\1\0\3\6\23\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\4\6\1\243"+
    "\2\6\1\0\3\6\23\0\1\6\1\244\4\6\1\245"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\246\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\247\1\250\1\251\2\6"+
    "\1\252\2\6\1\253\1\6\1\0\5\6\1\254\1\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\255"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\4\6\1\256\2\6\1\257\1\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\260\1\261\10\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\1\6\1\262\7\6\1\0\7\6\1\0"+
    "\3\6\23\0\3\6\1\263\4\6\1\0\1\6\1\0"+
    "\1\6\5\0\1\264\1\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\10\6\1\265\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\3\6\1\266\5\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\267\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\36\0"+
    "\1\270\60\0\10\6\1\0\1\6\1\0\1\271\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\1\6\1\272\5\6\1\273\1\6\1\0\7\6\1\0"+
    "\3\6\46\0\2\274\12\0\1\275\1\276\62\0\1\277"+
    "\44\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\274\1\300\10\6\1\0\1\6\1\301\1\302\4\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\3\6\1\303\5\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\2\6\1\304\6\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\305"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\1\165\1\0\1\165\7\0\1\63\35\0\1\165"+
    "\23\0\1\166\1\0\1\166\1\0\1\166\5\0\1\63"+
    "\35\0\1\166\23\0\5\167\1\0\2\167\2\0\1\63"+
    "\1\167\6\0\1\167\2\0\1\167\22\0\1\167\22\0"+
    "\1\306\1\307\1\0\1\310\1\0\1\310\2\0\1\310"+
    "\6\0\1\306\31\0\1\310\73\0\1\311\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\312\1\313"+
    "\10\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\6\1\314\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\0\1\6"+
    "\1\315\5\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\316\6\6"+
    "\1\0\7\6\1\0\3\6\23\0\3\6\1\317\4\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\5\6\1\320\2\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\7\6\1\321\1\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\322\1\323\10\6\1\0"+
    "\7\6\1\0\3\6\23\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\6\6\1\324\2\6\1\0"+
    "\3\6\1\325\3\6\1\0\3\6\23\0\1\326\1\0"+
    "\1\326\45\0\1\326\23\0\1\327\1\0\1\327\1\0"+
    "\1\327\43\0\1\327\23\0\5\330\1\0\2\330\3\0"+
    "\1\330\6\0\1\330\2\0\1\330\22\0\1\330\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\6\1\331"+
    "\1\0\5\6\1\332\3\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\333\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\36\0\1\334"+
    "\60\0\10\6\1\0\1\6\1\0\1\335\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\57\0\1\336"+
    "\37\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\10\6\1\337\1\0\7\6\1\0\3\6\17\0"+
    "\3\217\15\0\1\105\52\0\1\105\2\340\1\220\15\105"+
    "\1\106\1\107\51\105\5\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\1\6\1\341\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\3\6\1\342\5\6\1\0\7\6"+
    "\1\0\3\6\36\0\1\343\60\0\10\6\1\0\1\6"+
    "\1\0\1\344\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\5\6\1\345\3\6\1\0\7\6"+
    "\1\0\3\6\45\0\1\346\51\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\6\1\347\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\60\0\2\350\35\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\350"+
    "\1\351\6\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\6\1\352\1\0\2\6\1\353"+
    "\6\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\4\6\1\354"+
    "\4\6\1\0\7\6\1\0\3\6\36\0\1\355\73\0"+
    "\1\356\110\0\1\357\43\0\10\6\1\0\1\6\1\0"+
    "\1\360\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\361\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\4\6\1\362\4\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\10\6\1\363\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\364\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\2\6\1\365\26\0\1\366\30\0\1\367\37\0"+
    "\3\6\1\370\4\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\10\6\1\371\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\372\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\6\1\373\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\2\6\1\374"+
    "\6\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\10\6\1\375"+
    "\1\0\7\6\1\0\3\6\23\0\3\6\1\376\4\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\377\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\u0100"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\54\0\1\u0101\42\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\5\6\1\u0102\3\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\u0103"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\6\6\1\u0104\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\u0105\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\u0106\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u0107\4\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\u0108\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\11\6\1\u0109\1\u010a\6\6\1\0"+
    "\3\6\52\0\1\u010b\66\0\1\u010c\64\0\1\u010d\101\0"+
    "\1\u010e\52\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\3\6\1\u010f\5\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\u0110\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\u0111\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\u0112\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\u0113"+
    "\1\u0114\6\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u0115\4\6"+
    "\1\0\7\6\1\0\3\6\23\0\1\307\1\0\1\310"+
    "\1\0\1\310\2\0\1\310\40\0\1\310\23\0\1\310"+
    "\1\u0116\1\310\1\u0117\1\310\1\u0118\1\0\1\310\40\0"+
    "\1\310\23\0\1\310\1\0\1\310\1\0\1\310\2\0"+
    "\1\310\40\0\1\310\36\0\1\u0119\103\0\2\u011a\47\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\u011a"+
    "\1\u011b\10\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u011c\1\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\u011d\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\u011e\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\u011f\1\u0120"+
    "\2\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\7\6\1\u0121\1\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\10\6\1\u0122\1\0\7\6\1\0\3\6"+
    "\36\0\1\u0123\60\0\10\6\1\0\1\6\1\0\1\u0124"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\u0125\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\1\326"+
    "\1\0\1\326\10\0\1\170\34\0\1\326\23\0\1\327"+
    "\1\0\1\327\1\0\1\327\6\0\1\170\34\0\1\327"+
    "\23\0\5\330\1\0\2\330\3\0\1\u0126\6\0\1\330"+
    "\2\0\1\330\22\0\1\330\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u0127\4\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\u0128\6\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\u0129\6\6"+
    "\1\0\7\6\1\0\3\6\60\0\2\u012a\35\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\u012a\1\u012b\6\6\1\0\3\6\51\0\1\u012c\45\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\2\6\1\u012d\6\6\1\0\7\6\1\0\3\6\16\0"+
    "\1\105\3\340\15\105\1\u012e\1\107\51\105\5\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\u012f\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\u0130\1\u0131\10\6"+
    "\1\0\7\6\1\0\3\6\46\0\2\u0132\47\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\u0132\1\u0133"+
    "\10\6\1\0\7\6\1\0\3\6\65\0\1\u0134\31\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\4\6\1\u0135\2\6\1\0\3\6\23\0"+
    "\3\6\1\u0136\4\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\u0137\1\u0138\6\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u0139\1\6\1\0\7\6\1\0\3\6\26\0\1\u013a"+
    "\112\0\1\u013b\51\0\3\6\1\u013c\4\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\6\1\u013d\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\11\6\1\0\4\6\1\u013e\2\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\2\6\1\u013f\6\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\u0140\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\57\0"+
    "\1\u0141\60\0\1\u0142\52\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\10\6\1\u0143\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\u0144\1\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\23\0\6\6\1\u0145\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\11\6\1\0\3\6\1\u0146\3\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\11\6\1\0\6\6\1\u0147\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\u0148\1\u0149\6\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\10\6\1\u014a\1\0\7\6\1\0\3\6\44\0\1\u014b"+
    "\52\0\10\6\1\0\1\6\1\0\1\6\5\0\1\u014c"+
    "\1\6\1\0\11\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\u014d\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\6\6\1\u014e"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\44\0\1\u014f\52\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\u0150\1\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\36\0\1\u0151"+
    "\106\0\1\u0152\73\0\1\u0153\102\0\2\u0154\35\0\10\6"+
    "\1\0\1\6\1\0\1\u0155\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\u0156\6\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\u0157\6\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\u0154\1\u0158"+
    "\6\6\1\0\3\6\45\0\1\u0159\51\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\1\6\1\u015a\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\1\u015b\1\0\1\u015b"+
    "\45\0\1\u015b\23\0\1\u015c\1\0\1\u015c\1\0\1\u015c"+
    "\43\0\1\u015c\23\0\5\u015d\1\0\2\u015d\3\0\1\u015d"+
    "\6\0\1\u015d\2\0\1\u015d\22\0\1\u015d\30\0\1\u015e"+
    "\66\0\10\6\1\0\1\6\1\0\1\u015f\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\u0160\6\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\4\6"+
    "\1\u0161\4\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\u0162\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\2\6\1\u0163\6\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u0164\4\6"+
    "\1\0\7\6\1\0\3\6\22\0\1\306\1\u0165\4\330"+
    "\1\0\2\330\3\0\1\u0126\2\0\1\306\3\0\1\330"+
    "\2\0\1\330\22\0\1\330\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\1\6\1\u0166\7\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\7\6\1\u0167\1\6"+
    "\1\0\7\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u0168\4\6"+
    "\1\0\7\6\1\0\3\6\31\0\1\u0169\65\0\6\6"+
    "\1\u016a\1\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\36\0\1\u016b"+
    "\60\0\10\6\1\0\1\6\1\0\1\u016c\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\16\0\1\105"+
    "\2\340\1\220\15\105\1\u012e\52\105\30\0\2\u016d\47\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\u016d"+
    "\1\u016e\10\6\1\0\7\6\1\0\3\6\53\0\1\u016f"+
    "\43\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\4\6\1\u0170\4\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\2\6\1\u0171\4\6\1\0\3\6"+
    "\24\0\1\u0172\72\0\1\6\1\u0173\6\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\56\0\1\u0174\73\0\1\u0175\40\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u0176\1\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u0177\1\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\u0178\6\6\1\0\7\6\1\0\3\6\23\0\5\6"+
    "\1\u0179\2\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\36\0\1\u017a"+
    "\113\0\1\u017b\40\0\10\6\1\0\1\6\1\0\1\u017c"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\7\6\1\u017d\1\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\u017e\1\u017f\6\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\u0180\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\51\0\1\u0181\45\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\2\6\1\u0182\6\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\2\6\1\u0183\6\6\1\0\7\6\1\0\3\6\36\0"+
    "\1\u0184\60\0\10\6\1\0\1\6\1\0\1\u0185\5\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\11\6\1\u0186\1\u0187\6\6\1\0\3\6\26\0\1\u0188"+
    "\125\0\2\u0189\72\0\2\u018a\50\0\1\u018b\60\0\3\6"+
    "\1\u018c\4\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\11\6"+
    "\1\u0189\1\u018d\6\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\11\6\1\u018a"+
    "\1\u018e\6\6\1\0\3\6\23\0\10\6\1\0\1\6"+
    "\1\0\1\u018f\5\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\53\0\1\u0190\43\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\4\6\1\u0191\4\6"+
    "\1\0\7\6\1\0\3\6\56\0\1\u0192\40\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u0193\1\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u0194\1\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\2\6"+
    "\1\u0195\6\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\u0196\5\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\23\0\5\330\1\u0118\2\330"+
    "\3\0\1\u0126\6\0\1\330\2\0\1\330\22\0\1\330"+
    "\23\0\10\6\1\0\1\6\1\0\1\u0197\5\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\23\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\6\1\u0198\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\u0199\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\57\0\1\u019a\37\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\10\6\1\u019b"+
    "\1\0\7\6\1\0\3\6\57\0\1\u019c\37\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\10\6"+
    "\1\u019d\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\u019e\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\23\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\7\6\1\u019f\1\6\1\0"+
    "\7\6\1\0\3\6\53\0\1\u01a0\43\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\4\6\1\u01a1"+
    "\4\6\1\0\7\6\1\0\3\6\36\0\1\u01a2\60\0"+
    "\10\6\1\0\1\6\1\0\1\u01a3\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\u01a4\1\u01a5\10\6"+
    "\1\0\7\6\1\0\3\6\56\0\1\u01a6\40\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\2\6\1\0\7\6"+
    "\1\u01a7\1\6\1\0\7\6\1\0\3\6\53\0\1\u01a8"+
    "\43\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\4\6\1\u01a9\4\6\1\0\7\6\1\0\3\6"+
    "\56\0\1\u01aa\62\0\1\u01ab\104\0\1\u01ac\63\0\2\u01ad"+
    "\47\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\7\6\1\u01ae\1\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\1\6"+
    "\1\u01af\1\0\11\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\7\6\1\u01b0\1\6\1\0\7\6\1\0\3\6\23\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\u01ad"+
    "\1\u01b1\10\6\1\0\7\6\1\0\3\6\56\0\1\u01b2"+
    "\40\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\7\6\1\u01b3\1\6\1\0\7\6\1\0\3\6"+
    "\36\0\1\u01b4\60\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\4\6\1\u01b5\4\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\1\6\1\u01b6\7\6\1\0\7\6"+
    "\1\0\3\6\23\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\1\u01b7\1\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\23\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\2\6\1\0\1\6\1\u01b8\7\6\1\0\7\6\1\0"+
    "\3\6\56\0\1\u01b9\40\0\10\6\1\0\1\6\1\0"+
    "\1\6\5\0\2\6\1\0\7\6\1\u01ba\1\6\1\0"+
    "\7\6\1\0\3\6\51\0\1\u01bb\45\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\2\6\1\u01bc"+
    "\6\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\1\6\1\u01bd"+
    "\7\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\u01be\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\36\0\1\u01bf\60\0\10\6\1\0"+
    "\1\6\1\0\1\u01c0\5\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\54\0\1\u01c1\42\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\5\6\1\u01c2"+
    "\3\6\1\0\7\6\1\0\3\6\36\0\1\u01c3\60\0"+
    "\10\6\1\0\1\6\1\0\1\u01c4\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\36\0\1\u01c5\60\0"+
    "\10\6\1\0\1\6\1\0\1\u01c6\5\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\53\0\1\u01c7\43\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\2\6\1\0"+
    "\4\6\1\u01c8\4\6\1\0\7\6\1\0\3\6\51\0"+
    "\1\u01c9\45\0\10\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\6\1\u01ca\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\36\0\1\u01cb\60\0\10\6\1\0\1\6\1\0\1\u01cc"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\36\0\1\u01cd\60\0\10\6\1\0\1\6\1\0\1\u01ce"+
    "\5\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\23\0\10\6\1\0\1\6\1\0\1\6\5\0\2\6"+
    "\1\0\2\6\1\u01cf\6\6\1\0\7\6\1\0\3\6"+
    "\51\0\1\u01d0\45\0\10\6\1\0\1\6\1\0\1\6"+
    "\5\0\2\6\1\0\2\6\1\u01d1\6\6\1\0\7\6"+
    "\1\0\3\6\56\0\1\u01d2\40\0\10\6\1\0\1\6"+
    "\1\0\1\6\5\0\2\6\1\0\7\6\1\u01d3\1\6"+
    "\1\0\7\6\1\0\3\6\53\0\1\u01d4\43\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\u01d5\1\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\23\0\10\6\1\0"+
    "\1\6\1\0\1\6\5\0\2\6\1\0\4\6\1\u01d6"+
    "\4\6\1\0\7\6\1\0\3\6\45\0\1\u01d7\51\0"+
    "\10\6\1\0\1\6\1\0\1\6\5\0\1\6\1\u01d8"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\44\0\1\u01d9"+
    "\52\0\10\6\1\0\1\6\1\0\1\6\5\0\1\u01da"+
    "\1\6\1\0\11\6\1\0\7\6\1\0\3\6\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\43\1\11\11\1\1\3\0\1\1\1\0"+
    "\12\1\1\0\6\1\1\0\1\11\3\1\1\0\10\1"+
    "\3\0\20\1\1\0\2\1\1\11\2\0\7\1\1\11"+
    "\3\1\2\0\12\1\1\11\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\4\1\3\0\6\1\1\0\10\1\1\0\7\1"+
    "\1\11\3\1\4\0\6\1\1\0\2\1\2\0\7\1"+
    "\1\0\13\1\1\0\4\1\1\11\2\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\11\1\0\6\1\2\0\11\1"+
    "\1\0\7\1\1\0\1\1\4\0\4\1\1\0\2\1"+
    "\4\0\1\11\4\1\1\11\3\1\1\11\6\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\2\0\5\1\2\0\5\1\1\0"+
    "\2\1\1\0\3\1\1\11\1\1\4\0\4\1\1\0"+
    "\4\1\1\0\12\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\1\0\4\1"+
    "\2\11\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\4\0\4\1\1\0\1\1\1\0\7\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\4\1\1\11\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EiffelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EiffelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 95: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 96: break;
          case 3: 
            { return EiffelTypes.FREE_OPERATOR;
            }
          case 97: break;
          case 4: 
            { return EiffelTypes.INTEGER_LITERAL;
            }
          case 98: break;
          case 5: 
            { return EiffelTypes.IDENTIFIER;
            }
          case 99: break;
          case 6: 
            { return EiffelTypes.DOT;
            }
          case 100: break;
          case 7: 
            { return EiffelTypes.DQUOTE;
            }
          case 101: break;
          case 8: 
            { return EiffelTypes.EQ;
            }
          case 102: break;
          case 9: 
            { return EiffelTypes.QUESTION;
            }
          case 103: break;
          case 10: 
            { return EiffelTypes.EXCLAMATION;
            }
          case 104: break;
          case 11: 
            { return EiffelTypes.COLON;
            }
          case 105: break;
          case 12: 
            { return EiffelTypes.SEMICOLON;
            }
          case 106: break;
          case 13: 
            { return EiffelTypes.COMMA;
            }
          case 107: break;
          case 14: 
            { return EiffelTypes.LEFT_CURLY_BRACKET;
            }
          case 108: break;
          case 15: 
            { return EiffelTypes.RIGHT_CURLY_BRACKET;
            }
          case 109: break;
          case 16: 
            { return EiffelTypes.LEFT_PAREN;
            }
          case 110: break;
          case 17: 
            { return EiffelTypes.RIGHT_PAREN;
            }
          case 111: break;
          case 18: 
            { return EiffelTypes.LEFT_SQUARE_BRACKET;
            }
          case 112: break;
          case 19: 
            { return EiffelTypes.RIGHT_SQUARE_BRACKET;
            }
          case 113: break;
          case 20: 
            { return EiffelTypes.DOLLAR;
            }
          case 114: break;
          case 21: 
            { return EiffelTypes.REAL_LITERAL;
            }
          case 115: break;
          case 22: 
            { return EiffelTypes.STRING_LITERAL;
            }
          case 116: break;
          case 23: 
            { return EiffelTypes.COMMENT;
            }
          case 117: break;
          case 24: 
            { return EiffelTypes.ARROW;
            }
          case 118: break;
          case 25: 
            { return EiffelTypes.AS_KEYWORD;
            }
          case 119: break;
          case 26: 
            { return EiffelTypes.DO_KEYWORD;
            }
          case 120: break;
          case 27: 
            { return EiffelTypes.OR_KEYWORD;
            }
          case 121: break;
          case 28: 
            { return EiffelTypes.IF_KEYWORD;
            }
          case 122: break;
          case 29: 
            { return EiffelTypes.RIGHT_TRIANGLE_DBRACKET;
            }
          case 123: break;
          case 30: 
            { return EiffelTypes.LEFT_TRIANGLE_DBRACKET;
            }
          case 124: break;
          case 31: 
            { return EiffelTypes.ASSIGN;
            }
          case 125: break;
          case 32: 
            { return EiffelTypes.XOR_KEYWORD;
            }
          case 126: break;
          case 33: 
            { return EiffelTypes.CHARACTER_LITERAL;
            }
          case 127: break;
          case 34: 
            { return EiffelTypes.END_KEYWORD;
            }
          case 128: break;
          case 35: 
            { return EiffelTypes.ALL_KEYWORD;
            }
          case 129: break;
          case 36: 
            { return EiffelTypes.AND_KEYWORD;
            }
          case 130: break;
          case 37: 
            { return EiffelTypes.NOT_KEYWORD;
            }
          case 131: break;
          case 38: 
            { return EiffelTypes.OLD_KEYWORD;
            }
          case 132: break;
          case 39: 
            { return EiffelTypes.USE_KEYWORD;
            }
          case 133: break;
          case 40: 
            { return EiffelTypes.FROM_KEYWORD;
            }
          case 134: break;
          case 41: 
            { return EiffelTypes.ELSE_KEYWORD;
            }
          case 135: break;
          case 42: 
            { return EiffelTypes.LOOP_KEYWORD;
            }
          case 136: break;
          case 43: 
            { return EiffelTypes.LIKE_KEYWORD;
            }
          case 137: break;
          case 44: 
            { return EiffelTypes.SOME_KEYWORD;
            }
          case 138: break;
          case 45: 
            { return EiffelTypes.NONE_KEYWORD;
            }
          case 139: break;
          case 46: 
            { return EiffelTypes.NOTE_KEYWORD;
            }
          case 140: break;
          case 47: 
            { return EiffelTypes.ONCE_KEYWORD;
            }
          case 141: break;
          case 48: 
            { return EiffelTypes.ONLY_KEYWORD;
            }
          case 142: break;
          case 49: 
            { return EiffelTypes.TRUE_KEYWORD;
            }
          case 143: break;
          case 50: 
            { return EiffelTypes.THEN_KEYWORD;
            }
          case 144: break;
          case 51: 
            { return EiffelTypes.WHEN_KEYWORD;
            }
          case 145: break;
          case 52: 
            { return EiffelTypes.CLASS_KEYWORD;
            }
          case 146: break;
          case 53: 
            { return EiffelTypes.CHECK_KEYWORD;
            }
          case 147: break;
          case 54: 
            { return EiffelTypes.FALSE_KEYWORD;
            }
          case 148: break;
          case 55: 
            { return EiffelTypes.LOCAL_KEYWORD;
            }
          case 149: break;
          case 56: 
            { return EiffelTypes.ALIAS_KEYWORD;
            }
          case 150: break;
          case 57: 
            { return EiffelTypes.AGENT_KEYWORD;
            }
          case 151: break;
          case 58: 
            { return EiffelTypes.DEBUG_KEYWORD;
            }
          case 152: break;
          case 59: 
            { return EiffelTypes.RETRY_KEYWORD;
            }
          case 153: break;
          case 60: 
            { return EiffelTypes.TUPLE_KEYWORD;
            }
          case 154: break;
          case 61: 
            { return EiffelTypes.UNTIL_KEYWORD;
            }
          case 155: break;
          case 62: 
            { return EiffelTypes.CREATE_KEYWORD;
            }
          case 156: break;
          case 63: 
            { return EiffelTypes.FROZEN_KEYWORD;
            }
          case 157: break;
          case 64: 
            { return EiffelTypes.EXPORT_KEYWORD;
            }
          case 158: break;
          case 65: 
            { return EiffelTypes.ELSEIF_KEYWORD;
            }
          case 159: break;
          case 66: 
            { return EiffelTypes.ENSURE_KEYWORD;
            }
          case 160: break;
          case 67: 
            { return EiffelTypes.ACROSS_KEYWORD;
            }
          case 161: break;
          case 68: 
            { return EiffelTypes.ASSIGN_KEYWORD;
            }
          case 162: break;
          case 69: 
            { return EiffelTypes.SELECT_KEYWORD;
            }
          case 163: break;
          case 70: 
            { return EiffelTypes.RESCUE_KEYWORD;
            }
          case 164: break;
          case 71: 
            { return EiffelTypes.RESULT_KEYWORD;
            }
          case 165: break;
          case 72: 
            { return EiffelTypes.RENAME_KEYWORD;
            }
          case 166: break;
          case 73: 
            { return EiffelTypes.CONVERT_KEYWORD;
            }
          case 167: break;
          case 74: 
            { return EiffelTypes.CURRENT_KEYWORD;
            }
          case 168: break;
          case 75: 
            { return EiffelTypes.FEATURE_KEYWORD;
            }
          case 169: break;
          case 76: 
            { return EiffelTypes.REQUIRE_KEYWORD;
            }
          case 170: break;
          case 77: 
            { return EiffelTypes.INSPECT_KEYWORD;
            }
          case 171: break;
          case 78: 
            { return EiffelTypes.INHERIT_KEYWORD;
            }
          case 172: break;
          case 79: 
            { return EiffelTypes.IMPLIES_KEYWORD;
            }
          case 173: break;
          case 80: 
            { return EiffelTypes.VARIANT_KEYWORD;
            }
          case 174: break;
          case 81: 
            { return EiffelTypes.EXPANDED_KEYWORD;
            }
          case 175: break;
          case 82: 
            { return EiffelTypes.EXTERNAL_KEYWORD;
            }
          case 176: break;
          case 83: 
            { return EiffelTypes.ATTACHED_KEYWORD;
            }
          case 177: break;
          case 84: 
            { return EiffelTypes.DEFERRED_KEYWORD;
            }
          case 178: break;
          case 85: 
            { return EiffelTypes.REDEFINE_KEYWORD;
            }
          case 179: break;
          case 86: 
            { return EiffelTypes.OBSOLETE_KEYWORD;
            }
          case 180: break;
          case 87: 
            { return EiffelTypes.UNDEFINE_KEYWORD;
            }
          case 181: break;
          case 88: 
            { return EiffelTypes.ATTRIBUTE_KEYWORD;
            }
          case 182: break;
          case 89: 
            { return EiffelTypes.SIGNATURE_KEYWORD;
            }
          case 183: break;
          case 90: 
            { return EiffelTypes.PRECURSOR_KEYWORD;
            }
          case 184: break;
          case 91: 
            { return EiffelTypes.INVARIANT_KEYWORD;
            }
          case 185: break;
          case 92: 
            { return EiffelTypes.C_EXTERNAL_KEYWORD;
            }
          case 186: break;
          case 93: 
            { return EiffelTypes.CPP_EXTERNAL_KEYWORD;
            }
          case 187: break;
          case 94: 
            { return EiffelTypes.DLL_EXTERNAL_KEYWORD;
            }
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
