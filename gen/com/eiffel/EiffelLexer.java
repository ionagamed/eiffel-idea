/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.eiffel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import com.eiffel.psi.EiffelTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Eiffel.flex</tt>
 */
public class EiffelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_STRING = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4288 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\u01e5\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\6\1\7\1\6\1\10\47\6\1\11\3\6\1\12\6\6\1\11\14\6"+
    "\1\13\3\6\1\13\3\6\1\13\3\6\1\13\3\6\1\13\3\6\1\13\3\6\1\13\3\6\1\13\3\6\1"+
    "\13\3\6\1\13\2\6\1\12\3\6\1\12\2\6\1\11\10\6\1\11\1\6\1\12\57\6\1\5\12\6\1"+
    "\11\1\12\11\6\1\13\3\6\1\12\5\6\1\14\5\6\1\12\2\6\1\12\4\6\1\14\35\6\1\15"+
    "\1\16\1\17\6\6\1\20\166\6\1\5\160\6\1\11\24\6\1\12\1\6\1\11\5\6\2\12\2\6\1"+
    "\12\14\6\1\12\130\6\1\12\54\6\1\11\35\6\1\13\3\6\1\12\1\6\1\21\4\6\1\12\10"+
    "\6\1\12\16\6\1\12\13\6\1\12\3\6\1\11\2\6\1\12\15\6\1\11\113\6\1\11\6\6\1\12"+
    "\143\6\1\22\1\23");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\15\1\2\22\0\1\3\1\64\1\26\1\0\1\76\1\16\1\32\1\22\1\74\1\75"+
    "\1\32\1\4\1\71\1\31\1\24\1\17\1\5\1\21\6\11\2\14\1\67\1\70\1\66\1\33\1\65"+
    "\1\63\1\0\1\35\1\6\1\10\1\40\1\25\1\13\1\55\1\53\1\51\1\23\1\61\1\34\1\54"+
    "\1\43\1\44\1\42\1\56\1\41\1\37\1\46\1\47\1\52\1\62\1\12\1\57\1\45\1\27\1\32"+
    "\1\30\1\32\1\7\1\0\1\35\1\6\1\10\1\40\1\25\1\13\1\55\1\53\1\51\1\23\1\61\1"+
    "\34\1\54\1\43\1\44\1\42\1\56\1\41\1\37\1\46\1\47\1\52\1\62\1\12\1\57\1\45"+
    "\1\72\1\32\1\73\1\32\6\0\1\15\32\0\1\3\117\0\2\50\55\0\1\36\12\20\46\0\12"+
    "\20\14\0\12\20\20\0\12\20\6\0\12\20\6\0\13\3\35\0\2\15\5\0\1\3\57\0\1\3\12"+
    "\0\1\60\53\0\12\20\16\0\62\20");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\4\3\5"+
    "\1\3\1\1\1\6\1\5\1\7\1\10\1\11\1\3"+
    "\1\12\2\5\1\1\10\5\1\1\3\5\1\13\1\14"+
    "\2\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\3\3\0\1\25\1\0\12\5\2\0\2\25"+
    "\1\26\3\5\1\27\1\0\2\27\1\30\1\31\1\5"+
    "\1\0\3\5\2\32\3\5\3\0\5\5\1\33\5\5"+
    "\1\34\4\5\1\0\2\5\1\35\2\0\1\35\4\5"+
    "\1\36\1\37\1\40\3\4\2\0\6\5\1\41\3\5"+
    "\1\42\1\0\1\42\3\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\43\1\0\1\27\1\0\1\27\2\5\1\0"+
    "\2\5\1\44\1\0\1\5\1\0\1\5\1\45\2\5"+
    "\4\0\10\5\1\0\7\5\1\46\1\0\1\5\1\47"+
    "\5\5\2\50\2\5\4\0\6\5\1\0\2\25\1\0"+
    "\1\5\1\0\6\5\1\0\2\5\1\51\1\0\3\25"+
    "\3\5\2\52\1\0\1\5\1\27\1\0\2\27\1\5"+
    "\1\53\2\54\1\5\1\0\1\5\1\0\4\5\2\0"+
    "\1\55\1\0\2\5\1\55\5\5\2\0\7\5\1\56"+
    "\1\57\1\0\1\5\1\60\1\61\1\62\1\5\1\63"+
    "\1\5\1\0\1\5\4\0\4\5\1\0\1\5\1\64"+
    "\4\0\1\5\2\65\3\5\2\66\1\5\2\67\1\5"+
    "\1\25\3\5\1\0\1\5\1\0\1\5\1\27\1\0"+
    "\1\27\4\0\1\70\1\0\1\5\2\71\1\0\2\5"+
    "\1\0\1\5\1\72\3\0\3\5\1\73\3\5\2\0"+
    "\4\5\1\74\1\0\2\5\1\0\1\5\1\75\1\5"+
    "\2\76\4\0\4\5\1\0\1\5\3\25\1\0\1\5"+
    "\1\77\3\5\1\100\1\25\1\5\1\101\1\5\2\102"+
    "\2\103\1\0\1\27\2\104\2\105\1\5\1\0\1\5"+
    "\1\106\2\0\1\106\5\5\1\107\1\110\1\107\1\110"+
    "\1\0\1\5\1\111\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\4\5\1\0\1\5\1\0\1\5\1\112"+
    "\1\113\1\114\2\5\1\27\1\5\1\0\1\5\2\0"+
    "\5\5\1\0\1\5\2\115\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\116\1\0\1\117\1\120\1\116\1\5"+
    "\1\117\1\120\2\121\1\0\1\5\1\122\1\123\1\124"+
    "\1\0\1\5\1\125\1\0\1\125\1\5\1\126\2\5"+
    "\2\127\1\0\1\5\2\130\2\131\1\0\1\5\1\0"+
    "\1\5\2\132\2\133\2\5\2\134\2\135\1\0\1\136"+
    "\1\137\1\5\1\0\1\5\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[515];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\176\0\176\0\u03f0\0\u02b5\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u02b5\0\u02b5\0\u07e0\0\u081f\0\u085e"+
    "\0\176\0\176\0\176\0\176\0\176\0\176\0\176\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u02b5\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\176\0\u0ec4\0\u0f03\0\u02b5\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u017a"+
    "\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u017a\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\176\0\u16a4\0\u16e3"+
    "\0\u017a\0\u1722\0\u1761\0\u17a0\0\u17df\0\u02b5\0\u02b5\0\176"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u017a\0\u1ad3\0\u1b12\0\u1b51\0\176"+
    "\0\u1b90\0\u0c8d\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u017a\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u017a\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u017a\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d"+
    "\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u017a\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\176\0\u017a\0\u289b\0\u28da\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u017a"+
    "\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9"+
    "\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1"+
    "\0\u017a\0\176\0\u017a\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\176\0\u35a6\0\u35e5"+
    "\0\u3624\0\u017a\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e"+
    "\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996"+
    "\0\u017a\0\u017a\0\u39d5\0\u3a14\0\u017a\0\u017a\0\u017a\0\u3a53"+
    "\0\u017a\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u017a\0\u3dc5"+
    "\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\176\0\u017a\0\u3f00\0\u3f3f"+
    "\0\u3f7e\0\176\0\u017a\0\u3fbd\0\176\0\u017a\0\u3ffc\0\u403b"+
    "\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u3273\0\u432f\0\u436e\0\u017a\0\u43ad"+
    "\0\u43ec\0\176\0\u017a\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527"+
    "\0\u017a\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u017a"+
    "\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899"+
    "\0\u48d8\0\u017a\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u017a"+
    "\0\u4a52\0\176\0\u017a\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d"+
    "\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u3dc5\0\u3e04\0\u3e43"+
    "\0\u4d07\0\u4d46\0\u017a\0\u4d85\0\u4dc4\0\u4e03\0\u017a\0\u4e42"+
    "\0\u4e81\0\u017a\0\u4ec0\0\176\0\u017a\0\176\0\u017a\0\u4eff"+
    "\0\u4f3e\0\176\0\u017a\0\176\0\u017a\0\u4f7d\0\u4fbc\0\u4ffb"+
    "\0\176\0\u503a\0\u5079\0\u017a\0\u50b8\0\u50f7\0\u5136\0\u5175"+
    "\0\u51b4\0\176\0\176\0\u017a\0\u017a\0\u51f3\0\u5232\0\u017a"+
    "\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a"+
    "\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622"+
    "\0\u5661\0\u56a0\0\u56df\0\u017a\0\u017a\0\u017a\0\u571e\0\u575d"+
    "\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955"+
    "\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\176\0\u017a\0\u5acf"+
    "\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\176\0\u5c49\0\176"+
    "\0\176\0\u017a\0\u5c88\0\u017a\0\u017a\0\176\0\u017a\0\u5cc7"+
    "\0\u5d06\0\u017a\0\u017a\0\u017a\0\u5d45\0\u5d84\0\176\0\u5dc3"+
    "\0\u017a\0\u5e02\0\u017a\0\u5e41\0\u5e80\0\176\0\u017a\0\u5ebf"+
    "\0\u5efe\0\176\0\u017a\0\176\0\u017a\0\u5f3d\0\u5f7c\0\u5fbb"+
    "\0\u5ffa\0\176\0\u017a\0\176\0\u017a\0\u6039\0\u6078\0\176"+
    "\0\u017a\0\176\0\u017a\0\u60b7\0\u017a\0\u017a\0\u60f6\0\u6135"+
    "\0\u6174\0\176\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[515];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\10"+
    "\1\12\1\13\1\10\1\4\2\14\1\3\1\10\1\15"+
    "\1\7\1\16\1\17\1\20\1\21\1\22\1\23\1\14"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\7\1\36\1\37\1\40\1\41\1\42"+
    "\5\7\1\3\1\7\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\77\3\100\0\3\4\11\0\1\4\65\0\1\14\1\6"+
    "\1\0\1\10\1\0\1\10\2\0\1\10\1\0\2\14"+
    "\1\0\1\10\2\0\1\60\4\0\3\14\27\0\4\14"+
    "\15\0\1\10\1\61\1\10\1\62\1\10\1\63\1\0"+
    "\1\10\4\0\1\10\2\0\1\64\57\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\1\10\1\0"+
    "\1\10\1\0\1\10\2\0\1\10\4\0\1\10\2\0"+
    "\1\64\56\0\1\65\2\7\1\66\5\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\67\1\7\1\0"+
    "\2\7\1\70\2\7\1\71\2\7\1\72\1\0\2\7"+
    "\1\73\4\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\5\7"+
    "\1\74\3\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\75\6\0\1\7"+
    "\1\76\1\0\2\7\1\77\6\7\1\0\7\7\1\0"+
    "\2\7\20\0\1\14\11\0\2\14\4\0\1\14\4\0"+
    "\3\14\27\0\4\14\10\0\1\100\2\0\12\100\1\0"+
    "\1\101\60\100\4\0\1\14\1\102\1\0\1\103\1\0"+
    "\1\103\2\0\1\103\1\0\2\14\1\0\1\103\2\0"+
    "\1\104\4\0\3\14\27\0\4\14\15\0\5\7\1\105"+
    "\2\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\1\106\1\7\1\0\4\7\1\107\4\7\1\0\7\7"+
    "\1\0\2\7\14\0\16\110\1\111\7\110\1\112\1\113"+
    "\47\110\4\0\1\14\1\6\1\0\1\10\1\0\1\10"+
    "\2\0\1\10\1\0\2\14\1\0\1\10\2\0\1\60"+
    "\4\0\1\114\2\14\27\0\2\14\1\115\1\14\15\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\5\7\1\116\3\7\1\117\1\120\6\7"+
    "\1\0\2\7\21\0\3\7\1\121\4\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\122\1\7\1\123"+
    "\1\124\3\7\1\125\2\7\1\126\1\7\1\0\4\7"+
    "\1\127\2\7\1\0\2\7\41\0\1\130\16\0\1\131"+
    "\3\0\2\132\32\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\133\6\0\2\7\1\0\5\7\1\134\3\7"+
    "\1\132\1\135\6\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\136\6\0\1\137\1\7"+
    "\1\0\5\7\1\140\3\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\141"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\2\7\1\142\6\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\5\7\1\143\3\7"+
    "\1\0\7\7\1\0\2\7\21\0\1\7\1\144\6\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\145"+
    "\1\7\1\0\2\7\1\146\1\7\1\147\4\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\150"+
    "\5\7\1\151\1\0\2\7\1\152\4\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\153\1\154\3\7\1\155\4\7\1\0"+
    "\7\7\1\0\2\7\27\0\1\156\27\0\1\157\10\0"+
    "\1\160\27\0\6\7\1\161\1\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\4\7\1\162"+
    "\4\7\1\0\3\7\1\163\3\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\164\1\0\11\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\0\2\7\1\165\4\7"+
    "\1\0\2\7\20\0\1\14\11\0\2\14\4\0\1\14"+
    "\4\0\3\14\27\0\2\14\1\166\1\14\14\0\1\14"+
    "\11\0\2\14\4\0\1\14\4\0\3\14\27\0\3\14"+
    "\1\167\43\0\1\170\47\0\1\14\1\102\1\0\1\103"+
    "\1\0\1\103\2\0\1\103\1\0\2\14\1\0\1\103"+
    "\2\0\1\14\4\0\3\14\27\0\4\14\15\0\1\171"+
    "\1\0\1\171\11\0\1\171\62\0\1\172\1\0\1\172"+
    "\1\0\1\172\7\0\1\172\62\0\5\173\1\0\2\173"+
    "\4\0\1\173\3\0\1\173\7\0\1\173\2\0\1\173"+
    "\43\0\1\102\1\0\1\103\1\0\1\103\2\0\1\103"+
    "\4\0\1\103\3\0\1\174\55\0\1\175\77\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\176\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\177\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\200\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\4\7\1\201\4\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\202\6\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\203\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\204"+
    "\6\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\1\7\1\205"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\206"+
    "\1\7\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\5\7\1\207\3\7\1\0\7\7\1\0"+
    "\2\7\36\0\1\210\54\0\1\100\2\0\12\100\1\0"+
    "\1\100\1\211\2\100\1\212\54\100\5\0\1\103\1\213"+
    "\1\103\1\214\1\103\1\215\1\0\1\103\4\0\1\103"+
    "\3\0\1\174\56\0\1\103\1\0\1\103\1\0\1\103"+
    "\2\0\1\103\4\0\1\103\3\0\1\174\56\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\3\7\1\216\3\7\1\217\1\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\220\1\221\10\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\222\1\223\1\224"+
    "\7\7\1\0\7\7\1\0\2\7\14\0\16\110\1\111"+
    "\7\110\1\112\51\110\2\225\1\226\11\110\1\227\62\110"+
    "\2\230\1\113\11\110\1\113\1\111\7\110\1\112\50\110"+
    "\1\114\2\0\74\114\5\0\3\7\1\231\4\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\5\7\1\232\3\7\1\0\7\7\1\0\2\7\74\0"+
    "\2\233\22\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\233"+
    "\1\234\1\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\235\6\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\236\1\7\1\0"+
    "\11\7\1\237\1\240\6\7\1\0\2\7\52\0\2\241"+
    "\44\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\241\1\242\10\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\1\7\1\243\7\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\7\7\1\244"+
    "\1\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\245\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\50\0\1\246\5\0"+
    "\1\247\110\0\1\250\77\0\1\251\26\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\1\252\1\7"+
    "\1\0\3\7\1\253\5\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\0\3\7\1\254\3\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\11\7\1\0\4\7"+
    "\1\255\2\7\1\0\2\7\21\0\1\7\1\256\4\7"+
    "\1\257\1\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\7\7\1\260\1\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\1\261\1\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\262\1\263\1\264"+
    "\2\7\1\265\2\7\1\266\1\7\1\0\5\7\1\267"+
    "\1\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\270\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\4\7\1\271"+
    "\2\7\1\272\1\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\273\1\274\10\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\1\7\1\275\7\7\1\0\7\7"+
    "\1\0\2\7\21\0\3\7\1\276\4\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\277\1\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\10\7\1\300\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\3\7\1\301\5\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\302"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\2\7"+
    "\41\0\1\303\56\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\304\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\1\7\1\305\5\7"+
    "\1\306\1\7\1\0\7\7\1\0\2\7\52\0\2\307"+
    "\12\0\1\310\1\311\65\0\1\312\41\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\307"+
    "\1\313\10\7\1\0\1\7\1\314\1\315\4\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\3\7\1\316\5\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\317"+
    "\6\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\320\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\1\171\1\0"+
    "\1\171\11\0\1\171\2\0\1\64\57\0\1\172\1\0"+
    "\1\172\1\0\1\172\7\0\1\172\2\0\1\64\57\0"+
    "\5\173\1\0\2\173\4\0\1\173\2\0\1\64\1\173"+
    "\7\0\1\173\2\0\1\173\42\0\1\321\1\322\1\0"+
    "\1\323\1\0\1\323\2\0\1\323\4\0\1\323\7\0"+
    "\1\321\54\0\1\324\74\0\5\7\1\325\2\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\326"+
    "\1\327\10\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\330\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\1\7\1\331\5\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\332\6\7\1\0"+
    "\7\7\1\0\2\7\21\0\3\7\1\333\4\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\334\1\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\335\1\336\10\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\6\7\1\337\2\7\1\0\3\7"+
    "\1\340\3\7\1\0\2\7\21\0\1\341\3\0\1\341"+
    "\2\0\1\341\3\0\2\341\1\210\61\0\1\342\1\0"+
    "\1\342\11\0\1\342\62\0\1\343\1\0\1\343\1\0"+
    "\1\343\7\0\1\343\62\0\5\344\1\0\2\344\4\0"+
    "\1\344\3\0\1\344\7\0\1\344\2\0\1\344\43\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\345\1\0\5\7\1\346\3\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\347\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\41\0\1\350\56\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\351\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\63\0\1\352\34\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\10\7\1\353\1\0\7\7\1\0\2\7\15\0"+
    "\3\225\11\0\1\225\1\110\60\0\1\110\2\354\1\226"+
    "\11\110\1\226\1\111\7\110\1\112\50\110\1\0\2\225"+
    "\1\227\11\0\1\227\61\0\16\230\1\355\7\230\1\356"+
    "\1\230\1\357\46\230\5\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\360\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\3\7"+
    "\1\361\5\7\1\0\7\7\1\0\2\7\41\0\1\362"+
    "\56\0\10\7\4\0\1\7\1\0\1\7\1\0\1\363"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\5\7\1\364\3\7\1\0\7\7"+
    "\1\0\2\7\51\0\1\365\46\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\1\366\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\64\0\2\367\32\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\367\1\370\6\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\371\1\0\2\7\1\372\6\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\4\7\1\373"+
    "\4\7\1\0\7\7\1\0\2\7\41\0\1\374\106\0"+
    "\1\375\66\0\1\376\114\0\1\377\40\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u0100\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\1\7\1\u0101"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\u0102\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\4\7\1\u0103\4\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\10\7\1\u0104\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u0105\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u0106\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\21\0\2\7\1\u0107\5\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\24\0\1\u0108\36\0\1\u0109"+
    "\34\0\3\7\1\u010a\4\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\10\7\1\u010b\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\u010c\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\u010d\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\2\7"+
    "\1\u010e\6\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\10\7\1\u010f\1\0\7\7\1\0\2\7\21\0"+
    "\3\7\1\u0110\4\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u0111\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u0112\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\60\0\1\u0113\37\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\5\7\1\u0114"+
    "\3\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u0115\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\6\7\1\u0116\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\u0117\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\u0118"+
    "\1\7\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\4\7\1\u0119\4\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u011a\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\u011b\1\u011c\6\7"+
    "\1\0\2\7\56\0\1\u011d\71\0\1\u011e\66\0\1\u011f"+
    "\105\0\1\u0120\47\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\3\7\1\u0121\5\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\1\u0122\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u0123\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\1\u0124\1\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\11\7\1\u0125\1\u0126\6\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\4\7\1\u0127\4\7\1\0\7\7\1\0"+
    "\2\7\21\0\1\322\1\0\1\323\1\0\1\323\2\0"+
    "\1\323\4\0\1\323\62\0\1\323\1\u0128\1\323\1\u0129"+
    "\1\323\1\u012a\1\0\1\323\4\0\1\323\62\0\1\323"+
    "\1\0\1\323\1\0\1\323\2\0\1\323\4\0\1\323"+
    "\102\0\1\u012b\56\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\7\7\1\u012c\1\7"+
    "\1\0\7\7\1\0\2\7\52\0\2\u012d\44\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\u012d\1\u012e\10\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\7\7\1\u012f\1\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u0130\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u0131\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\u0132"+
    "\1\u0133\1\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\10\7\1\u0134\1\0"+
    "\7\7\1\0\2\7\41\0\1\u0135\56\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u0136\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u0137\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\1\341\3\0"+
    "\1\341\2\0\1\341\2\0\1\100\2\341\62\0\1\342"+
    "\1\0\1\342\11\0\1\342\3\0\1\174\56\0\1\343"+
    "\1\0\1\343\1\0\1\343\7\0\1\343\3\0\1\174"+
    "\56\0\5\344\1\0\2\344\4\0\1\344\3\0\1\u0138"+
    "\7\0\1\344\2\0\1\344\43\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u0139\4\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\2\7\1\u013a\6\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\2\7\1\u013b\6\7\1\0\7\7"+
    "\1\0\2\7\64\0\2\u013c\32\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\11\7"+
    "\1\u013c\1\u013d\6\7\1\0\2\7\55\0\1\u013e\42\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\2\7\1\u013f\6\7\1\0\7\7\1\0"+
    "\2\7\14\0\1\110\3\354\11\110\1\354\1\u0140\7\110"+
    "\1\112\50\110\1\230\2\u0141\1\u0142\11\230\1\u0143\12\230"+
    "\1\357\46\230\1\u0144\2\u0145\25\u0144\1\u0146\46\u0144\1\230"+
    "\1\110\14\230\1\355\7\230\1\112\50\230\5\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\u0147"+
    "\1\7\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\u0148\1\u0149\10\7\1\0\7\7\1\0\2\7"+
    "\52\0\2\u014a\44\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\u014a\1\u014b\10\7\1\0"+
    "\7\7\1\0\2\7\71\0\1\u014c\26\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\4\7\1\u014d\2\7\1\0\2\7\21\0"+
    "\3\7\1\u014e\4\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\u014f\1\u0150\6\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\7\7\1\u0151\1\7"+
    "\1\0\7\7\1\0\2\7\24\0\1\u0152\127\0\1\u0153"+
    "\72\0\1\u0154\46\0\3\7\1\u0155\4\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\2\7"+
    "\1\u0156\6\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\u0157\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\4\7\1\u0158\2\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\2\7\1\u0159\6\7\1\0"+
    "\7\7\1\0\2\7\21\0\3\7\1\u015a\4\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u015b\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\63\0\1\u015c\63\0"+
    "\1\u015d\47\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\10\7\1\u015e\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\1\u015f\1\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\21\0\6\7\1\u0160\1\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\3\7\1\u0161\3\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\6\7\1\u0162\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\u0163\1\u0164\6\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\10\7\1\u0165\1\0\7\7"+
    "\1\0\2\7\50\0\1\u0166\47\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\u0167\1\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u0168\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\6\7\1\u0169"+
    "\1\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\2\7\50\0"+
    "\1\u016a\47\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\u016b\1\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\41\0\1\u016c\112\0\1\u016d\76\0\1\u016e"+
    "\105\0\2\u016f\32\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\u0170\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u0171\6\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\2\7"+
    "\1\u0172\6\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\11\7\1\u016f\1\u0173\6\7\1\0\2\7\51\0"+
    "\1\u0174\46\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u0175\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\21\0\1\u0176\1\0\1\u0176\11\0\1\u0176"+
    "\62\0\1\u0177\1\0\1\u0177\1\0\1\u0177\7\0\1\u0177"+
    "\62\0\5\u0178\1\0\2\u0178\4\0\1\u0178\3\0\1\u0178"+
    "\7\0\1\u0178\2\0\1\u0178\50\0\1\u0179\71\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\u017a\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\u017b\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\2\7\1\u017c\6\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\4\7\1\u017d\4\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\2\7\1\u017e\6\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u017f\4\7\1\0\7\7\1\0\2\7\20\0\1\321"+
    "\1\u0180\4\344\1\0\2\344\4\0\1\344\3\0\1\u0138"+
    "\3\0\1\321\3\0\1\344\2\0\1\344\43\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\1\7\1\u0181\7\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\7\7\1\u0182\1\7\1\0\7\7"+
    "\1\0\2\7\21\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\4\7\1\u0183\4\7"+
    "\1\0\7\7\1\0\2\7\27\0\1\u0184\70\0\6\7"+
    "\1\u0185\1\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\0\7\7\1\0\2\7"+
    "\41\0\1\u0186\56\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\u0187\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\14\0\1\110\2\354\1\226\11\110\1\226"+
    "\1\u0140\60\110\1\u0144\3\u0141\11\u0144\1\u0141\1\230\11\u0144"+
    "\1\u0188\46\u0144\1\230\2\u0189\1\u0142\11\230\1\u0142\1\355"+
    "\7\230\1\356\1\230\1\357\46\230\1\u0144\2\u0141\1\u0143"+
    "\11\u0144\1\u0143\12\u0144\1\u0146\47\u0144\3\u0145\11\u0144\1\u0145"+
    "\12\u0144\1\u0188\47\u0144\1\0\24\u0144\1\0\50\u0144\36\0"+
    "\2\u018a\44\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\u018a\1\u018b\10\7\1\0\7\7"+
    "\1\0\2\7\57\0\1\u018c\40\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u018d\4\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\11\7\1\0\2\7\1\u018e\4\7\1\0\2\7"+
    "\22\0\1\u018f\75\0\1\7\1\u0190\6\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\62\0\1\u0191\65\0\1\u0192"+
    "\107\0\1\u0193\35\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\7\7\1\u0194\1\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\1\u0195\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\u0196\1\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\2\7\1\u0197\6\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\2\7\1\u0198"+
    "\4\7\1\0\2\7\21\0\5\7\1\u0199\2\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\41\0\1\u019a\117\0"+
    "\1\u019b\35\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u019c\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u019d\1\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\11\7\1\u019e"+
    "\1\u019f\6\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\u01a0\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\55\0\1\u01a1\42\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\2\7\1\u01a2\6\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\2\7\1\u01a3\6\7\1\0\7\7"+
    "\1\0\2\7\41\0\1\u01a4\56\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\u01a5\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\11\7"+
    "\1\u01a6\1\u01a7\6\7\1\0\2\7\24\0\1\u01a8\136\0"+
    "\2\u01a9\75\0\2\u01aa\52\0\1\u01ab\56\0\3\7\1\u01ac"+
    "\4\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\11\7\1\u01a9\1\u01ad\6\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\11\7\1\u01aa\1\u01ae\6\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u01af\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\57\0\1\u01b0\40\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\4\7\1\u01b1"+
    "\4\7\1\0\7\7\1\0\2\7\62\0\1\u01b2\35\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\2\7\1\u01b3\6\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01b4\1\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\7\7\1\u01b5"+
    "\1\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u01b6\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\5\344\1\u012a"+
    "\2\344\4\0\1\344\3\0\1\u0138\7\0\1\344\2\0"+
    "\1\344\43\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u01b7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u01b8\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\14\0\1\u0144\1\0\24\u0144\1\112\50\u0144"+
    "\1\230\3\u0189\11\230\1\u0189\1\u01b9\7\230\1\356\1\230"+
    "\1\357\46\230\5\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\u01ba\6\0\2\7\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\63\0\1\u01bb\34\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\10\7"+
    "\1\u01bc\1\0\7\7\1\0\2\7\62\0\1\u01bd\77\0"+
    "\1\u01be\34\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01bf\1\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\10\7\1\u01c0"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\u01c1\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\1\u01c2\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\u01c3\1\7\1\0\7\7\1\0\2\7\57\0"+
    "\1\u01c4\40\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\4\7\1\u01c5\4\7\1\0"+
    "\7\7\1\0\2\7\41\0\1\u01c6\56\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\u01c7\6\0\2\7\1\0"+
    "\11\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\u01c8"+
    "\1\u01c9\10\7\1\0\7\7\1\0\2\7\62\0\1\u01ca"+
    "\35\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\2\7\1\0\7\7\1\u01cb\1\7\1\0\7\7"+
    "\1\0\2\7\57\0\1\u01cc\40\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u01cd\4\7\1\0\7\7\1\0\2\7\62\0\1\u01ce"+
    "\65\0\1\u01cf\107\0\1\u01d0\66\0\2\u01d1\44\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\7\7\1\u01d2\1\7\1\0\7\7\1\0\2\7"+
    "\21\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\u01d3\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\7\7\1\u01d4\1\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\u01d1\1\u01d5\10\7"+
    "\1\0\7\7\1\0\2\7\62\0\1\u01d6\35\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\2\7"+
    "\1\0\7\7\1\u01d7\1\7\1\0\7\7\1\0\2\7"+
    "\41\0\1\u01d8\56\0\10\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\6\0\2\7\1\0\4\7\1\u01d9\4\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\1\7"+
    "\1\u01da\7\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\u01db"+
    "\1\7\1\0\11\7\1\0\7\7\1\0\2\7\14\0"+
    "\1\230\2\u0189\1\u0142\11\230\1\u0142\1\u01b9\11\230\1\357"+
    "\46\230\5\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\1\7\1\u01dc\7\7\1\0"+
    "\7\7\1\0\2\7\62\0\1\u01dd\35\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\7\7\1\u01de\1\7\1\0\7\7\1\0\2\7\41\0"+
    "\1\u01df\112\0\1\u01e0\42\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\u01e1\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\21\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\u01e2"+
    "\6\7\1\0\7\7\1\0\2\7\21\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\1\7\1\u01e3\7\7\1\0\7\7\1\0\2\7\21\0"+
    "\1\7\1\u01e4\6\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\21\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u01e5\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\41\0\1\u01e6\56\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\u01e7\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\60\0\1\u01e8\37\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\5\7\1\u01e9\3\7\1\0\7\7\1\0\2\7\41\0"+
    "\1\u01ea\56\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\u01eb\6\0\2\7\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\41\0\1\u01ec\56\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\u01ed\6\0\2\7\1\0\11\7\1\0"+
    "\7\7\1\0\2\7\57\0\1\u01ee\40\0\10\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\6\0\2\7\1\0"+
    "\4\7\1\u01ef\4\7\1\0\7\7\1\0\2\7\55\0"+
    "\1\u01f0\42\0\10\7\4\0\1\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\u01f1\1\0\11\7\1\0\7\7"+
    "\1\0\2\7\41\0\1\u01f2\56\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\u01f3\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\41\0\1\u01f4\56\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\u01f5\6\0\2\7"+
    "\1\0\11\7\1\0\7\7\1\0\2\7\21\0\10\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\6\0\1\u01f6"+
    "\1\7\1\0\11\7\1\0\7\7\1\0\2\7\21\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\2\7\1\u01f7\6\7\1\0\7\7\1\0"+
    "\2\7\55\0\1\u01f8\42\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\0\2\7\1\u01f9"+
    "\6\7\1\0\7\7\1\0\2\7\62\0\1\u01fa\35\0"+
    "\10\7\4\0\1\7\1\0\1\7\1\0\1\7\6\0"+
    "\2\7\1\0\7\7\1\u01fb\1\7\1\0\7\7\1\0"+
    "\2\7\57\0\1\u01fc\40\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\u01fd\1\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\u01fe\6\0\2\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\21\0\10\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\6\0\2\7\1\0\4\7"+
    "\1\u01ff\4\7\1\0\7\7\1\0\2\7\51\0\1\u0200"+
    "\46\0\10\7\4\0\1\7\1\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\u0201\1\0\11\7\1\0\7\7\1\0"+
    "\2\7\50\0\1\u0202\47\0\10\7\4\0\1\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\u0203\1\7\1\0\11\7"+
    "\1\0\7\7\1\0\2\7\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25011];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\15\1\2\11\26\1\7\11\1\1\3\0"+
    "\1\1\1\0\12\1\2\0\7\1\1\0\1\11\4\1"+
    "\1\0\10\1\3\0\20\1\1\0\2\1\1\11\2\0"+
    "\7\1\1\11\3\1\2\0\12\1\1\11\1\0\1\1"+
    "\3\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\0\4\1"+
    "\4\0\10\1\1\0\10\1\1\0\7\1\1\11\3\1"+
    "\4\0\6\1\1\0\2\1\1\0\1\1\1\0\6\1"+
    "\1\0\3\1\1\0\10\1\1\0\2\1\1\0\4\1"+
    "\1\11\2\1\1\0\1\1\1\0\4\1\2\0\1\11"+
    "\1\0\10\1\2\0\11\1\1\0\7\1\1\0\1\1"+
    "\4\0\4\1\1\0\2\1\4\0\1\1\1\11\4\1"+
    "\1\11\2\1\1\11\6\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\4\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\3\0\7\1\2\0\5\1"+
    "\1\0\2\1\1\0\3\1\1\11\1\1\4\0\4\1"+
    "\1\0\4\1\1\0\12\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\2\1\1\0\1\1"+
    "\1\11\2\0\6\1\2\11\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\4\0\4\1\1\0"+
    "\1\1\1\0\10\1\1\0\1\1\2\0\5\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\2\11\4\1\1\11\1\1\1\0"+
    "\4\1\1\0\1\1\1\11\1\0\5\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[515];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EiffelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EiffelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 98: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 99: break;
          case 3: 
            { return EiffelTypes.FREE_OPERATOR;
            }
          case 100: break;
          case 4: 
            { return EiffelTypes.INTEGER_LITERAL;
            }
          case 101: break;
          case 5: 
            { return EiffelTypes.IDENTIFIER;
            }
          case 102: break;
          case 6: 
            { return EiffelTypes.DOT;
            }
          case 103: break;
          case 7: 
            { return EiffelTypes.DQUOTE;
            }
          case 104: break;
          case 8: 
            { return EiffelTypes.LEFT_SQUARE_BRACKET;
            }
          case 105: break;
          case 9: 
            { return EiffelTypes.RIGHT_SQUARE_BRACKET;
            }
          case 106: break;
          case 10: 
            { return EiffelTypes.EQ;
            }
          case 107: break;
          case 11: 
            { return EiffelTypes.QUESTION;
            }
          case 108: break;
          case 12: 
            { return EiffelTypes.EXCLAMATION;
            }
          case 109: break;
          case 13: 
            { return EiffelTypes.COLON;
            }
          case 110: break;
          case 14: 
            { return EiffelTypes.SEMICOLON;
            }
          case 111: break;
          case 15: 
            { return EiffelTypes.COMMA;
            }
          case 112: break;
          case 16: 
            { return EiffelTypes.LEFT_CURLY_BRACKET;
            }
          case 113: break;
          case 17: 
            { return EiffelTypes.RIGHT_CURLY_BRACKET;
            }
          case 114: break;
          case 18: 
            { return EiffelTypes.LEFT_PAREN;
            }
          case 115: break;
          case 19: 
            { return EiffelTypes.RIGHT_PAREN;
            }
          case 116: break;
          case 20: 
            { return EiffelTypes.DOLLAR;
            }
          case 117: break;
          case 21: 
            { return EiffelTypes.REAL_LITERAL;
            }
          case 118: break;
          case 22: 
            { return EiffelTypes.DDOT;
            }
          case 119: break;
          case 23: 
            { return EiffelTypes.STRING_LITERAL;
            }
          case 120: break;
          case 24: 
            { return EiffelTypes.COMMENT;
            }
          case 121: break;
          case 25: 
            { return EiffelTypes.ARROW;
            }
          case 122: break;
          case 26: 
            { return EiffelTypes.AS_KEYWORD;
            }
          case 123: break;
          case 27: 
            { return EiffelTypes.DO_KEYWORD;
            }
          case 124: break;
          case 28: 
            { return EiffelTypes.OR_KEYWORD;
            }
          case 125: break;
          case 29: 
            { return EiffelTypes.IF_KEYWORD;
            }
          case 126: break;
          case 30: 
            { return EiffelTypes.RIGHT_TRIANGLE_DBRACKET;
            }
          case 127: break;
          case 31: 
            { return EiffelTypes.LEFT_TRIANGLE_DBRACKET;
            }
          case 128: break;
          case 32: 
            { return EiffelTypes.ASSIGN;
            }
          case 129: break;
          case 33: 
            { return EiffelTypes.XOR_KEYWORD;
            }
          case 130: break;
          case 34: 
            { return EiffelTypes.CHARACTER_LITERAL;
            }
          case 131: break;
          case 35: 
            { return EiffelTypes.END_KEYWORD;
            }
          case 132: break;
          case 36: 
            { return EiffelTypes.ALL_KEYWORD;
            }
          case 133: break;
          case 37: 
            { return EiffelTypes.AND_KEYWORD;
            }
          case 134: break;
          case 38: 
            { return EiffelTypes.NOT_KEYWORD;
            }
          case 135: break;
          case 39: 
            { return EiffelTypes.OLD_KEYWORD;
            }
          case 136: break;
          case 40: 
            { return EiffelTypes.USE_KEYWORD;
            }
          case 137: break;
          case 41: 
            { return EiffelTypes.FROM_KEYWORD;
            }
          case 138: break;
          case 42: 
            { return EiffelTypes.ELSE_KEYWORD;
            }
          case 139: break;
          case 43: 
            { return EiffelTypes.LOOP_KEYWORD;
            }
          case 140: break;
          case 44: 
            { return EiffelTypes.LIKE_KEYWORD;
            }
          case 141: break;
          case 45: 
            { return EiffelTypes.SOME_KEYWORD;
            }
          case 142: break;
          case 46: 
            { return EiffelTypes.NONE_KEYWORD;
            }
          case 143: break;
          case 47: 
            { return EiffelTypes.NOTE_KEYWORD;
            }
          case 144: break;
          case 48: 
            { return EiffelTypes.ONCE_KEYWORD;
            }
          case 145: break;
          case 49: 
            { return EiffelTypes.ONLY_KEYWORD;
            }
          case 146: break;
          case 50: 
            { return EiffelTypes.TRUE_KEYWORD;
            }
          case 147: break;
          case 51: 
            { return EiffelTypes.THEN_KEYWORD;
            }
          case 148: break;
          case 52: 
            { return EiffelTypes.WHEN_KEYWORD;
            }
          case 149: break;
          case 53: 
            { return EiffelTypes.CLASS_KEYWORD;
            }
          case 150: break;
          case 54: 
            { return EiffelTypes.CHECK_KEYWORD;
            }
          case 151: break;
          case 55: 
            { return EiffelTypes.FALSE_KEYWORD;
            }
          case 152: break;
          case 56: 
            { return EiffelTypes.LOCAL_KEYWORD;
            }
          case 153: break;
          case 57: 
            { return EiffelTypes.ALIAS_KEYWORD;
            }
          case 154: break;
          case 58: 
            { return EiffelTypes.AGENT_KEYWORD;
            }
          case 155: break;
          case 59: 
            { return EiffelTypes.DEBUG_KEYWORD;
            }
          case 156: break;
          case 60: 
            { return EiffelTypes.RETRY_KEYWORD;
            }
          case 157: break;
          case 61: 
            { return EiffelTypes.TUPLE_KEYWORD;
            }
          case 158: break;
          case 62: 
            { return EiffelTypes.UNTIL_KEYWORD;
            }
          case 159: break;
          case 63: 
            { return EiffelTypes.CREATE_KEYWORD;
            }
          case 160: break;
          case 64: 
            { return EiffelTypes.FROZEN_KEYWORD;
            }
          case 161: break;
          case 65: 
            { return EiffelTypes.EXPORT_KEYWORD;
            }
          case 162: break;
          case 66: 
            { return EiffelTypes.ELSEIF_KEYWORD;
            }
          case 163: break;
          case 67: 
            { return EiffelTypes.ENSURE_KEYWORD;
            }
          case 164: break;
          case 68: 
            { return EiffelTypes.ACROSS_KEYWORD;
            }
          case 165: break;
          case 69: 
            { return EiffelTypes.ASSIGN_KEYWORD;
            }
          case 166: break;
          case 70: 
            { return EiffelTypes.SELECT_KEYWORD;
            }
          case 167: break;
          case 71: 
            { return EiffelTypes.RESCUE_KEYWORD;
            }
          case 168: break;
          case 72: 
            { return EiffelTypes.RESULT_KEYWORD;
            }
          case 169: break;
          case 73: 
            { return EiffelTypes.RENAME_KEYWORD;
            }
          case 170: break;
          case 74: 
            { return EiffelTypes.CONVERT_KEYWORD;
            }
          case 171: break;
          case 75: 
            { return EiffelTypes.CURRENT_KEYWORD;
            }
          case 172: break;
          case 76: 
            { return EiffelTypes.FEATURE_KEYWORD;
            }
          case 173: break;
          case 77: 
            { return EiffelTypes.REQUIRE_KEYWORD;
            }
          case 174: break;
          case 78: 
            { return EiffelTypes.INSPECT_KEYWORD;
            }
          case 175: break;
          case 79: 
            { return EiffelTypes.INHERIT_KEYWORD;
            }
          case 176: break;
          case 80: 
            { return EiffelTypes.IMPLIES_KEYWORD;
            }
          case 177: break;
          case 81: 
            { return EiffelTypes.VARIANT_KEYWORD;
            }
          case 178: break;
          case 82: 
            { return EiffelTypes.EXPANDED_KEYWORD;
            }
          case 179: break;
          case 83: 
            { return EiffelTypes.EXTERNAL_KEYWORD;
            }
          case 180: break;
          case 84: 
            { return EiffelTypes.ATTACHED_KEYWORD;
            }
          case 181: break;
          case 85: 
            { return EiffelTypes.SEPARATE_KEYWORD;
            }
          case 182: break;
          case 86: 
            { return EiffelTypes.DEFERRED_KEYWORD;
            }
          case 183: break;
          case 87: 
            { return EiffelTypes.REDEFINE_KEYWORD;
            }
          case 184: break;
          case 88: 
            { return EiffelTypes.OBSOLETE_KEYWORD;
            }
          case 185: break;
          case 89: 
            { return EiffelTypes.UNDEFINE_KEYWORD;
            }
          case 186: break;
          case 90: 
            { return EiffelTypes.ATTRIBUTE_KEYWORD;
            }
          case 187: break;
          case 91: 
            { return EiffelTypes.SIGNATURE_KEYWORD;
            }
          case 188: break;
          case 92: 
            { return EiffelTypes.PRECURSOR_KEYWORD;
            }
          case 189: break;
          case 93: 
            { return EiffelTypes.INVARIANT_KEYWORD;
            }
          case 190: break;
          case 94: 
            { return EiffelTypes.C_EXTERNAL_KEYWORD;
            }
          case 191: break;
          case 95: 
            { return EiffelTypes.DETACHABLE_KEYWORD;
            }
          case 192: break;
          case 96: 
            { return EiffelTypes.CPP_EXTERNAL_KEYWORD;
            }
          case 193: break;
          case 97: 
            { return EiffelTypes.DLL_EXTERNAL_KEYWORD;
            }
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
