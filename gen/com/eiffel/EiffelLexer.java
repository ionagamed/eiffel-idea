/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.eiffel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import com.eiffel.psi.EiffelTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Eiffel.flex</tt>
 */
public class EiffelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\124\3\1\6\45\3\1\7\1\10\2\3\1\11\73\3\1\6\277\3");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\66\1\24\1\22\1\0\1\101\1\21\1\0\1\15\1\76\1\77"+
    "\1\70\1\4\1\64\1\23\1\17\1\62\1\5\1\7\6\11\2\14\1\57\1\61\1\73\1\60\1\56\1"+
    "\100\1\102\1\26\1\6\1\10\1\31\1\20\1\13\1\46\1\44\1\42\1\16\1\52\1\25\1\45"+
    "\1\34\1\35\1\33\1\47\1\32\1\30\1\37\1\40\1\43\1\53\1\12\1\50\1\36\1\65\1\71"+
    "\1\67\1\72\1\54\1\0\1\26\1\6\1\10\1\31\1\20\1\13\1\46\1\44\1\42\1\16\1\52"+
    "\1\25\1\45\1\34\1\35\1\33\1\47\1\32\1\30\1\37\1\40\1\43\1\53\1\12\1\50\1\36"+
    "\1\74\1\55\1\75\1\63\6\0\1\1\32\0\1\3\217\0\2\41\115\0\1\27\1\3\77\0\13\3"+
    "\35\0\2\1\5\0\1\3\57\0\1\3\112\0\1\51\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\3\5"+
    "\1\1\1\6\1\5\1\7\1\10\1\11\1\12\2\5"+
    "\1\1\10\5\1\1\3\5\1\7\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\4\0\1\37\1\0\12\5\1\0\2\37\1\40"+
    "\3\5\1\41\1\0\1\41\1\42\1\43\1\5\1\0"+
    "\3\5\2\44\3\5\3\0\5\5\1\45\5\5\1\46"+
    "\4\5\1\0\2\5\1\47\2\0\1\47\4\5\1\0"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\3\4"+
    "\2\0\6\5\1\56\3\5\1\57\3\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\60\1\0\1\41\2\5\1\0"+
    "\2\5\1\61\1\0\1\5\1\0\1\5\1\62\2\5"+
    "\3\0\6\5\1\0\7\5\1\63\1\0\1\5\1\64"+
    "\5\5\2\65\2\5\4\0\6\5\1\0\1\66\1\0"+
    "\2\37\2\0\7\5\1\0\2\5\1\67\3\37\3\5"+
    "\2\70\1\0\1\5\1\41\1\5\1\71\2\72\1\5"+
    "\1\0\1\5\1\0\3\5\1\0\1\73\1\0\1\5"+
    "\1\73\4\5\2\0\7\5\1\74\1\75\1\0\1\5"+
    "\1\76\1\77\1\100\1\5\1\101\1\5\1\0\1\5"+
    "\4\0\4\5\1\0\1\5\1\102\1\103\4\0\2\104"+
    "\3\5\2\105\2\5\2\106\1\5\1\37\3\5\1\0"+
    "\1\5\1\0\1\5\1\41\1\107\1\0\1\5\2\110"+
    "\1\0\1\5\1\0\1\5\1\111\2\0\2\5\1\112"+
    "\2\5\2\0\4\5\1\113\1\0\2\5\1\0\1\5"+
    "\1\114\1\5\2\115\4\0\4\5\1\0\1\5\3\37"+
    "\1\0\1\116\4\5\1\117\1\37\1\5\1\120\1\5"+
    "\2\121\2\122\2\123\2\124\1\0\1\5\1\125\1\0"+
    "\1\125\3\5\1\126\1\127\1\126\1\127\1\0\1\5"+
    "\1\130\1\0\2\5\1\0\1\5\1\0\1\5\4\0"+
    "\4\5\1\0\1\5\1\0\1\131\1\132\1\5\1\133"+
    "\2\5\1\0\1\5\1\0\3\5\1\0\1\5\2\134"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\135\1\0"+
    "\1\136\1\137\1\135\1\5\1\136\1\137\2\140\1\0"+
    "\1\5\1\141\1\142\1\0\1\5\1\0\1\5\1\143"+
    "\1\5\2\144\1\0\1\5\2\145\2\146\1\0\1\5"+
    "\1\0\1\5\2\147\2\150\1\5\2\151\2\152\1\0"+
    "\1\153\1\5\1\0\1\5\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0367\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\103\0\103\0\u08e6\0\u0367\0\103"+
    "\0\u0929\0\103\0\u0367\0\103\0\u0367\0\u096c\0\103\0\103"+
    "\0\103\0\103\0\u0367\0\103\0\103\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\103\0\u0ea8\0\u0eeb\0\u0f2e\0\u03aa\0\u0f71\0\103\0\u0fb4"+
    "\0\u0367\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\u146a\0\u014f\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u014f\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\103\0\u17d1\0\u1814\0\u014f\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\103\0\103\0\103\0\u0367\0\u0367\0\u19a6"+
    "\0\103\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u014f\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\103\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u014f\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u014f\0\u21c3\0\u2206\0\u2249\0\u228c\0\u014f"+
    "\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u014f\0\u2891"+
    "\0\u28d4\0\u2917\0\u295a\0\u299d\0\103\0\u014f\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\103\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10"+
    "\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028"+
    "\0\u306b\0\u30ae\0\u30f1\0\u014f\0\u3134\0\u3177\0\u31ba\0\u31fd"+
    "\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415"+
    "\0\u014f\0\103\0\u014f\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564"+
    "\0\u35a7\0\u35ea\0\u362d\0\103\0\u3670\0\u36b3\0\u014f\0\u36f6"+
    "\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e"+
    "\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u014f\0\u014f\0\u3a5d\0\u3aa0"+
    "\0\u014f\0\u014f\0\u014f\0\u3ae3\0\u014f\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u014f\0\103\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56"+
    "\0\103\0\u014f\0\u3f99\0\u3fdc\0\u401f\0\103\0\u014f\0\u4062"+
    "\0\u40a5\0\103\0\u014f\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u014f\0\u4386\0\u43c9"+
    "\0\103\0\u014f\0\u440c\0\u444f\0\u4492\0\u44d5\0\u014f\0\u4518"+
    "\0\u455b\0\u459e\0\u45e1\0\u014f\0\u4624\0\u4667\0\u46aa\0\u46ed"+
    "\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u014f\0\u483c\0\u487f\0\u48c2"+
    "\0\u4905\0\u4948\0\u014f\0\u498b\0\103\0\u014f\0\u49ce\0\u4a11"+
    "\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29"+
    "\0\u3e8d\0\u3ed0\0\u3f13\0\u4c6c\0\u014f\0\u4caf\0\u4cf2\0\u4d35"+
    "\0\u4d78\0\u014f\0\u4dbb\0\u4dfe\0\u014f\0\u4e41\0\103\0\u014f"+
    "\0\103\0\u014f\0\103\0\u014f\0\103\0\u014f\0\u4e84\0\u4ec7"+
    "\0\103\0\u4f0a\0\u014f\0\u4f4d\0\u4f90\0\u4fd3\0\103\0\103"+
    "\0\u014f\0\u014f\0\u5016\0\u5059\0\u014f\0\u509c\0\u50df\0\u5122"+
    "\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7\0\u533a"+
    "\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc\0\u550f\0\u014f"+
    "\0\u014f\0\u5552\0\u014f\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1"+
    "\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0\0\103\0\u014f\0\u5833"+
    "\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982\0\103\0\u59c5\0\103"+
    "\0\103\0\u014f\0\u5a08\0\u014f\0\u014f\0\103\0\u014f\0\u5a4b"+
    "\0\u5a8e\0\u014f\0\u014f\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u014f"+
    "\0\u5bdd\0\103\0\u014f\0\u5c20\0\u5c63\0\103\0\u014f\0\103"+
    "\0\u014f\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\103\0\u014f\0\103"+
    "\0\u014f\0\u5db2\0\103\0\u014f\0\103\0\u014f\0\u5df5\0\u014f"+
    "\0\u5e38\0\u5e7b\0\u5ebe\0\103\0\u014f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\7\1\13\1\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\6\1\33\1\34\1\35"+
    "\1\36\1\37\5\6\1\2\1\6\1\40\1\7\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\3\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\104\0\3\3\62\0"+
    "\1\3\20\0\1\16\1\5\1\0\1\7\1\0\1\7"+
    "\2\0\1\7\2\0\1\66\1\0\1\16\1\0\2\16"+
    "\27\0\1\7\2\16\3\0\2\16\4\0\1\16\1\0"+
    "\2\16\4\0\1\16\7\0\1\7\1\67\1\7\1\70"+
    "\1\7\1\71\1\0\1\7\2\0\1\72\34\0\1\7"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\33\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\1\7\2\0\1\72"+
    "\34\0\1\7\32\0\1\73\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\74\1\6\1\0\2\6\1\75\2\6"+
    "\1\76\2\6\1\77\1\0\2\6\1\100\4\6\1\0"+
    "\2\6\1\101\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\5\6\1\102\3\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\103"+
    "\4\0\1\6\1\104\1\0\2\6\1\105\6\6\1\0"+
    "\7\6\1\0\3\6\26\0\1\106\2\0\100\106\5\0"+
    "\1\107\1\0\1\110\1\0\1\110\2\0\1\110\2\0"+
    "\1\111\34\0\1\110\33\0\5\6\1\112\2\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\113\1\6\1\0\4\6"+
    "\1\114\4\6\1\0\7\6\1\0\3\6\32\0\1\16"+
    "\14\0\1\16\1\0\2\16\30\0\2\16\3\0\2\16"+
    "\4\0\1\16\1\0\2\16\4\0\1\16\2\0\21\115"+
    "\1\116\1\117\60\115\4\0\1\16\1\5\1\0\1\7"+
    "\1\0\1\7\2\0\1\7\2\0\1\66\1\0\1\16"+
    "\1\0\1\120\1\16\27\0\1\7\1\16\1\121\3\0"+
    "\2\16\4\0\1\16\1\0\2\16\4\0\1\16\7\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\5\6\1\122\3\6\1\123\1\124\6\6\1\0\3\6"+
    "\33\0\3\6\1\125\4\6\1\0\1\6\1\0\1\6"+
    "\4\0\1\126\1\6\1\127\1\130\3\6\1\131\2\6"+
    "\1\132\1\6\1\0\4\6\1\133\2\6\1\0\3\6"+
    "\46\0\1\134\14\0\1\135\3\0\2\136\45\0\10\6"+
    "\1\0\1\6\1\0\1\137\4\0\2\6\1\0\5\6"+
    "\1\140\3\6\1\136\1\141\6\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\142\4\0\1\143\1\6"+
    "\1\0\5\6\1\144\3\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\145\4\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\2\6"+
    "\1\146\6\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\5\6"+
    "\1\147\3\6\1\0\7\6\1\0\3\6\33\0\1\6"+
    "\1\150\6\6\1\0\1\6\1\0\1\6\4\0\1\151"+
    "\1\6\1\0\2\6\1\152\1\6\1\153\4\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\2\6\1\154\5\6\1\155"+
    "\1\0\2\6\1\156\4\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\157\1\160"+
    "\3\6\1\161\4\6\1\0\7\6\1\0\3\6\41\0"+
    "\1\162\20\0\1\163\10\0\1\164\42\0\6\6\1\165"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\4\6\1\166\4\6\1\0\3\6\1\167\3\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\1\6\1\170\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\11\6\1\0\2\6\1\171\4\6\1\0\3\6"+
    "\32\0\1\16\12\0\1\172\1\0\1\16\1\0\2\16"+
    "\30\0\2\16\3\0\2\16\4\0\1\16\1\0\2\16"+
    "\4\0\1\16\6\0\1\16\14\0\1\16\1\0\2\16"+
    "\30\0\2\16\1\0\1\173\1\0\2\16\4\0\1\16"+
    "\1\0\2\16\4\0\1\16\62\0\1\174\26\0\1\16"+
    "\14\0\1\16\1\0\2\16\30\0\2\16\1\0\1\175"+
    "\1\0\1\176\1\177\4\0\1\16\1\0\2\16\4\0"+
    "\1\16\70\0\1\200\20\0\1\16\14\0\1\16\1\0"+
    "\2\16\30\0\2\16\1\0\1\201\1\0\2\16\4\0"+
    "\1\16\1\0\2\16\4\0\1\16\7\0\1\107\1\0"+
    "\1\110\1\0\1\110\2\0\1\110\37\0\1\110\33\0"+
    "\1\202\1\0\1\202\44\0\1\202\33\0\1\203\1\0"+
    "\1\203\1\0\1\203\42\0\1\203\33\0\5\204\1\0"+
    "\2\204\3\0\1\204\5\0\1\204\2\0\1\204\22\0"+
    "\1\204\33\0\1\107\1\0\1\110\1\0\1\110\2\0"+
    "\1\110\3\0\1\205\33\0\1\110\32\0\1\206\103\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\1\6\1\207"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\210\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\4\6\1\211\4\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\212\6\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\213\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\214"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\2\6\1\215\6\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\1\6"+
    "\1\216\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\1\217\1\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\5\6"+
    "\1\220\3\6\1\0\7\6\1\0\3\6\43\0\1\221"+
    "\72\0\1\110\1\222\1\110\1\223\1\110\1\224\1\0"+
    "\1\110\3\0\1\205\33\0\1\110\33\0\1\110\1\0"+
    "\1\110\1\0\1\110\2\0\1\110\3\0\1\205\33\0"+
    "\1\110\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\3\6\1\225\3\6\1\226\1\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\227\1\230\10\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\231\1\232\1\233\7\6\1\0\7\6"+
    "\1\0\3\6\26\0\1\115\2\234\1\235\62\115\1\235"+
    "\14\115\2\120\1\0\100\120\5\0\3\6\1\236\4\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\5\6"+
    "\1\237\3\6\1\0\7\6\1\0\3\6\77\0\2\240"+
    "\35\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\240\1\241\2\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\2\6\1\242\6\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\1\243\1\6"+
    "\1\0\11\6\1\244\1\245\6\6\1\0\3\6\55\0"+
    "\2\246\57\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\246\1\247\10\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\1\6\1\250\7\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\7\6\1\251\1\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\252\4\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\53\0\1\253"+
    "\122\0\1\254\103\0\1\255\41\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\256\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\0\3\6\1\257"+
    "\3\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\0\4\6\1\260"+
    "\2\6\1\0\3\6\33\0\1\6\1\261\4\6\1\262"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\263\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\264\1\265\1\266\2\6"+
    "\1\267\2\6\1\270\1\6\1\0\5\6\1\271\1\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\272"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\4\6\1\273\2\6\1\274\1\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\275\1\276\10\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\1\6\1\277\7\6\1\0\7\6\1\0"+
    "\3\6\33\0\3\6\1\300\4\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\301\1\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\10\6\1\302\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\3\6\1\303\5\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\304\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\46\0"+
    "\1\305\67\0\10\6\1\0\1\6\1\0\1\306\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\1\6\1\307\5\6\1\310\1\6\1\0\7\6\1\0"+
    "\3\6\55\0\2\311\12\0\1\312\1\313\71\0\1\314"+
    "\54\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\311\1\315\10\6\1\0\1\6\1\316\1\317\4\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\3\6\1\320\5\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\2\6\1\321\6\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\322"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\45\0\1\323\152\0\1\324\20\0\1\202\1\0\1\202"+
    "\7\0\1\72\34\0\1\202\33\0\1\203\1\0\1\203"+
    "\1\0\1\203\5\0\1\72\34\0\1\203\33\0\5\204"+
    "\1\0\2\204\2\0\1\72\1\204\5\0\1\204\2\0"+
    "\1\204\22\0\1\204\32\0\1\325\1\326\1\0\1\327"+
    "\1\0\1\327\2\0\1\327\6\0\1\325\30\0\1\327"+
    "\102\0\1\330\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\331\1\332\10\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\1\6\1\333\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\11\6\1\0\1\6\1\334\5\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\2\6\1\335\6\6\1\0\7\6\1\0\3\6"+
    "\33\0\3\6\1\336\4\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\5\6\1\337\2\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\7\6\1\340\1\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\341\1\342\10\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\6\6\1\343\2\6\1\0\3\6\1\344\3\6\1\0"+
    "\3\6\33\0\1\345\1\0\1\345\44\0\1\345\33\0"+
    "\1\346\1\0\1\346\1\0\1\346\42\0\1\346\33\0"+
    "\5\347\1\0\2\347\3\0\1\347\5\0\1\347\2\0"+
    "\1\347\22\0\1\347\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\6\1\350\1\0\5\6\1\351\3\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\352\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\46\0\1\353\67\0\10\6\1\0\1\6"+
    "\1\0\1\354\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\66\0\1\355\47\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\10\6\1\356\1\0"+
    "\7\6\1\0\3\6\27\0\3\234\15\0\1\115\44\0"+
    "\1\234\14\0\1\115\2\357\1\235\15\115\1\116\1\117"+
    "\43\115\1\235\14\115\5\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\6\1\360\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\3\6\1\361\5\6\1\0\7\6"+
    "\1\0\3\6\46\0\1\362\67\0\10\6\1\0\1\6"+
    "\1\0\1\363\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\5\6\1\364\3\6\1\0\7\6"+
    "\1\0\3\6\54\0\1\365\61\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\6\1\366\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\67\0\2\367\45\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\11\6\1\367"+
    "\1\370\6\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\371\6\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\4\6\1\372\4\6"+
    "\1\0\7\6\1\0\3\6\46\0\1\373\102\0\1\374"+
    "\116\0\1\375\53\0\10\6\1\0\1\6\1\0\1\376"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\377\4\0\2\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\4\6"+
    "\1\u0100\4\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\10\6"+
    "\1\u0101\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\u0102\4\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\2\6\1\u0103\36\0\1\u0104\27\0\1\u0105\47\0\3\6"+
    "\1\u0106\4\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\10\6\1\u0107\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\u0108\4\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\6\1\u0109\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\u010a\6\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\10\6\1\u010b\1\0"+
    "\7\6\1\0\3\6\33\0\3\6\1\u010c\4\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\u010d\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\u010e\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\63\0"+
    "\1\u010f\52\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\5\6\1\u0110\3\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\u0111\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\11\6\1\0\6\6\1\u0112\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\u0113\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\u0114\1\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\4\6\1\u0115\4\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\u0116\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\11\6\1\u0117\1\u0118\6\6\1\0\3\6"+
    "\61\0\1\u0119\75\0\1\u011a\74\0\1\u011b\107\0\1\u011c"+
    "\62\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\3\6\1\u011d\5\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\1\6"+
    "\1\u011e\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\u011f\4\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\u0120\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\11\6\1\u0121\1\u0122"+
    "\6\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\4\6\1\u0123\4\6\1\0"+
    "\7\6\1\0\3\6\103\0\1\u0124\32\0\1\326\1\0"+
    "\1\327\1\0\1\327\2\0\1\327\37\0\1\327\33\0"+
    "\1\327\1\u0125\1\327\1\u0126\1\327\1\u0127\1\0\1\327"+
    "\37\0\1\327\33\0\1\327\1\0\1\327\1\0\1\327"+
    "\2\0\1\327\37\0\1\327\46\0\1\u0128\111\0\2\u0129"+
    "\57\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\u0129\1\u012a\10\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\7\6\1\u012b\1\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\u012c\4\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\u012d\4\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\0\7\6\1\u012e"+
    "\1\u012f\2\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\7\6\1\u0130\1\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\10\6\1\u0131\1\0\7\6\1\0"+
    "\3\6\46\0\1\u0132\67\0\10\6\1\0\1\6\1\0"+
    "\1\u0133\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\u0134\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\1\345\1\0\1\345\10\0\1\205\33\0\1\345\33\0"+
    "\1\346\1\0\1\346\1\0\1\346\6\0\1\205\33\0"+
    "\1\346\33\0\5\347\1\0\2\347\3\0\1\u0135\5\0"+
    "\1\347\2\0\1\347\22\0\1\347\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\4\6\1\u0136"+
    "\4\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\2\6\1\u0137"+
    "\6\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\2\6\1\u0138"+
    "\6\6\1\0\7\6\1\0\3\6\67\0\2\u0139\45\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\11\6\1\u0139\1\u013a\6\6\1\0\3\6\60\0\1\u013b"+
    "\55\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\2\6\1\u013c\6\6\1\0\7\6\1\0\3\6"+
    "\26\0\1\115\3\357\15\115\1\u013d\1\117\43\115\1\357"+
    "\14\115\5\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\1\u013e\1\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\10\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\u013f\1\u0140\10\6\1\0\7\6\1\0\3\6\55\0"+
    "\2\u0141\57\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\u0141\1\u0142\10\6\1\0\7\6\1\0\3\6"+
    "\74\0\1\u0143\41\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\11\6\1\0\4\6\1\u0144\2\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\11\6\1\u0145\1\u0146\6\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\7\6\1\u0147\1\6\1\0\7\6\1\0"+
    "\3\6\36\0\1\u0148\120\0\1\u0149\61\0\3\6\1\u014a"+
    "\4\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\6\1\u014b\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\11\6\1\0\4\6"+
    "\1\u014c\2\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\u014d\6\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\u014e\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\66\0\1\u014f\67\0\1\u0150\62\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\10\6"+
    "\1\u0151\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\u0152\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\6\6\1\u0153\1\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\11\6\1\0\3\6"+
    "\1\u0154\3\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\11\6\1\0\6\6"+
    "\1\u0155\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\u0156\1\u0157\6\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\10\6\1\u0158\1\0\7\6\1\0"+
    "\3\6\53\0\1\u0159\62\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\u015a\1\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\u015b"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\33\0\6\6\1\u015c\1\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\53\0\1\u015d\62\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\1\u015e\1\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\46\0\1\u015f\114\0\1\u0160\102\0\1\u0161\111\0"+
    "\2\u0162\45\0\10\6\1\0\1\6\1\0\1\u0163\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\2\6\1\u0164\6\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\2\6\1\u0165\6\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\11\6\1\u0162\1\u0166\6\6\1\0\3\6\54\0\1\u0167"+
    "\61\0\10\6\1\0\1\6\1\0\1\6\4\0\1\6"+
    "\1\u0168\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\1\u0169\1\0\1\u0169\44\0\1\u0169\33\0\1\u016a\1\0"+
    "\1\u016a\1\0\1\u016a\42\0\1\u016a\33\0\5\u016b\1\0"+
    "\2\u016b\3\0\1\u016b\5\0\1\u016b\2\0\1\u016b\22\0"+
    "\1\u016b\40\0\1\u016c\75\0\10\6\1\0\1\6\1\0"+
    "\1\u016d\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\2\6\1\u016e\6\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\4\6\1\u016f\4\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\u0170\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\2\6\1\u0171\6\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\4\6\1\u0172\4\6\1\0\7\6\1\0\3\6\32\0"+
    "\1\325\1\u0173\4\347\1\0\2\347\3\0\1\u0135\2\0"+
    "\1\325\2\0\1\347\2\0\1\347\22\0\1\347\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\1\6\1\u0174\7\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\7\6\1\u0175\1\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\4\6\1\u0176\4\6\1\0\7\6\1\0\3\6\41\0"+
    "\1\u0177\74\0\6\6\1\u0178\1\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\46\0\1\u0179\67\0\10\6\1\0\1\6\1\0"+
    "\1\u017a\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\26\0\1\115\2\357\1\235\15\115\1\u013d\44\115"+
    "\1\235\14\115\27\0\2\u017b\57\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\u017b\1\u017c\10\6\1\0"+
    "\7\6\1\0\3\6\62\0\1\u017d\53\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\4\6\1\u017e"+
    "\4\6\1\0\7\6\1\0\3\6\34\0\1\u017f\101\0"+
    "\1\6\1\u0180\6\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\65\0"+
    "\1\u0181\102\0\1\u0182\50\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\7\6\1\u0183\1\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\7\6\1\u0184\1\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\2\6\1\u0185\6\6\1\0"+
    "\7\6\1\0\3\6\33\0\5\6\1\u0186\2\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\46\0\1\u0187\121\0\1\u0188\50\0"+
    "\10\6\1\0\1\6\1\0\1\u0189\4\0\2\6\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\7\6\1\u018a"+
    "\1\6\1\0\7\6\1\0\3\6\33\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\11\6\1\u018b"+
    "\1\u018c\6\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\u018d\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\60\0\1\u018e\55\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\u018f\6\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\u0190\6\6"+
    "\1\0\7\6\1\0\3\6\46\0\1\u0191\67\0\10\6"+
    "\1\0\1\6\1\0\1\u0192\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\11\6\1\u0193\1\u0194"+
    "\6\6\1\0\3\6\36\0\1\u0195\133\0\2\u0196\101\0"+
    "\2\u0197\60\0\1\u0198\67\0\3\6\1\u0199\4\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\11\6\1\u0196\1\u019a\6\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\11\6\1\u0197\1\u019b\6\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\u019c\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\62\0"+
    "\1\u019d\53\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\4\6\1\u019e\4\6\1\0\7\6\1\0"+
    "\3\6\65\0\1\u019f\50\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\7\6\1\u01a0\1\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\7\6\1\u01a1\1\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\2\6\1\u01a2\6\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\u01a3\4\0\2\6\1\0\11\6\1\0\7\6\1\0"+
    "\3\6\33\0\5\347\1\u0127\2\347\3\0\1\u0135\5\0"+
    "\1\347\2\0\1\347\22\0\1\347\33\0\10\6\1\0"+
    "\1\6\1\0\1\u01a4\4\0\2\6\1\0\11\6\1\0"+
    "\7\6\1\0\3\6\33\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\6\1\u01a5\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\66\0\1\u01a6\47\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\10\6\1\u01a7\1\0"+
    "\7\6\1\0\3\6\66\0\1\u01a8\47\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\10\6\1\u01a9"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\u01aa\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\33\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\7\6\1\u01ab\1\6\1\0\7\6"+
    "\1\0\3\6\62\0\1\u01ac\53\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\4\6\1\u01ad\4\6"+
    "\1\0\7\6\1\0\3\6\46\0\1\u01ae\67\0\10\6"+
    "\1\0\1\6\1\0\1\u01af\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\u01b0\1\u01b1\10\6\1\0"+
    "\7\6\1\0\3\6\65\0\1\u01b2\50\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\1\0\7\6\1\u01b3"+
    "\1\6\1\0\7\6\1\0\3\6\62\0\1\u01b4\53\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\4\6\1\u01b5\4\6\1\0\7\6\1\0\3\6\65\0"+
    "\1\u01b6\71\0\1\u01b7\113\0\1\u01b8\72\0\2\u01b9\57\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\7\6\1\u01ba\1\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\1\6\1\u01bb"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\7\6"+
    "\1\u01bc\1\6\1\0\7\6\1\0\3\6\33\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\u01b9\1\u01bd"+
    "\10\6\1\0\7\6\1\0\3\6\65\0\1\u01be\50\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\7\6\1\u01bf\1\6\1\0\7\6\1\0\3\6\46\0"+
    "\1\u01c0\67\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\4\6\1\u01c1\4\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\1\6\1\u01c2\7\6\1\0\7\6\1\0"+
    "\3\6\33\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\1\u01c3\1\6\1\0\11\6\1\0\7\6\1\0\3\6"+
    "\65\0\1\u01c4\50\0\10\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\1\0\7\6\1\u01c5\1\6\1\0\7\6"+
    "\1\0\3\6\60\0\1\u01c6\55\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\2\6\1\u01c7\6\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\1\6\1\u01c8\7\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\u01c9\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\46\0\1\u01ca\67\0\10\6\1\0\1\6"+
    "\1\0\1\u01cb\4\0\2\6\1\0\11\6\1\0\7\6"+
    "\1\0\3\6\63\0\1\u01cc\52\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\5\6\1\u01cd\3\6"+
    "\1\0\7\6\1\0\3\6\46\0\1\u01ce\67\0\10\6"+
    "\1\0\1\6\1\0\1\u01cf\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\46\0\1\u01d0\67\0\10\6"+
    "\1\0\1\6\1\0\1\u01d1\4\0\2\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\62\0\1\u01d2\53\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\6\1\0\4\6"+
    "\1\u01d3\4\6\1\0\7\6\1\0\3\6\60\0\1\u01d4"+
    "\55\0\10\6\1\0\1\6\1\0\1\6\4\0\1\6"+
    "\1\u01d5\1\0\11\6\1\0\7\6\1\0\3\6\46\0"+
    "\1\u01d6\67\0\10\6\1\0\1\6\1\0\1\u01d7\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\46\0"+
    "\1\u01d8\67\0\10\6\1\0\1\6\1\0\1\u01d9\4\0"+
    "\2\6\1\0\11\6\1\0\7\6\1\0\3\6\33\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\2\6\1\0"+
    "\2\6\1\u01da\6\6\1\0\7\6\1\0\3\6\60\0"+
    "\1\u01db\55\0\10\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\1\0\2\6\1\u01dc\6\6\1\0\7\6\1\0"+
    "\3\6\65\0\1\u01dd\50\0\10\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\1\0\7\6\1\u01de\1\6\1\0"+
    "\7\6\1\0\3\6\62\0\1\u01df\53\0\10\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\u01e0\1\6\1\0\11\6"+
    "\1\0\7\6\1\0\3\6\33\0\10\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\1\0\4\6\1\u01e1\4\6"+
    "\1\0\7\6\1\0\3\6\54\0\1\u01e2\61\0\10\6"+
    "\1\0\1\6\1\0\1\6\4\0\1\6\1\u01e3\1\0"+
    "\11\6\1\0\7\6\1\0\3\6\53\0\1\u01e4\62\0"+
    "\10\6\1\0\1\6\1\0\1\6\4\0\1\u01e5\1\6"+
    "\1\0\11\6\1\0\7\6\1\0\3\6\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24321];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\41\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\4\11\1\1\2\11\4\0\1\1"+
    "\1\0\12\1\1\0\2\1\1\11\4\1\1\0\1\11"+
    "\3\1\1\0\10\1\3\0\20\1\1\0\2\1\1\11"+
    "\2\0\5\1\1\0\3\11\2\1\1\0\1\11\3\1"+
    "\2\0\12\1\1\11\3\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\4\1\3\0\6\1\1\0\10\1\1\0\7\1\1\11"+
    "\3\1\4\0\6\1\1\0\1\11\1\0\2\1\2\0"+
    "\7\1\1\0\13\1\1\0\4\1\1\11\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\11\1\0\6\1\2\0"+
    "\11\1\1\0\7\1\1\0\1\1\4\0\4\1\1\0"+
    "\2\1\1\11\4\0\1\11\4\1\1\11\3\1\1\11"+
    "\6\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\2\0\5\1\2\0"+
    "\5\1\1\0\2\1\1\0\3\1\1\11\1\1\4\0"+
    "\4\1\1\0\4\1\1\0\12\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\4\1\2\11\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\4\0\4\1\1\0\1\1"+
    "\1\0\6\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\0\2\11\4\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\3\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EiffelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EiffelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 110: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 111: break;
          case 3: 
            { return EiffelTypes.PLUS;
            }
          case 112: break;
          case 4: 
            { return EiffelTypes.INTEGER_LITERAL;
            }
          case 113: break;
          case 5: 
            { return EiffelTypes.IDENTIFIER;
            }
          case 114: break;
          case 6: 
            { return EiffelTypes.DOT;
            }
          case 115: break;
          case 7: 
            { return EiffelTypes.FREE_OPERATOR;
            }
          case 116: break;
          case 8: 
            { return EiffelTypes.DQUOTE;
            }
          case 117: break;
          case 9: 
            { return EiffelTypes.MINUS;
            }
          case 118: break;
          case 10: 
            { return EiffelTypes.EXCLAMATION;
            }
          case 119: break;
          case 11: 
            { return EiffelTypes.GT;
            }
          case 120: break;
          case 12: 
            { return EiffelTypes.COLON;
            }
          case 121: break;
          case 13: 
            { return EiffelTypes.EQ;
            }
          case 122: break;
          case 14: 
            { return EiffelTypes.SEMICOLON;
            }
          case 123: break;
          case 15: 
            { return EiffelTypes.SLASH;
            }
          case 124: break;
          case 16: 
            { return EiffelTypes.TILDE;
            }
          case 125: break;
          case 17: 
            { return EiffelTypes.COMMA;
            }
          case 126: break;
          case 18: 
            { return EiffelTypes.LEFT_SQUARE_BRACKET;
            }
          case 127: break;
          case 19: 
            { return EiffelTypes.RIGHT_SQUARE_BRACKET;
            }
          case 128: break;
          case 20: 
            { return EiffelTypes.ASTERISK;
            }
          case 129: break;
          case 21: 
            { return EiffelTypes.DBACKSLASH;
            }
          case 130: break;
          case 22: 
            { return EiffelTypes.CARET;
            }
          case 131: break;
          case 23: 
            { return EiffelTypes.LT;
            }
          case 132: break;
          case 24: 
            { return EiffelTypes.LEFT_CURLY_BRACKET;
            }
          case 133: break;
          case 25: 
            { return EiffelTypes.RIGHT_CURLY_BRACKET;
            }
          case 134: break;
          case 26: 
            { return EiffelTypes.LEFT_PAREN;
            }
          case 135: break;
          case 27: 
            { return EiffelTypes.RIGHT_PAREN;
            }
          case 136: break;
          case 28: 
            { return EiffelTypes.QUESTION;
            }
          case 137: break;
          case 29: 
            { return EiffelTypes.DOLLAR;
            }
          case 138: break;
          case 30: 
            { return EiffelTypes.AT;
            }
          case 139: break;
          case 31: 
            { return EiffelTypes.REAL_LITERAL;
            }
          case 140: break;
          case 32: 
            { return EiffelTypes.DDOT;
            }
          case 141: break;
          case 33: 
            { return EiffelTypes.STRING_LITERAL;
            }
          case 142: break;
          case 34: 
            { return EiffelTypes.COMMENT;
            }
          case 143: break;
          case 35: 
            { return EiffelTypes.ARROW;
            }
          case 144: break;
          case 36: 
            { return EiffelTypes.AS_KEYWORD;
            }
          case 145: break;
          case 37: 
            { return EiffelTypes.DO_KEYWORD;
            }
          case 146: break;
          case 38: 
            { return EiffelTypes.OR_KEYWORD;
            }
          case 147: break;
          case 39: 
            { return EiffelTypes.IF_KEYWORD;
            }
          case 148: break;
          case 40: 
            { return EiffelTypes.GTE;
            }
          case 149: break;
          case 41: 
            { return EiffelTypes.ASSIGN;
            }
          case 150: break;
          case 42: 
            { return EiffelTypes.NOT_EQ;
            }
          case 151: break;
          case 43: 
            { return EiffelTypes.DSLASH;
            }
          case 152: break;
          case 44: 
            { return EiffelTypes.NOT_TILDE;
            }
          case 153: break;
          case 45: 
            { return EiffelTypes.LTE;
            }
          case 154: break;
          case 46: 
            { return EiffelTypes.XOR_KEYWORD;
            }
          case 155: break;
          case 47: 
            { return EiffelTypes.CHARACTER_LITERAL;
            }
          case 156: break;
          case 48: 
            { return EiffelTypes.END_KEYWORD;
            }
          case 157: break;
          case 49: 
            { return EiffelTypes.ALL_KEYWORD;
            }
          case 158: break;
          case 50: 
            { return EiffelTypes.AND_KEYWORD;
            }
          case 159: break;
          case 51: 
            { return EiffelTypes.NOT_KEYWORD;
            }
          case 160: break;
          case 52: 
            { return EiffelTypes.OLD_KEYWORD;
            }
          case 161: break;
          case 53: 
            { return EiffelTypes.USE_KEYWORD;
            }
          case 162: break;
          case 54: 
            { return EiffelTypes.ALIAS_BRACKETS;
            }
          case 163: break;
          case 55: 
            { return EiffelTypes.FROM_KEYWORD;
            }
          case 164: break;
          case 56: 
            { return EiffelTypes.ELSE_KEYWORD;
            }
          case 165: break;
          case 57: 
            { return EiffelTypes.LOOP_KEYWORD;
            }
          case 166: break;
          case 58: 
            { return EiffelTypes.LIKE_KEYWORD;
            }
          case 167: break;
          case 59: 
            { return EiffelTypes.SOME_KEYWORD;
            }
          case 168: break;
          case 60: 
            { return EiffelTypes.NONE_KEYWORD;
            }
          case 169: break;
          case 61: 
            { return EiffelTypes.NOTE_KEYWORD;
            }
          case 170: break;
          case 62: 
            { return EiffelTypes.ONCE_KEYWORD;
            }
          case 171: break;
          case 63: 
            { return EiffelTypes.ONLY_KEYWORD;
            }
          case 172: break;
          case 64: 
            { return EiffelTypes.TRUE_KEYWORD;
            }
          case 173: break;
          case 65: 
            { return EiffelTypes.THEN_KEYWORD;
            }
          case 174: break;
          case 66: 
            { return EiffelTypes.WHEN_KEYWORD;
            }
          case 175: break;
          case 67: 
            { return EiffelTypes.RANGE;
            }
          case 176: break;
          case 68: 
            { return EiffelTypes.CLASS_KEYWORD;
            }
          case 177: break;
          case 69: 
            { return EiffelTypes.CHECK_KEYWORD;
            }
          case 178: break;
          case 70: 
            { return EiffelTypes.FALSE_KEYWORD;
            }
          case 179: break;
          case 71: 
            { return EiffelTypes.LOCAL_KEYWORD;
            }
          case 180: break;
          case 72: 
            { return EiffelTypes.ALIAS_KEYWORD;
            }
          case 181: break;
          case 73: 
            { return EiffelTypes.AGENT_KEYWORD;
            }
          case 182: break;
          case 74: 
            { return EiffelTypes.DEBUG_KEYWORD;
            }
          case 183: break;
          case 75: 
            { return EiffelTypes.RETRY_KEYWORD;
            }
          case 184: break;
          case 76: 
            { return EiffelTypes.TUPLE_KEYWORD;
            }
          case 185: break;
          case 77: 
            { return EiffelTypes.UNTIL_KEYWORD;
            }
          case 186: break;
          case 78: 
            { return EiffelTypes.CREATE_KEYWORD;
            }
          case 187: break;
          case 79: 
            { return EiffelTypes.FROZEN_KEYWORD;
            }
          case 188: break;
          case 80: 
            { return EiffelTypes.EXPORT_KEYWORD;
            }
          case 189: break;
          case 81: 
            { return EiffelTypes.ELSEIF_KEYWORD;
            }
          case 190: break;
          case 82: 
            { return EiffelTypes.ENSURE_KEYWORD;
            }
          case 191: break;
          case 83: 
            { return EiffelTypes.ACROSS_KEYWORD;
            }
          case 192: break;
          case 84: 
            { return EiffelTypes.ASSIGN_KEYWORD;
            }
          case 193: break;
          case 85: 
            { return EiffelTypes.SELECT_KEYWORD;
            }
          case 194: break;
          case 86: 
            { return EiffelTypes.RESCUE_KEYWORD;
            }
          case 195: break;
          case 87: 
            { return EiffelTypes.RESULT_KEYWORD;
            }
          case 196: break;
          case 88: 
            { return EiffelTypes.RENAME_KEYWORD;
            }
          case 197: break;
          case 89: 
            { return EiffelTypes.CONVERT_KEYWORD;
            }
          case 198: break;
          case 90: 
            { return EiffelTypes.CURRENT_KEYWORD;
            }
          case 199: break;
          case 91: 
            { return EiffelTypes.FEATURE_KEYWORD;
            }
          case 200: break;
          case 92: 
            { return EiffelTypes.REQUIRE_KEYWORD;
            }
          case 201: break;
          case 93: 
            { return EiffelTypes.INSPECT_KEYWORD;
            }
          case 202: break;
          case 94: 
            { return EiffelTypes.INHERIT_KEYWORD;
            }
          case 203: break;
          case 95: 
            { return EiffelTypes.IMPLIES_KEYWORD;
            }
          case 204: break;
          case 96: 
            { return EiffelTypes.VARIANT_KEYWORD;
            }
          case 205: break;
          case 97: 
            { return EiffelTypes.EXPANDED_KEYWORD;
            }
          case 206: break;
          case 98: 
            { return EiffelTypes.EXTERNAL_KEYWORD;
            }
          case 207: break;
          case 99: 
            { return EiffelTypes.DEFERRED_KEYWORD;
            }
          case 208: break;
          case 100: 
            { return EiffelTypes.REDEFINE_KEYWORD;
            }
          case 209: break;
          case 101: 
            { return EiffelTypes.OBSOLETE_KEYWORD;
            }
          case 210: break;
          case 102: 
            { return EiffelTypes.UNDEFINE_KEYWORD;
            }
          case 211: break;
          case 103: 
            { return EiffelTypes.ATTRIBUTE_KEYWORD;
            }
          case 212: break;
          case 104: 
            { return EiffelTypes.SIGNATURE_KEYWORD;
            }
          case 213: break;
          case 105: 
            { return EiffelTypes.PRECURSOR_KEYWORD;
            }
          case 214: break;
          case 106: 
            { return EiffelTypes.INVARIANT_KEYWORD;
            }
          case 215: break;
          case 107: 
            { return EiffelTypes.C_EXTERNAL_KEYWORD;
            }
          case 216: break;
          case 108: 
            { return EiffelTypes.CPP_EXTERNAL_KEYWORD;
            }
          case 217: break;
          case 109: 
            { return EiffelTypes.DLL_EXTERNAL_KEYWORD;
            }
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
